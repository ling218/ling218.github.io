<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LinG218</title>
  
  <subtitle>自我归零！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.ling218.cn/"/>
  <updated>2019-12-16T16:53:58.137Z</updated>
  <id>https://www.ling218.cn/</id>
  
  <author>
    <name>xiaohui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kali Live Build</title>
    <link href="https://www.ling218.cn/2019121-Kali-Live-Build.html"/>
    <id>https://www.ling218.cn/2019121-Kali-Live-Build.html</id>
    <published>2019-12-01T08:00:00.000Z</published>
    <updated>2019-12-16T16:53:58.137Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 20 2019 22:46:18 GMT+0800 (GMT+08:00) --><p>该存储库将允许您构建自定义的Kali ISO。主要好处是可以将其用作<a href="https://docs.kali.org/downloading/kali-linux-live-usb-install" target="_blank" rel="external nofollow noopener noreferrer">可启动USB驱动器</a>。</p><h2 id="设定"><a href="#设定" class="headerlink" title="设定"></a>设定</h2><p>理想情况下，您应该<strong>在现有的Kali环境中</strong>构建自定义的Kali ISO <strong>。</strong>建议使用<a href="https://www.kali.org/downloads/" target="_blank" rel="external nofollow noopener noreferrer">轻量级</a>或虚拟化（<a href="https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-hyperv-image-download/" target="_blank" rel="external nofollow noopener noreferrer">VMware / VirtualBox</a>）映像。</p><p>作为<code>root</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install curl git live-build cdebootstrap</span><br></pre></td></tr></table></figure><h2 id="客制化"><a href="#客制化" class="headerlink" title="客制化"></a>客制化</h2><p>我在<a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom" target="_blank" rel="external nofollow noopener noreferrer">kali-config / variant-custom</a>目录下使用了一个自定义变量。这包括：</p><ul><li><a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/package-lists/kali.list.chroot" target="_blank" rel="external nofollow noopener noreferrer">来自默认变体</a>（<code>kali-config/variant-custom/package-lists/kali.list.chroot</code>）的<a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/package-lists/kali.list.chroot" target="_blank" rel="external nofollow noopener noreferrer">所有软件包</a></li><li><a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/package-lists/custom.list.chroot" target="_blank" rel="external nofollow noopener noreferrer">根据我的喜好附加包</a>（<code>kali-config/variant-custom/package-lists/custom.list.chroot</code>）</li><li><a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/hooks/live/customise.chroot" target="_blank" rel="external nofollow noopener noreferrer">自定义脚本</a>（<code>kali-config/variant-custom/hooks/live/customise.chroot</code>）<ul><li>克隆<a href="https://github.com/prateepb/dotfiles" target="_blank" rel="external nofollow noopener noreferrer">我的个人点文件</a></li><li><a href="https://unix.stackexchange.com/questions/387843/how-can-i-resize-the-applications-menu-item-in-gnome" target="_blank" rel="external nofollow noopener noreferrer">调整gnome菜单的大小</a></li></ul></li></ul><p>我还在以下位置自定义了时区，键盘布局和语言环境：</p><ul><li><a href="https://github.com/prateepb/kali-live-build/blob/master/auto/config" target="_blank" rel="external nofollow noopener noreferrer"><code>auto/config</code></a></li><li><a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/hooks/live/persistence-menu.binary" target="_blank" rel="external nofollow noopener noreferrer"><code>kali-config/variant-custom/hooks/live/persistence-menu.binary</code></a></li></ul><h2 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h2><p>要构建和使用自定义变体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd kali-live-build</span><br><span class="line">.&#x2F;build.sh --verbose --variant自定义</span><br></pre></td></tr></table></figure><p>完成后，可以在以下位置找到生成的ISO映像： <code>images/kali-linux-custom-rolling-amd64.iso</code></p><h2 id="快取"><a href="#快取" class="headerlink" title="快取"></a>快取</h2><p>如果您可能要运行多个构建，那么通过缓存代理（例如<a href="http://www.squid-cache.org/" target="_blank" rel="external nofollow noopener noreferrer">Squid）</a>路由所有内容很有用。这将显着加快后续运行。</p><p>例子<a href="https://github.com/prateepb/kali-live-build/blob/master/squid.conf" target="_blank" rel="external nofollow noopener noreferrer">squid.conf</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd kali-live-build</span><br><span class="line">apt-get install squid</span><br><span class="line">cp squid.conf &#x2F;etc&#x2F;squid&#x2F;squid.conf</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;squid开始</span><br></pre></td></tr></table></figure><p>现在，您可以<code>build.sh</code>使用<code>--apt-http-proxy</code>参数运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">出口http_proxy &#x3D; http：&#x2F;&#x2F; localhost：3128 &#x2F;</span><br><span class="line">.&#x2F;build.sh --verbose --variant自定义-\</span><br><span class="line">--apt-http-proxy &#x3D; $ &#123;http_proxy&#125;</span><br></pre></td></tr></table></figure><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><code>https://github.com/prateepb/kali-live-build</code></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      在现有的Kali环境中构建自定义的Kali ISO
    
    </summary>
    
    
      <category term="Kali-live-build" scheme="https://www.ling218.cn/categories/Kali-live-build/"/>
    
    
      <category term="Kali" scheme="https://www.ling218.cn/tags/Kali/"/>
    
      <category term="Linux" scheme="https://www.ling218.cn/tags/Linux/"/>
    
      <category term="Live-build" scheme="https://www.ling218.cn/tags/Live-build/"/>
    
  </entry>
  
  <entry>
    <title>在基于非Kali Debian的系统上构建Kali</title>
    <link href="https://www.ling218.cn/2019121-%E5%9C%A8%E5%9F%BA%E4%BA%8E%E9%9D%9EKali-Debian%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%B8%8A%E6%9E%84%E5%BB%BAKali.html"/>
    <id>https://www.ling218.cn/2019121-%E5%9C%A8%E5%9F%BA%E4%BA%8E%E9%9D%9EKali-Debian%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%B8%8A%E6%9E%84%E5%BB%BAKali.html</id>
    <published>2019-12-01T08:00:00.000Z</published>
    <updated>2019-12-15T16:05:14.232Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 20 2019 22:46:18 GMT+0800 (GMT+08:00) --><p>您可以在Kali以外的基于Debian的系统上轻松运行实时构建。以下说明已经过测试，可以与Debian和Ubuntu一起使用。</p><p>首先，我们通过确保已完全更新来准备系统，然后继续下载Kali存档密钥环和实时构建软件包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">cd &#x2F;root&#x2F;</span><br><span class="line"></span><br><span class="line">wget http:&#x2F;&#x2F;http.kali.org&#x2F;pool&#x2F;main&#x2F;k&#x2F;kali-archive-keyring&#x2F;kali-archive-keyring_2018.2_all.deb</span><br><span class="line">wget https:&#x2F;&#x2F;archive.kali.org&#x2F;kali&#x2F;pool&#x2F;main&#x2F;l&#x2F;live-build&#x2F;live-build_20190311_all.deb</span><br></pre></td></tr></table></figure><p>完成后，我们将安装一些其他依赖项和以前下载的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y git live-build cdebootstrap debootstrap curl</span><br><span class="line">sudo dpkg -i kali-archive-keyring_2018.2_all.deb</span><br><span class="line">sudo dpkg -i live-build_20190311_all.deb</span><br></pre></td></tr></table></figure><p>准备好所有环境后，我们通过设置构建脚本并签出构建配置来开始实时构建过程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;share&#x2F;debootstrap&#x2F;scripts&#x2F;</span><br><span class="line">echo &quot;default_mirror http:&#x2F;&#x2F;http.kali.org&#x2F;kali&quot;; sed -e &quot;s&#x2F;debian-archive-keyring.gpg&#x2F;kali-archive-keyring.gpg&#x2F;g&quot; sid &gt; &#x2F;tmp&#x2F;kali</span><br><span class="line">sudo mv &#x2F;tmp&#x2F;kali .</span><br><span class="line">sudo ln -s kali kali-rolling</span><br><span class="line"></span><br><span class="line">cd ~</span><br><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;build-scripts&#x2F;live-build-config.git</span><br><span class="line"></span><br><span class="line">cd live-build-config&#x2F;</span><br></pre></td></tr></table></figure><p>此时，我们必须编辑<code>build.sh</code>脚本以绕过版本检查。为此，我们注释掉下面的“出口1”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Check we have a good debootstrap</span><br><span class="line">ver_debootstrap&#x3D;$(dpkg-query -f &#39;$&#123;Version&#125;&#39; -W debootstrap)</span><br><span class="line">if dpkg --compare-versions &quot;$ver_debootstrap&quot; lt &quot;1.0.97&quot;; then</span><br><span class="line">if ! echo &quot;$ver_debootstrap&quot; | grep -q kali; then</span><br><span class="line">echo &quot;ERROR: You need debootstrap &gt;&#x3D; 1.0.97 (or a Kali patched debootstrap). Your current version: $ver_debootstrap&quot; &gt;&amp;2</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>进行更改后，脚本应如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Check we have a good debootstrap</span><br><span class="line">ver_debootstrap&#x3D;$(dpkg-query -f &#39;$&#123;Version&#125;&#39; -W debootstrap)</span><br><span class="line">if dpkg --compare-versions &quot;$ver_debootstrap&quot; lt &quot;1.0.97&quot;; then</span><br><span class="line">if ! echo &quot;$ver_debootstrap&quot; | grep -q kali; then</span><br><span class="line">echo &quot;ERROR: You need debootstrap &gt;&#x3D; 1.0.97 (or a Kali patched debootstrap). Your current version: $ver_debootstrap&quot; &gt;&amp;2</span><br><span class="line"># exit 1</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>此时，我们可以正常建立ISO</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo .&#x2F;build.sh --variant light --verbose</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      可以在Kali以外的基于Debian的系统上轻松运行实时构建
    
    </summary>
    
    
      <category term="Kali-live-build" scheme="https://www.ling218.cn/categories/Kali-live-build/"/>
    
    
      <category term="Kali" scheme="https://www.ling218.cn/tags/Kali/"/>
    
      <category term="Linux" scheme="https://www.ling218.cn/tags/Linux/"/>
    
      <category term="Live-build" scheme="https://www.ling218.cn/tags/Live-build/"/>
    
      <category term="Debian" scheme="https://www.ling218.cn/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>实时构建自定义的 Kali ISO</title>
    <link href="https://www.ling218.cn/2019121-%E5%AE%9E%E6%97%B6%E6%9E%84%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%20Kali%20ISO.html"/>
    <id>https://www.ling218.cn/2019121-%E5%AE%9E%E6%97%B6%E6%9E%84%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%20Kali%20ISO.html</id>
    <published>2019-12-01T08:00:00.000Z</published>
    <updated>2019-12-15T16:05:14.236Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 20 2019 22:46:18 GMT+0800 (GMT+08:00) --><h2 id="建立自己的Kali-ISO简介"><a href="#建立自己的Kali-ISO简介" class="headerlink" title="建立自己的Kali ISO简介"></a>建立自己的Kali ISO简介</h2><p>构建自定义的Kali ISO既简单，有趣又有意义。您几乎可以使用Debian动态<a href="https://live-team.pages.debian.net/live-manual/html/live-manual/index.en.html" target="_blank" rel="external nofollow noopener noreferrer">构建</a>脚本来配置Kali ISO构建的任何方面。这些脚本使开发人员可以通过提供一个框架来轻松构建实时系统映像，该框架使用配置集来自动化和自定义构建映像的所有方面。Kali Linux开发团队已经采用了这些脚本，它们被用来制作Kali ISO正式发行版。</p><h2 id="您应该在哪里建立ISO？"><a href="#您应该在哪里建立ISO？" class="headerlink" title="您应该在哪里建立ISO？"></a>您应该在哪里建立ISO？</h2><p>理想情况下，您应该<strong>在现有的Kali环境中</strong>构建自定义的Kali ISO 。</p><h2 id="准备就绪-设置实时构建系统"><a href="#准备就绪-设置实时构建系统" class="headerlink" title="准备就绪-设置实时构建系统"></a>准备就绪-设置实时构建系统</h2><p>我们首先需要使用以下命令通过安装和设置实时构建及其要求来准备Kali ISO构建环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install -y curl git live-build cdebootstrap</span><br><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;build-scripts&#x2F;live-build-config.git</span><br></pre></td></tr></table></figure><p>现在，您只需输入“ live-build-config”目录并运行我们的<strong>build.sh</strong>包装器脚本，即可简单地构建更新的Kali ISO ，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd live-build-config&#x2F;</span><br><span class="line">.&#x2F;build.sh --verbose</span><br></pre></td></tr></table></figure><p>“ build.sh”脚本需要一段时间才能完成，因为它会下载创建ISO所需的所有必需软件包。喝咖啡的好时机。</p><h2 id="配置Kali-ISO构建（可选）"><a href="#配置Kali-ISO构建（可选）" class="headerlink" title="配置Kali ISO构建（可选）"></a>配置Kali ISO构建（可选）</h2><p>如果您想自定义您的Kali Linux ISO，本节将解释一些细节。通过<strong>kali-config</strong>目录，Kali Linux live build支持各种自定义选项，这些选项在Debian <a href="https://live-team.pages.debian.net/live-manual/html/live-manual/customization-overview.en.html" target="_blank" rel="external nofollow noopener noreferrer">live build 4.x</a>页面上有详细记录。但是，对于不耐烦的人，这里是一些重点。</p><h3 id="使用不同的桌面环境构建Kali"><a href="#使用不同的桌面环境构建Kali" class="headerlink" title="使用不同的桌面环境构建Kali"></a>使用不同的桌面环境构建Kali</h3><p>从Kali 2.0开始，我们现在支持各种桌面环境的内置配置，包括KDE，Gnome，E17，I3WM，LXDE，MATE和XFCE。要构建其中的任何一个，您将使用类似于以下内容的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># These are the different Desktop Environment build options:</span><br><span class="line">#.&#x2F;build.sh --variant &#123;gnome,kde,xfce,mate,e17,lxde,i3wm&#125; --verbose</span><br><span class="line"></span><br><span class="line"># To build a KDE ISO:</span><br><span class="line">.&#x2F;build.sh --variant kde --verbose</span><br><span class="line"># To build a MATE ISO:</span><br><span class="line">.&#x2F;build.sh --variant mate --verbose</span><br><span class="line"></span><br><span class="line">#...and so on.</span><br></pre></td></tr></table></figure><h3 id="控制构建中包含的软件包"><a href="#控制构建中包含的软件包" class="headerlink" title="控制构建中包含的软件包"></a>控制构建中包含的软件包</h3><p>您的构建中包含的软件包列表将出现在相应的kali- $ variant目录中。例如，如果要构建默认的Gnome ISO，则应使用以下软件包列表文件<strong>-kali-config / variant-gnome / package-lists / kali.list.chroot</strong>。默认情况下，此列表包括“ kali-linux-full”元软件包以及其他一些软件包。可以将它们注释掉，并用手册的手动列表替换，以将其包括在ISO中以获得更大的粒度。</p><h3 id="构建钩子，二进制文件和chroot"><a href="#构建钩子，二进制文件和chroot" class="headerlink" title="构建钩子，二进制文件和chroot"></a>构建钩子，二进制文件和chroot</h3><p>实时构建挂钩允许我们在Kali ISO实时构建的各个阶段中钩挂脚本。有关钩子及其使用方法的更多详细信息，请参阅<a href="https://live-team.pages.debian.net/live-manual/html/live-manual/customizing-contents.en.html#507" target="_blank" rel="external nofollow noopener noreferrer">实时构建手册</a>。例如，我们建议您在<strong>kali-config / common / hooks /中</strong>检出现有的挂钩。</p><h3 id="覆盖构建中的文件"><a href="#覆盖构建中的文件" class="headerlink" title="覆盖构建中的文件"></a>覆盖构建中的文件</h3><p>您可以通过将其他文件或脚本分别覆盖在现有文件系统上的<strong>include。{chroot，binary，installer}</strong>目录中，来选择将其他文件或脚本包含在构建中。例如，如果我们想将自己的自定义脚本包括在ISO 的<strong>/ root /</strong>目录中（这将对应于“ chroot”阶段），则可以将该脚本文件放入<strong>kali-config / common / includes中。 chroot /</strong>目录，然后再建立ISO。</p><h2 id="为较早的i386架构构建Kali-Linux-ISO"><a href="#为较早的i386架构构建Kali-Linux-ISO" class="headerlink" title="为较早的i386架构构建Kali Linux ISO"></a>为较早的i386架构构建Kali Linux ISO</h2><p>Kali Linux i386 ISO已启用PAE。如果您需要禁用PAE的旧硬件的默认内核，则需要重建Kali Linux ISO。重建过程与上述过程基本相同，除了需要按如下所示在<strong>auto / config</strong>中将<strong>686-pae</strong>参数更改为<strong>586</strong>。首先，安装先决条件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install -y git live-build cdebootstrap debootstrap</span><br><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;build-scripts&#x2F;live-build-config.git</span><br></pre></td></tr></table></figure><p>接下来，对auto / config进行更改以适合相应的体系结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd live-build-config&#x2F;</span><br><span class="line">sed -i &#39;s&#x2F;686-pae&#x2F;686&#x2F;g&#39; auto&#x2F;config</span><br></pre></td></tr></table></figure><p>最后，运行您的构建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;build.sh --arch i386 --verbose</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      实时构建自定义的Kali ISO，被用来制作Kali ISO正式发行版
    
    </summary>
    
    
      <category term="Kali-live-build" scheme="https://www.ling218.cn/categories/Kali-live-build/"/>
    
    
      <category term="Kali" scheme="https://www.ling218.cn/tags/Kali/"/>
    
      <category term="Linux" scheme="https://www.ling218.cn/tags/Linux/"/>
    
      <category term="Live-build" scheme="https://www.ling218.cn/tags/Live-build/"/>
    
  </entry>
  
  <entry>
    <title>重建源程序包</title>
    <link href="https://www.ling218.cn/2019121-%E9%87%8D%E5%BB%BA%E6%BA%90%E7%A8%8B%E5%BA%8F%E5%8C%85.html"/>
    <id>https://www.ling218.cn/2019121-%E9%87%8D%E5%BB%BA%E6%BA%90%E7%A8%8B%E5%BA%8F%E5%8C%85.html</id>
    <published>2019-12-01T08:00:00.000Z</published>
    <updated>2019-12-15T16:05:14.236Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 20 2019 22:46:18 GMT+0800 (GMT+08:00) --><p>Kali Linux <a href="https://www.kali.org/docs/development/live-build-a-custom-kali-iso/" target="_blank" rel="external nofollow noopener noreferrer">易于在每个软件包级别进行自定义</a>，并且对单个<a href="http://pkg.kali.org/" target="_blank" rel="external nofollow noopener noreferrer">软件包</a>进行修改并从其源代码重建它们以包含在自定义ISO或桌面安装中也很简单。</p><p>完成此过程很简单，只需三个步骤：</p><ul><li>使用<strong>apt</strong>提取软件包源</li><li>根据需要修改它们</li><li>使用Debian工具重建软件包。</li></ul><p>在此示例中，我们将重建<a href="https://github.com/nfc-tools/libfreefare" target="_blank" rel="external nofollow noopener noreferrer">libfreefare</a>软件包，以便将一些额外的硬编码Mifare访问密钥添加到mifare格式的工具中。</p><p>在进行其他操作之前，请确保未注释掉该<code>deb-src</code>行<code>/etc/apt/sources.list</code>。</p><h2 id="下载包源"><a href="#下载包源" class="headerlink" title="下载包源"></a>下载包源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Get the source package</span><br><span class="line">apt update</span><br><span class="line">apt-get source libfreefare</span><br><span class="line">cd libfreefare-0.4.0&#x2F;</span><br></pre></td></tr></table></figure><h2 id="编辑包源代码"><a href="#编辑包源代码" class="headerlink" title="编辑包源代码"></a>编辑包源代码</h2><p>对程序包的源代码进行所需的更改。在本例中，我们修改了示例文件mifare-classic-format.c。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano examples/mifare-classic-format.c</span><br></pre></td></tr></table></figure><h2 id="检查构建依赖关系"><a href="#检查构建依赖关系" class="headerlink" title="检查构建依赖关系"></a>检查构建依赖关系</h2><p>检查软件包可能具有的任何构建依赖项。必须先安装这些工具，然后才能构建软件包。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-checkbuilddeps</span><br></pre></td></tr></table></figure><p>输出应类似于以下内容，具体取决于您已经安装了哪些软件包。如果<strong>dpkg-checkbuilddeps不</strong>返回任何输出，则意味着您可以继续进行构建，所有依赖项都已满足。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-checkbuilddeps: Unmet build dependencies:</span><br></pre></td></tr></table></figure><h2 id="安装构建依赖项"><a href="#安装构建依赖项" class="headerlink" title="安装构建依赖项"></a>安装构建依赖项</h2><p>如果需要，请安装所有构建依赖项，如<strong>dpkg-checkbuilddeps</strong>的输出所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install dh-autoreconf libnfc-dev libssl-dev</span><br></pre></td></tr></table></figure><h2 id="构建修改后的程序包"><a href="#构建修改后的程序包" class="headerlink" title="构建修改后的程序包"></a>构建修改后的程序包</h2><p>安装了所有依赖项之后，<strong>dpkg-buildpackage</strong>命令就可以构建新版本。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-buildpackage</span><br></pre></td></tr></table></figure><h2 id="安装新软件包"><a href="#安装新软件包" class="headerlink" title="安装新软件包"></a>安装新软件包</h2><p>如果构建顺利完成，则可以使用<strong>dpkg</strong>安装新创建的软件包。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i ../libfreefare*.deb</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      Kali Linux 易于在每个软件包级别进行自定义，并且对单个软件包进行修改并从其源代码重建它们以包含在自定义ISO或桌面安装中也很简单。
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.ling218.cn/categories/Linux/"/>
    
    
      <category term="Kali" scheme="https://www.ling218.cn/tags/Kali/"/>
    
      <category term="Linux" scheme="https://www.ling218.cn/tags/Linux/"/>
    
      <category term="程序包" scheme="https://www.ling218.cn/tags/%E7%A8%8B%E5%BA%8F%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>重新编译Kali Linux内核</title>
    <link href="https://www.ling218.cn/2019121-%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91Kali-Linux%E5%86%85%E6%A0%B8.html"/>
    <id>https://www.ling218.cn/2019121-%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91Kali-Linux%E5%86%85%E6%A0%B8.html</id>
    <published>2019-12-01T08:00:00.000Z</published>
    <updated>2019-12-15T16:05:14.240Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Dec 20 2019 22:46:18 GMT+0800 (GMT+08:00) --><p>Kali Linux的可定制性一直扩展到Linux内核。</p><p>根据您的要求，您可能希望添加库存Kali Linux内核中未包含的驱动程序，补丁或内核功能。以下指南将介绍如何快速修改和重新编译Kali Linux内核以满足您的需求。请注意，默认情况下，Kali Linux内核中已经存在全局无线注入补丁。</p><h2 id="安装构建依赖项"><a href="#安装构建依赖项" class="headerlink" title="安装构建依赖项"></a>安装构建依赖项</h2><p>首先安装所有用于重新编译内核的构建依赖项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install build-essential libncurses5-dev fakeroot unxz</span><br></pre></td></tr></table></figure><h2 id="下载Kali-Linux内核源代码"><a href="#下载Kali-Linux内核源代码" class="headerlink" title="下载Kali Linux内核源代码"></a>下载Kali Linux内核源代码</h2><p>本节的其余部分重点介绍4.9版本的Linux内核，但是示例当然可以根据所需的特定内核版本进行调整。我们假设已安装linux-source-4.9二进制软件包。请注意，我们安装了包含上游源代码的二进制软件包，但没有检索名为linux的Kali源代码软件包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apt install linux-source-4.9</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  bc libreadline7</span><br><span class="line">Suggested packages:</span><br><span class="line">  libncurses-dev | ncurses-dev libqt4-dev</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  bc libreadline7 linux-source-4.9</span><br><span class="line">0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Need to get 95.4 MB of archives.</span><br><span class="line">After this operation, 95.8 MB of additional disk space will be used.</span><br><span class="line">Do you want to continue? [Y&#x2F;n] y</span><br><span class="line">...SNIP...</span><br><span class="line">ls &#x2F;usr&#x2F;src</span><br><span class="line">linux-config-4.9  linux-patch-4.9-rt.patch.xz  linux-source-4.9.tar.xz</span><br></pre></td></tr></table></figure><p>请注意，该软件包包含<em>/usr/src/linux-source-4.9.tar.xz</em>，这是内核源代码的压缩存档。您必须将这些文件解压缩到新目录中（而不是直接在/ usr / src /下，因为不需要特殊权限来编译Linux内核）。相反，<em>〜/ kernel /</em>更合适。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~&#x2F;kernel; cd ~&#x2F;kernel</span><br><span class="line">tar -xaf &#x2F;usr&#x2F;src&#x2F;linux-source-4.9.tar.xz</span><br></pre></td></tr></table></figure><h3 id="配置内核"><a href="#配置内核" class="headerlink" title="配置内核"></a>配置内核</h3><p>重新编译内核的最新版本（可能带有附加补丁程序）时，配置很可能会尽可能与Kali提出的配置保持接近。在这种情况下，将<em>/ boot / config-version</em>文件（版本是当前使用的内核的版本，可以通过<strong>uname -r</strong>命令找到）复制到<em>本地</em>，而不是从头开始重新配置所有内容<em>。</em>包含内核源代码的目录中的<em>配置</em>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;boot&#x2F;config-4.9.0-kali1-amd64 ~&#x2F;kernel&#x2F;linux-source-4.9&#x2F;.config</span><br></pre></td></tr></table></figure><p>如果需要进行更改，或者决定从头开始重新配置所有内容，则必须花时间配置内核。这可以通过调用<strong>make menuconfig</strong>命令来完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p>使用<strong>menuconfig</strong>设置内核构建的详细信息不在本指南的范围之内。<a href="https://www.linux.org/threads/the-linux-kernel-configuring-the-kernel-part-1.8745/" target="_blank" rel="external nofollow noopener noreferrer">有关</a>在Linux.org <a href="https://www.linux.org/threads/the-linux-kernel-configuring-the-kernel-part-1.8745/" target="_blank" rel="external nofollow noopener noreferrer">上配置内核构建</a>的<a href="https://www.linux.org/threads/the-linux-kernel-configuring-the-kernel-part-1.8745/" target="_blank" rel="external nofollow noopener noreferrer">详细教程</a>。</p><h2 id="建立内核"><a href="#建立内核" class="headerlink" title="建立内核"></a>建立内核</h2><p>准备好内核配置后，一个简单的<strong>make deb-pkg</strong>将生成多达5个Debian软件包：包含内核映像和相关模块的<em>linux-image- *</em>版本<strong>* <em>linux-headers- **version</em></strong>，其中包含构建所需的头文件。外部模块<em>linux-firmware-image- *</em>version<strong><em>，其中包含一些驱动程序所需的固件文件（当从Debian或Kali提供的内核源进行构建时，可能会缺少此软件包），</em>linux-image- **version</strong> -dbg<em>，其中包含内核映像及其模块和</em>linux-libc-dev*的调试符号，其中包含与某些用户空间库（例如GNU glibc）相关的标头。Linux内核映像是一个大型构建，需要花费一些时间才能完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br><span class="line">make deb-pkg LOCALVERSION&#x3D;-custom KDEB_PKGVERSION&#x3D;$(make kernelversion)-1</span><br><span class="line">...SNIP...</span><br><span class="line">ls ..&#x2F;*.deb</span><br><span class="line">..&#x2F;linux-headers-4.9.0-kali1-custom_4.9.2-1_amd64.deb</span><br><span class="line">..&#x2F;linux-image-4.9.0-kali1-custom_4.9.2-1_amd64.deb</span><br><span class="line">..&#x2F;linux-image-4.9.0-kali1-custom-dbg_4.9.2-1_amd64.deb</span><br><span class="line">..&#x2F;linux-libc-dev_4.9.2-1_amd64.deb</span><br></pre></td></tr></table></figure><h2 id="安装修改后的内核"><a href="#安装修改后的内核" class="headerlink" title="安装修改后的内核"></a>安装修改后的内核</h2><p>构建成功完成后，您可以继续安装新的自定义内核并重新引导系统。请注意，特定的内核版本号会有所不同-在我们的示例中，是在Kali 2016.2系统上完成的，为4.9.2。根据要构建的当前内核版本，您将需要相应地调整命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i ..&#x2F;linux-image-4.9.0-kali1-custom_4.9.2-1_amd64.deb</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>系统重新引导后，新内核应已运行。如果出现问题并且内核无法成功引导，您仍然可以使用GrUB菜单从原始的原始Kali内核引导并解决问题。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      您可能希望添加库存Kali Linux内核中未包含的驱动程序，补丁或内核功能
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.ling218.cn/categories/Linux/"/>
    
    
      <category term="Kali" scheme="https://www.ling218.cn/tags/Kali/"/>
    
      <category term="Linux" scheme="https://www.ling218.cn/tags/Linux/"/>
    
      <category term="Kernl" scheme="https://www.ling218.cn/tags/Kernl/"/>
    
  </entry>
  
</feed>
