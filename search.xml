<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Next 主题深度优化</title>
    <url>/archives/d0f44881.html</url>
    <content><![CDATA[<h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><p>在博客根目录运行下面命令安装插件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<p>打开<code>./themes/next/layout/_macro/post.swig</code>并搜索<code>&lt;div class=&quot;post-meta&quot;&gt;</code>,在其中添加下列代码以开启标签。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">	&lt;i class&#x3D;&quot;fa fa-thumb-tack&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">	&lt;font color&#x3D;FF0000&gt;置顶&lt;&#x2F;font&gt;</span><br><span class="line">	&lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>在需要置顶的文章中加入<code>top: true</code>即可，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo</span><br><span class="line">date: 2019-05-02 19:00:00</span><br><span class="line">categories: Blog</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><p>只在需要的时候加载图片，而不是一次性加载完成，加快速度，适用于图片较多的博客（<del>像我一样懒得放图的就不用看了</del>）。</p>
<p>在博客根目录执行命令安装插件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload --save</span><br></pre></td></tr></table></figure>

<p>在博客根目录的配置文件<code>_config.yml</code>中添加下列代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  enable: true</span><br><span class="line">  onlypost: false #是否只在文章中开启懒加载</span><br><span class="line">  # className: #可选 e.g. .J-lazyload-img</span><br><span class="line">  # loadingImg: #可选 eg. .&#x2F;images&#x2F;loading.png 作为图片未加载时的替代图片</span><br></pre></td></tr></table></figure>



<h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><p>开启站内搜索功能方便快速定位，运行下面命令安装插件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>打开Next主题的配置文件 <code>_config.yml</code> 并搜索 <code>local_search</code>，修改为。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br></pre></td></tr></table></figure>



<h2 id="顶部阅读进度条"><a href="#顶部阅读进度条" class="headerlink" title="顶部阅读进度条"></a>顶部阅读进度条</h2><p>在博文页面顶部添加<a href="https://github.com/theme-next/theme-next-reading-progress" target="_blank" rel="external nofollow noopener noreferrer">Reading Progress</a>进度条，表示阅读进度，Next主题已内置配置文件。</p>
<p>切换到Next主题文件夹。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>安装模块到<code>source/lib</code>文件夹。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-reading-progress source&#x2F;lib&#x2F;reading_progress</span><br></pre></td></tr></table></figure>

<p>打开Next主题路径下的配置文件<code>_config.yml</code>，搜索<code>reading_progress</code>定位到如下代码并将<code>enable:</code>设置为<code>true</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Reading progress bar</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-reading-progress</span><br><span class="line">reading_progress:</span><br><span class="line">  enable: true</span><br><span class="line">  color: &quot;#ff0000&quot; # 调整线条颜色</span><br><span class="line">  height: 2px # 调整线条高度</span><br></pre></td></tr></table></figure>

<p>默认颜色是青色，我修改的是红色。顶部阅读进度条可能会和加载条重合，可以通过修改线条高度覆盖，我的线条高度设置成了<code>3px</code>。</p>
<h2 id="加载条"><a href="#加载条" class="headerlink" title="加载条"></a>加载条</h2><p>用于在网页加载的过程中显示加载进度，Next主题已支持<a href="https://github.com/theme-next/theme-next-pace" target="_blank" rel="external nofollow noopener noreferrer">PACE</a>功能。有多种加载动画可选。</p>
<p>切换到Next主题文件夹。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>安装模块到<code>source/lib</code>文件夹。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-pace source&#x2F;lib&#x2F;pace</span><br></pre></td></tr></table></figure>

<p>打开Next主题路径下的配置文件<code>_config.yml</code>，搜索<code>pace</code>定位到如下代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Progress bar in the top during page loading.</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-pace</span><br><span class="line">pace: true</span><br><span class="line"># Themes list:</span><br><span class="line"># pace-theme-big-counter | pace-theme-bounce | pace-theme-barber-shop | pace-theme-center-atom</span><br><span class="line"># pace-theme-center-circle | pace-theme-center-radar | pace-theme-center-simple | pace-theme-corner-indicator</span><br><span class="line"># pace-theme-fill-left | pace-theme-flash | pace-theme-loading-bar | pace-theme-mac-osx | pace-theme-minimal</span><br><span class="line">pace_theme: pace-theme-flash</span><br></pre></td></tr></table></figure>

<p>将<code>pace:</code>设置为<code>true</code><br>将<code>pace_theme:</code>设置为上面<code>Themes list:</code>中的一种，主题样式可以在<a href="https://github.hubspot.com/pace/docs/welcome/" target="_blank" rel="external nofollow noopener noreferrer">PACE</a>查看。</p>
<p>为了让进度条和主题背景相匹配，可以在<code>./themes/next/source/lib/pace</code>中找到相应主题的css文件并修改颜色配置。下面代码以<code>pace-theme-flash.min.css</code>示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.pace &#123;</span><br><span class="line">  -webkit-pointer-events: none;</span><br><span class="line">  pointer-events: none;</span><br><span class="line">  -webkit-user-select: none;</span><br><span class="line">  -moz-user-select: none;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace-inactive &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace .pace-progress &#123;</span><br><span class="line">  background: #ffc0cb;</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 2000;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace .pace-progress-inner &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 0px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100%;</span><br><span class="line">  box-shadow: 0 0 10px #ffc0cb, 0 0 5px #ffc0cb;</span><br><span class="line">  opacity: 1.0;</span><br><span class="line">  -webkit-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  -moz-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  -ms-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  -o-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace .pace-activity &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 2000;</span><br><span class="line">  top: 15px;</span><br><span class="line">  right: 15px;</span><br><span class="line">  width: 14px;</span><br><span class="line">  height: 14px;</span><br><span class="line">  border: solid 2px transparent;</span><br><span class="line">  border-top-color: #ffc0cb;</span><br><span class="line">  border-left-color: #ffc0cb;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  -webkit-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  -moz-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  -ms-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  -o-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  animation: pace-spinner 400ms linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -webkit-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -webkit-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -moz-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -moz-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-o-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -o-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -o-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-ms-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -ms-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -ms-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用搜索功能搜索<code>#</code>,定位到颜色设置，上述代码中一共有5处。</p>
<h2 id="鼠标点击特效-（心形特效）"><a href="#鼠标点击特效-（心形特效）" class="headerlink" title="鼠标点击特效 （心形特效）"></a>鼠标点击特效 （心形特效）</h2><p>在网页中加入鼠标点击特效，目前有心形和爆炸两种特效，两者可以叠加，特效对性能较低的设备非常不友好，尤其是爆炸特效。</p>
<p>在<code>./themes/next/source/js</code>中新建<code>clicklove.js</code>，并将粘贴下列代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#39;&#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e&#x3D;0;e&lt;d.length;e++)d[e].alpha&lt;&#x3D;0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+&#x3D;.004,d[e].alpha-&#x3D;.013,d[e].el.style.cssText&#x3D;&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t&#x3D;&quot;function&quot;&#x3D;&#x3D;typeof e.onclick&amp;&amp;e.onclick;e.onclick&#x3D;function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a&#x3D;t.createElement(&quot;div&quot;);a.className&#x3D;&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a&#x3D;t.createElement(&quot;style&quot;);a.type&#x3D;&quot;text&#x2F;css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText&#x3D;e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d&#x3D;[];e.requestAnimationFrame&#x3D;function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3&#x2F;60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure>

<p>打开<code>./themes/next/layout/_layout.swig</code>并在末尾添加以下代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击心形 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;clicklove.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="背景及半透明效果"><a href="#背景及半透明效果" class="headerlink" title="背景及半透明效果"></a>背景及半透明效果</h2><p>将选好的背景图片放在<code>博客根目录/themes/next/source/images</code>中。</p>
<p>打开 <code>themes/next/_config.yml</code> 并搜索 <code>custom_file_path</code>，修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  style: source&#x2F;_data&#x2F;styles.styl</span><br></pre></td></tr></table></figure>

<p>在博客根目录下创建<code>_data</code>目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p source&#x2F;_data</span><br></pre></td></tr></table></figure>

<p>在<code>_data</code>目录下创建<code>styles.styl</code>文件，添加如下内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background:url(&#x2F;images&#x2F;background.jpg);&#x2F;&#x2F;图片路径</span><br><span class="line">    background-repeat: no-repeat;&#x2F;&#x2F;是否重复平铺</span><br><span class="line">    background-attachment:fixed;&#x2F;&#x2F;是否随着网页上下滚动而滚动，fixed为固定</span><br><span class="line">    background-position:50% 50%;&#x2F;&#x2F;图片位置</span><br><span class="line">    background-size: cover;&#x2F;&#x2F;图片展示大小</span><br><span class="line">    -webkit-background-size: cover;</span><br><span class="line">    -o-background-size: cover;</span><br><span class="line">    -moz-background-size: cover;</span><br><span class="line">    -ms-background-size: cover;</span><br><span class="line"></span><br><span class="line">     #footer &gt; div &gt; div &#123;</span><br><span class="line">        color:#000000;&#x2F;&#x2F;底部文字颜色</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header-inner &#123;</span><br><span class="line">    background: #ffffffe8;&#x2F;&#x2F;设置侧边栏透明</span><br><span class="line">    opacity: 1;&#x2F;&#x2F;这里设置为1，否则搜索栏会消失</span><br><span class="line">&#125;</span><br><span class="line">.main-inner &#123;</span><br><span class="line">		background: #fff;</span><br><span class="line">		opacity: 0.9;&#x2F;&#x2F;设置文章主体透明度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>背景图片不要太大，最好压缩一下，太大网站加载速度会极慢。</p>
<p>透明度不要调太低，影响阅读。</p>
<h2 id="在文章结尾添加本文结束标志"><a href="#在文章结尾添加本文结束标志" class="headerlink" title="在文章结尾添加本文结束标志"></a>在文章结尾添加本文结束标志</h2><p>打开 <code>themes/next/_config.yml</code> 并搜索 <code>custom_file_path</code>，修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  postBodyEnd: source&#x2F;_data&#x2F;post-body-end.swig</span><br></pre></td></tr></table></figure>

<p>在<code>_data</code>目录下创建<code>post-body-end.swig</code>文件，添加如下内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style&#x3D;&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class&#x3D;&quot;fa fa-paw&quot;&gt;&lt;&#x2F;i&gt;感谢您的阅读-------------&lt;&#x2F;div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



<h2 id="修改代码块颜色"><a href="#修改代码块颜色" class="headerlink" title="修改代码块颜色"></a>修改代码块颜色</h2><p>打开<code>source/_data/styles.styl</code>文件并添加下列代码，<code>color</code>可以自定义设置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; &#96;&#96;代码块样式</span><br><span class="line">code &#123;</span><br><span class="line">    color: #ff0000;</span><br><span class="line">    background: #d1d1d1d1;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 文章&#96;&#96;&#96;代码块顶部样式</span><br><span class="line">.highlight figcaption &#123;</span><br><span class="line">    margin: 0em;</span><br><span class="line">    padding: 0.5em;</span><br><span class="line">    background: #eee;</span><br><span class="line">    border-bottom: 1px solid #ff0000;</span><br><span class="line">&#125;</span><br><span class="line">.highlight figcaption a &#123;</span><br><span class="line">    color: rgb(80, 115, 184);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="网站运行时间"><a href="#网站运行时间" class="headerlink" title="网站运行时间"></a>网站运行时间</h2><p>打开<code>./themes/next/layout/_partials/footer.swig</code>并添加下列代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span id&#x3D;&quot;timeDate&quot;&gt;载入天数...&lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;times&quot;&gt;载入时分秒...&lt;&#x2F;span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now &#x3D; new Date();</span><br><span class="line">    function createtime() &#123;</span><br><span class="line">        var grt&#x3D; new Date(&quot;03&#x2F;31&#x2F;2019 00:00:00&quot;);</span><br><span class="line">        now.setTime(now.getTime()+250);</span><br><span class="line">        days &#x3D; (now - grt ) &#x2F; 1000 &#x2F; 60 &#x2F; 60 &#x2F; 24; dnum &#x3D; Math.floor(days);</span><br><span class="line">        hours &#x3D; (now - grt ) &#x2F; 1000 &#x2F; 60 &#x2F; 60 - (24 * dnum); hnum &#x3D; Math.floor(hours);</span><br><span class="line">        if(String(hnum).length &#x3D;&#x3D;1 )&#123;hnum &#x3D; &quot;0&quot; + hnum;&#125; minutes &#x3D; (now - grt ) &#x2F; 1000 &#x2F;60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">        mnum &#x3D; Math.floor(minutes); if(String(mnum).length &#x3D;&#x3D;1 )&#123;mnum &#x3D; &quot;0&quot; + mnum;&#125;</span><br><span class="line">        seconds &#x3D; (now - grt ) &#x2F; 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">        snum &#x3D; Math.round(seconds); if(String(snum).length &#x3D;&#x3D;1 )&#123;snum &#x3D; &quot;0&quot; + snum;&#125;</span><br><span class="line">        document.getElementById(&quot;timeDate&quot;).innerHTML &#x3D; &quot;本站已安全运行 &quot;+dnum+&quot; 天 &quot;;</span><br><span class="line">        document.getElementById(&quot;times&quot;).innerHTML &#x3D; hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



<h2 id="字数统计和阅读时长统计"><a href="#字数统计和阅读时长统计" class="headerlink" title="字数统计和阅读时长统计"></a>字数统计和阅读时长统计</h2><p>在博客根目录下运行下面命令安装统计插件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<p>在博客根目录配置文件 <code>_config.yml</code> 中加入下列代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true # 文章字数</span><br><span class="line">  time: true # 阅读时长</span><br><span class="line">  total_symbols: true # 所有文章总字数</span><br><span class="line">  total_time: true # 所有文章阅读中时长</span><br></pre></td></tr></table></figure>

<p>在Next主题配置文件<code>_config.yaml</code>中搜索<code>symbol_count</code>并修改为。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo,next7.6</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Build-live 项目收集</title>
    <url>/archives/3311a575.html</url>
    <content><![CDATA[<h1 id="GitHub-Build-live-项目收集"><a href="#GitHub-Build-live-项目收集" class="headerlink" title="GitHub Build-live 项目收集"></a>GitHub Build-live 项目收集</h1><h3 id="创建-Ubuntu-live-脚本"><a href="#创建-Ubuntu-live-脚本" class="headerlink" title="创建 Ubuntu live 脚本"></a>创建 Ubuntu live 脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;RTXI&#x2F;live-image</span><br></pre></td></tr></table></figure>



<h3 id="构建-Debain-live-脚本-（基于-debian-live）"><a href="#构建-Debain-live-脚本-（基于-debian-live）" class="headerlink" title="构建 Debain live 脚本 （基于 debian live）"></a>构建 Debain live 脚本 （基于 debian live）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;s-vincent&#x2F;debian-live-image</span><br></pre></td></tr></table></figure>



<h3 id="构建-Debain-live-脚本-分步骤小脚本"><a href="#构建-Debain-live-脚本-分步骤小脚本" class="headerlink" title="构建 Debain live 脚本 (分步骤小脚本)"></a>构建 Debain live 脚本 (分步骤小脚本)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;dinooz&#x2F;devuanos</span><br></pre></td></tr></table></figure>



<h3 id="构建-NIIX-LINUX-中文项目，项目完整度高"><a href="#构建-NIIX-LINUX-中文项目，项目完整度高" class="headerlink" title="构建 NIIX-LINUX (中文项目，项目完整度高)"></a>构建 NIIX-LINUX (中文项目，项目完整度高)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;etony&#x2F;niix-linux</span><br></pre></td></tr></table></figure>



<h3 id="构建-Debian-live-（非常完整的项目，没成功构建过）"><a href="#构建-Debian-live-（非常完整的项目，没成功构建过）" class="headerlink" title="构建 Debian live （非常完整的项目，没成功构建过）"></a>构建 Debian live （非常完整的项目，没成功构建过）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;nodiscc&#x2F;debian-live-config</span><br></pre></td></tr></table></figure>



<h3 id="构建-Debian-live-（非常完整的项目）"><a href="#构建-Debian-live-（非常完整的项目）" class="headerlink" title="构建 Debian live （非常完整的项目）"></a>构建 Debian live （非常完整的项目）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;StamusNetworks&#x2F;SELKS</span><br></pre></td></tr></table></figure>



<h3 id="构建-Debain-live-（日文项目，很好的项目）"><a href="#构建-Debain-live-（日文项目，很好的项目）" class="headerlink" title="构建 Debain live （日文项目，很好的项目）"></a>构建 Debain live （日文项目，很好的项目）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;homelith&#x2F;debian-live-custom</span><br></pre></td></tr></table></figure>

<p>网站详情：<a href="https://qiita.com/homelith/items/f30a1fbac89dc977c1ff" target="_blank" rel="external nofollow noopener noreferrer">https://qiita.com/homelith/items/f30a1fbac89dc977c1ff</a></p>
<h3 id="构建-Debian-live-（非常不错的项目）"><a href="#构建-Debian-live-（非常不错的项目）" class="headerlink" title="构建 Debian live （非常不错的项目）"></a>构建 Debian live （非常不错的项目）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;mafredri&#x2F;debian-my-live-build</span><br></pre></td></tr></table></figure>



<h3 id="构建-Minimal-linux-live-（研究linux系统基础）"><a href="#构建-Minimal-linux-live-（研究linux系统基础）" class="headerlink" title="构建 Minimal linux live （研究linux系统基础）"></a>构建 Minimal linux live （研究linux系统基础）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;ivandavidov&#x2F;minimal-linux-script</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>live-build</category>
      </categories>
      <tags>
        <tag>URL</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux系统中安装man中文包实现man命令中文手册查看</title>
    <url>/archives/f5603251.html</url>
    <content><![CDATA[<h3 id="下载源代码："><a href="#下载源代码：" class="headerlink" title="下载源代码："></a>下载源代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wget https:&#x2F;&#x2F;src.fedoraproject.org&#x2F;repo&#x2F;pkgs&#x2F;man-pages-zh-CN&#x2F;v1.5.2.tar.gz&#x2F;1bbdc4f32272df0b95146518b27bf4be&#x2F;v1.5.2.tar.gz</span><br><span class="line"># wget  https:&#x2F;&#x2F;src.fedoraproject.org&#x2F;repo&#x2F;pkgs&#x2F;man-pages-zh-CN&#x2F;manpages-zh-1.5.1.tar.gz&#x2F;13275fd039de8788b15151c896150bc4&#x2F;manpages-zh-1.5.1.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="解压并安装："><a href="#解压并安装：" class="headerlink" title="解压并安装："></a>解压并安装：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar xf manpages-zh-1.5.1.tar.gz</span><br><span class="line"># cd manpages-zh-1.5.1&#x2F;</span><br><span class="line"># .&#x2F;configure --disable-zhtw --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;zhman</span><br><span class="line"># make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h3 id="为了不抵消-man-我们新建别名-cman-命令作为中文查询"><a href="#为了不抵消-man-我们新建别名-cman-命令作为中文查询" class="headerlink" title="为了不抵消 man ,我们新建别名  cman 命令作为中文查询"></a>为了不抵消 <strong>man</strong> ,我们新建别名  <strong>cman</strong> 命令作为中文查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd ~</span><br><span class="line"># echo &quot;alias cman&#x3D;&#39;man -M &#x2F;usr&#x2F;local&#x2F;zhman&#x2F;share&#x2F;man&#x2F;zh_CN&#39; &quot; &gt;&gt;.bash_profile</span><br><span class="line"># source .bash_profile</span><br></pre></td></tr></table></figure>

<h3 id="测试，使用中文-cman-查询命令"><a href="#测试，使用中文-cman-查询命令" class="headerlink" title="测试，使用中文 cman 查询命令"></a>测试，使用中文 <strong>cman</strong> 查询命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cman find</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>man</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian 允许用户通过sudo仅运行特定命令</title>
    <url>/archives/18f1a1f0.html</url>
    <content><![CDATA[<h1 id="Debian-允许用户通过sudo仅运行特定命令"><a href="#Debian-允许用户通过sudo仅运行特定命令" class="headerlink" title="Debian 允许用户通过sudo仅运行特定命令"></a>Debian 允许用户通过sudo仅运行特定命令</h1><p>执行下面命令实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username ALL&#x3D;(ALL) NOPASSWD:&#x2F;bin&#x2F;mkdir,&#x2F;bin&#x2F;rmdir</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian 安装 mate 桌面环境的方法</title>
    <url>/archives/5eedfe66.html</url>
    <content><![CDATA[<h1 id="Debian-安装-mate-桌面环境的方法"><a href="#Debian-安装-mate-桌面环境的方法" class="headerlink" title="Debian 安装 mate 桌面环境的方法"></a>Debian 安装 mate 桌面环境的方法</h1><p>mate是一个轻量级的桌面环境，占用系统资源非常少，正常使用下，大约占300MB左右，界面做得非常漂亮，本人十分喜爱，也是我最喜欢的桌面环境。安装了其他桌面(如：gnome) 后，怎么安装mate?</p>
<h2 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install task-mate-desktop  </span><br><span class="line">apt-get install mate-desktop-environment-extras  #完全安装mate及扩展部分</span><br></pre></td></tr></table></figure>

<p>执行命令后，网速不慢，几分钟就完事，注销选择mate，进入后即是mate了。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>mate</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian 安装并开启 SSH 服务</title>
    <url>/archives/292c2173.html</url>
    <content><![CDATA[<p>下文介绍在 Debian10 安装并开启 SSH 服务。</p>
<p>1、执行下面命令，查看是否安装ssh服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -e | grep ssh</span><br></pre></td></tr></table></figure>

<p>2、执行下面命令，安装ssh服务并启动ssh服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt update  #更新包缓存</span><br><span class="line">sudo apt install -y openssh-server openssh-client</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ssh start  #启动ssh服务</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ssh restart  #重启ssh服务</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux可执行文件添加到PATH环境变量的方法</title>
    <url>/archives/4ba04316.html</url>
    <content><![CDATA[<p>linux命令行下面执行某个命令的时候，首先保证该命令是否存在，若存在，但输入命令的时候若仍提示：command not found</p>
<p>这个时候就的查看PATH环境变量的设置了，当前命令是否存在于PATH环境变量中</p>
<p>#查看PATH：echo $PATH</p>
<p>举例说，命令 composr 在/usr/loca/bin</p>
<p>但执行的时候提示：</p>
<p>-bash: composr: command not found</p>
<p>这个时候，通过echo $PATH，，发现composer并未在PATH环境变量中有设置，这个时候就需要把composer所在路径添加到PATH中</p>
<p>所以需要修改PATH环境变量，具体如下：</p>
<p>方法一：</p>
<p>export PATH=/usr/local/bin:$PATH</p>
<p>#配置完后可以通过echo $PATH查看配置结果。</p>
<p>#生效方法：立即生效</p>
<p>#有效期限：临时改变，只能在当前的终端窗口中有效，当前窗口关闭后就会恢#复原有的path配置</p>
<p>#用户局限：仅对当前用户</p>
<p>方法二：</p>
<p>#通过修改.bashrc文件:</p>
<p>vim ~/.bashrc</p>
<p>#在最后一行添上：</p>
<p>export PATH=/usr/local/bin:$PATH</p>
<p>#生效方法：（有以下两种）</p>
<p>#1、关闭当前终端窗口，重新打开一个新终端窗口就能生效</p>
<p>#2、输入“source ~/.bashrc”命令，立即生效</p>
<p>#有效期限：永久有效</p>
<p>#用户局限：仅对当前用户</p>
<p>方法三：</p>
<p>#通过修改profile文件:</p>
<p>vim /etc/profile</p>
<p>export PATH=/usr/local/bin:$PATH</p>
<p>#生效方法：系统重启</p>
<p>#有效期限：永久有效</p>
<p>#用户局限：对所有用户</p>
<p>方法四：</p>
<p>#通过修改environment文件:</p>
<p>vim /etc/environment</p>
<p>在PATH=”/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin”中加入 “:/usr/local/bin”</p>
<p>#生效方法：系统重启</p>
<p>#有效期限：永久有效</p>
<p>#用户局限：对所有用户</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>PATH</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware Workstation 设置 efi 启动方法</title>
    <url>/archives/26de0019.html</url>
    <content><![CDATA[<p>看到很多人写了修改虚拟机目录下vmx文件的方法，但是这个方法改完了efi启动后我不知道怎么才能改回bios启动。</p>
<p>其实选中虚拟机-编辑虚拟机设置-选项-高级，右边的设置，有个选项叫通过efi而非bios引导。这个勾了就efi，不勾就是bios，还蛮方便的。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>EFI</tag>
      </tags>
  </entry>
  <entry>
    <title>kali-dojo-blackhat-2015</title>
    <url>/archives/63002bb6.html</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Git 克隆实时构建配置</span><br><span class="line">apt-get update</span><br><span class="line">apt-get upgrade </span><br><span class="line">apt install git live-build cdebootstrap curl -y</span><br><span class="line">git clone git:&#x2F;&#x2F;git.kali.org&#x2F;live-build-config.git</span><br><span class="line">cd live-build-config</span><br><span class="line"># 编辑工具列表，添加nmap,</span><br><span class="line">echo nmap &gt;&gt; kali-config&#x2F;variant-light&#x2F;package-lists&#x2F;kali.list.chroot</span><br><span class="line">echo openssh-server &gt;&gt; kali-config&#x2F;variant-light&#x2F;package-lists&#x2F;kali.list.chroot</span><br><span class="line"># 创建一个chroot挂钩，以启用启动ssh服务</span><br><span class="line">echo &quot;systemctl enable ssh&quot; &gt;&gt; kali-config&#x2F;common&#x2F;hooks&#x2F;01-start-ssh.chroot</span><br><span class="line">chmod +x kali-config&#x2F;common&#x2F;hooks&#x2F;01-start-ssh.chroot</span><br><span class="line"># 创建一个二进制挂钩，为无人参与安装添加新的启动菜单选项</span><br><span class="line">wget https:&#x2F;&#x2F;www.kali.org&#x2F;dojo&#x2F;unattended.txt -O kali-config&#x2F;common&#x2F;hooks&#x2F;02-unattended-boot.binary</span><br><span class="line">chmod +x kali-config&#x2F;common&#x2F;hooks&#x2F;02-unattended-boot.binary</span><br><span class="line"></span><br><span class="line">ls -l kali-config&#x2F;common&#x2F;hooks&#x2F;</span><br><span class="line"># 覆盖新墙纸</span><br><span class="line">mkdir -p kali-config&#x2F;common&#x2F;includes.chroot&#x2F;usr&#x2F;share&#x2F;images&#x2F;desktop-base&#x2F;</span><br><span class="line">wget https:&#x2F;&#x2F;www.kali.org&#x2F;dojo&#x2F;wp-blue.png -O kali-config&#x2F;common&#x2F;includes.chroot&#x2F;usr&#x2F;share&#x2F;images&#x2F;desktop-base&#x2F;kali-wallpaper_1920x1080.png</span><br><span class="line"># 将我们的公共SSH密钥添加到授权密钥列表</span><br><span class="line">ssh-keygen </span><br><span class="line">mkdir -p kali-config&#x2F;common&#x2F;includes.chroot&#x2F;root&#x2F;.ssh&#x2F;</span><br><span class="line">cp &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub kali-config&#x2F;common&#x2F;includes.chroot&#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"># 设置无人值守的预置文件</span><br><span class="line">wget https:&#x2F;&#x2F;www.kali.org&#x2F;dojo&#x2F;preseed.cfg -O .&#x2F;kali-config&#x2F;common&#x2F;includes.installer&#x2F;preseed.cfg</span><br><span class="line"># 建立ISO</span><br><span class="line">.&#x2F;build.sh --variant light --distribution sana --verbose</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>live-build</category>
      </categories>
      <tags>
        <tag>live-build,kali</tag>
      </tags>
  </entry>
  <entry>
    <title>kali-dojo-defcon-2017</title>
    <url>/archives/44255abf.html</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali-rolling main contrib non-free</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;kali kali-rolling main contrib non-free</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br><span class="line"></span><br><span class="line">apt install -y git live-build cdebootstrap curl</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;live-build-config.git</span><br><span class="line"></span><br><span class="line">cd live-build-config</span><br><span class="line">echo cryptsetup &gt; kali-config&#x2F;variant-default&#x2F;package-lists&#x2F;kali.list.chroot</span><br><span class="line">echo openssh-server &gt;&gt; kali-config&#x2F;variant-default&#x2F;package-lists&#x2F;kali.list.chroot</span><br><span class="line">echo nmap &gt;&gt; kali-config&#x2F;variant-default&#x2F;package-lists&#x2F;kali.list.chroot</span><br><span class="line"></span><br><span class="line">mkdir -p kali-config&#x2F;common&#x2F;includes.chroot&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; kali-config&#x2F;common&#x2F;includes.chroot&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;angela.service</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Start Custom Script</span><br><span class="line">After&#x3D;multi-user.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;idle</span><br><span class="line">ExecStart&#x3D;&#x2F;bin&#x2F;bash &#x2F;usr&#x2F;bin&#x2F;startssh</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mkdir -p kali-config&#x2F;common&#x2F;includes.chroot&#x2F;usr&#x2F;bin&#x2F;</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; kali-config&#x2F;common&#x2F;includes.chroot&#x2F;usr&#x2F;bin&#x2F;startssh</span><br><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">echo hola &gt; &#x2F;root&#x2F;test.txt</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; kali-config&#x2F;common&#x2F;hooks&#x2F;live&#x2F;angela.chroot</span><br><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">systemctl enable angela.service || true</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod 755 kali-config&#x2F;common&#x2F;hooks&#x2F;live&#x2F;angela.chroot</span><br><span class="line"></span><br><span class="line">mkdir -p kali-config&#x2F;common&#x2F;includes.installer</span><br><span class="line">wget https:&#x2F;&#x2F;www.kali.org&#x2F;dojo&#x2F;preseed.cfg -O .&#x2F;kali-config&#x2F;common&#x2F;includes.installer&#x2F;preseed.cfg</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; kali-config&#x2F;common&#x2F;includes.binary&#x2F;isolinux&#x2F;install.cfg</span><br><span class="line">label install</span><br><span class="line">menu label ^Install Automated</span><br><span class="line">linux &#x2F;install&#x2F;vmlinuz</span><br><span class="line">initrd &#x2F;install&#x2F;initrd.gz</span><br><span class="line">append vga&#x3D;788 -- quiet file&#x3D;&#x2F;cdrom&#x2F;install&#x2F;preseed.cfg locale&#x3D;en_US keymap&#x3D;us hostname&#x3D;kali domain&#x3D;local.lan</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">ssh-keygen -f &#x2F;root&#x2F;.ssh&#x2F;id_rsa -t rsa -N &#39;&#39; # optional if you&#39;ve already done it!</span><br><span class="line"></span><br><span class="line">mkdir -p kali-config&#x2F;common&#x2F;includes.chroot&#x2F;root&#x2F;.ssh&#x2F;</span><br><span class="line"></span><br><span class="line">cat &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub &gt; kali-config&#x2F;common&#x2F;includes.chroot&#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"></span><br><span class="line">echo &#39;systemctl enable ssh&#39; &gt; kali-config&#x2F;common&#x2F;hooks&#x2F;01-start-ssh.chroot</span><br><span class="line"></span><br><span class="line">.&#x2F;build.sh --verbose</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>live-build</category>
      </categories>
      <tags>
        <tag>live-build,kali</tag>
      </tags>
  </entry>
  <entry>
    <title>kali-linux-evil-access-point.sh</title>
    <url>/archives/da66f02.html</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># Kali Linux ISO recipe for : Evil Access Point</span><br><span class="line">#########################################################################################</span><br><span class="line"># Desktop 	: None</span><br><span class="line"># Metapackages	: None</span><br><span class="line"># ISO size 	: 1.36 GB </span><br><span class="line"># Special notes	: Boots into an Access Point.</span><br><span class="line">#		: ppp0 and wlan0 hardcoded.</span><br><span class="line"># Background	: http:&#x2F;&#x2F;www.offensive-security.com&#x2F;kali-linux&#x2F;kali-linux-recipes&#x2F;</span><br><span class="line">#########################################################################################</span><br><span class="line"></span><br><span class="line"># Update and install dependencies</span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install git live-build cdebootstrap -y</span><br><span class="line"></span><br><span class="line"># Clone the default Kali live-build config.</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;build-scripts&#x2F;live-build-config.git</span><br><span class="line"></span><br><span class="line"># Let&#39;s begin our customisations:</span><br><span class="line"></span><br><span class="line">cd live-build-config</span><br><span class="line"></span><br><span class="line"># The user doesn&#39;t need the kali-linux-full metapackage, we overwrite with our own basic packages.</span><br><span class="line">cat &lt;&lt;EOF &gt; config&#x2F;package-lists&#x2F;kali.list.chroot</span><br><span class="line"># kali meta-package depends on everything we want</span><br><span class="line">kali-root-login</span><br><span class="line">kali-defaults</span><br><span class="line">kali-debtags</span><br><span class="line">kali-archive-keyring</span><br><span class="line">debian-installer-launcher</span><br><span class="line">cryptsetup</span><br><span class="line">locales-all</span><br><span class="line">hostapd</span><br><span class="line">dnsmasq</span><br><span class="line">nginx</span><br><span class="line">wireless-tools</span><br><span class="line">iw</span><br><span class="line">aircrack-ng</span><br><span class="line">openssl</span><br><span class="line">sslsplit</span><br><span class="line">responder</span><br><span class="line">openssh-server</span><br><span class="line">openvpn</span><br><span class="line">nginx</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir -p config&#x2F;includes.chroot&#x2F;etc&#x2F;hostapd</span><br><span class="line">mkdir -p config&#x2F;includes.chroot&#x2F;etc&#x2F;init.d</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; config&#x2F;includes.chroot&#x2F;etc&#x2F;hostapd&#x2F;hostapd.conf</span><br><span class="line">interface&#x3D;wlan0</span><br><span class="line">driver&#x3D;nl80211</span><br><span class="line">ssid&#x3D;KaliFreeWifi</span><br><span class="line">channel&#x3D;1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; config&#x2F;includes.chroot&#x2F;etc&#x2F;dnsmasq.conf</span><br><span class="line">log-facility&#x3D;&#x2F;var&#x2F;log&#x2F;dnsmasq.log</span><br><span class="line">#address&#x3D;&#x2F;#&#x2F;10.0.0.1</span><br><span class="line">#address&#x3D;&#x2F;google.com&#x2F;10.0.0.1</span><br><span class="line">interface&#x3D;wlan0</span><br><span class="line">dhcp-range&#x3D;10.0.0.10,10.0.0.250,12h</span><br><span class="line">dhcp-option&#x3D;3,10.0.0.1</span><br><span class="line">dhcp-option&#x3D;6,10.0.0.1</span><br><span class="line">#no-resolv</span><br><span class="line">log-queries</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt; config&#x2F;includes.chroot&#x2F;etc&#x2F;iptables.rules </span><br><span class="line"># Generated by iptables-save v1.4.14 on Mon Jun  9 08:46:32 2014</span><br><span class="line">*nat</span><br><span class="line">:PREROUTING ACCEPT [0:0]</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">:POSTROUTING ACCEPT [0:0]</span><br><span class="line">-A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">COMMIT</span><br><span class="line"># Completed on Mon Jun  9 08:46:32 2014</span><br><span class="line"># Generated by iptables-save v1.4.14 on Mon Jun  9 08:46:32 2014</span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A FORWARD -i wlan0 -o eth0 -j ACCEPT</span><br><span class="line">COMMIT</span><br><span class="line"># Completed on Mon Jun  9 08:46:32 2014</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; config&#x2F;includes.chroot&#x2F;etc&#x2F;rc.local</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">ifconfig wlan0 up</span><br><span class="line">ifconfig wlan0 10.0.0.1&#x2F;24</span><br><span class="line">iptables-restore &lt; &#x2F;etc&#x2F;iptables.rules</span><br><span class="line">echo &#39;1&#39; &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;config&#x2F;hooks&#x2F;enableservices.chroot</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">update-rc.d nginx enable</span><br><span class="line">update-rc.d hostapd enable</span><br><span class="line">update-rc.d dnsmasq enable</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;config&#x2F;hooks&#x2F;configurehostapd.chroot</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">sed -i &#39;s#^DAEMON_CONF&#x3D;.*#DAEMON_CONF&#x3D;&#x2F;etc&#x2F;hostapd&#x2F;hostapd.conf#&#39; &#x2F;etc&#x2F;init.d&#x2F;hostapd</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod 755 config&#x2F;hooks&#x2F;enableservices.chroot</span><br><span class="line">chmod 755 config&#x2F;hooks&#x2F;configurehostapd.chroot</span><br><span class="line">chmod 755 config&#x2F;includes.chroot&#x2F;etc&#x2F;rc.local </span><br><span class="line"></span><br><span class="line"># Go ahead and run the build!</span><br><span class="line">lb build</span><br></pre></td></tr></table></figure>



<p>脚本地址：<a href="https://gitlab.com/kalilinux/recipes/live-build-config-examples/" target="_blank" rel="external nofollow noopener noreferrer">https://gitlab.com/kalilinux/recipes/live-build-config-examples/</a></p>
]]></content>
      <categories>
        <category>live-build</category>
      </categories>
      <tags>
        <tag>live-build,kali</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Debian10 系统上从软件包安装 Docker-CE</title>
    <url>/archives/f9fb805e.html</url>
    <content><![CDATA[<p>这种方法安装Docker-CE，每次升级Docker时，都需要下载一个新的软件包 重复安装过程。</p>
<p>如果不是在新主机上首次安装 Docker-CE，为确保安装不会出错，可以执行卸载旧版本操作。</p>
<h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><p>Docker 的旧版本被称为<code>docker</code>，<code>docker.io</code>或<code>docker-engine</code>。如果已安装，请卸载它们：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li><p>转到 <a href="https://download.docker.com/linux/debian/dists/，选择您Debina10的版本，下载要安装Docker-CE的版本文件。" target="_blank" rel="external nofollow noopener noreferrer">https://download.docker.com/linux/debian/dists/，选择您Debina10的版本，下载要安装Docker-CE的版本文件。</a></p>
</li>
<li><p>安装Docker-CE，将下面的路径更改为下载Docker软件包的存储路径。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i &#x2F;path&#x2F;to&#x2F;package.deb</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证是否正解安装Docker-CE。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<p>此命令下载测试图像并在容器中运行它。容器运行时，它会打印参考消息并退出。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>docker-ce</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Debian10 系统上使用存储库安装 Docker-CE</title>
    <url>/archives/75aa58a.html</url>
    <content><![CDATA[<p>在新主机上首次安装 Docker-CE 之前，需要设置 Docker存储库。之后，您可以从存储库安装和更新 Docker 。如果不是在新主机上首次安装 Docker-CE，为确保安装不会出错，可以执行卸载旧版本操作。</p>
<h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><p>Docker 的旧版本被称为<code>docker</code>，<code>docker.io</code>或<code>docker-engine</code>。如果已安装，请卸载它们：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li><p>更新 apt 包索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装软件包以允许 apt 通过HTTPS使用存储库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">	apt-transport-https \</span><br><span class="line">	ca-certificates \</span><br><span class="line">	curl \</span><br><span class="line">	gnupg2 \</span><br><span class="line">	software-properties-common</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加Docker的官方GPG密钥：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian&#x2F;gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用下行命令来设置稳定的存储库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;deb https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian buster stable&quot; &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<p>buster是Debian10的发行版的名称。lsb_release -cs 命令可以返回Debian发行版的名称。</p>
</li>
<li><p>安装Docker-CE：</p>
<p>更新 apt 包索引并安装最新版本的 Docker-CE。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证是否正解安装Docker-CE:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<p>此命令下载测试图像并在容器中运行它。容器运行时，它会打印参考消息并退出。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>docker-ce</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Debian10 系统上使用脚本安装 Docker-CE</title>
    <url>/archives/c0d5ccf9.html</url>
    <content><![CDATA[<p>Docker 在 get.docker.com和test.docker.com上提供了安装脚本，用于快速安装Docker-CE。</p>
<p>get.docker.com上的脚本是最新版本Docker-CE。</p>
<p>test.docker.com上的脚本是最新测试版本Docker-CE。 </p>
<p>在本地运行它们之前，请务必检查从internet下载的脚本。</p>
<p>如果不是在新主机上首次安装 Docker-CE，为确保安装不会出错，可以执行卸载旧版本操作。</p>
<h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><p>Docker 的旧版本被称为<code>docker</code>，<code>docker.io</code>或<code>docker-engine</code>。如果已安装，请卸载它们：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure>

<p>如果想要以非root用户身份使用Docker，可以用以下方式将用户添加到 docker 组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker your-user</span><br></pre></td></tr></table></figure>

<p>注销重新登录用户才能生效！</p>
<h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><blockquote>
<p>它会自动在<code>DEB</code>基于分发的版本上启动。</p>
<p>在 <code>RPM</code>基于发行版的系统上，您需要使用相应的<code>systemctl</code>或<code>service</code>命令手动启动它 。如消息所示，默认情况下，非root用户不能运行Docker命令。</p>
</blockquote>
<h2 id="升级Docker-CE"><a href="#升级Docker-CE" class="headerlink" title="升级Docker-CE"></a>升级Docker-CE</h2><ol>
<li><p>卸载docker-ce软件包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge docker-ce</span><br></pre></td></tr></table></figure>
</li>
<li><p>主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker</span><br></pre></td></tr></table></figure>

<p>您必须手动删除所有已编辑的配置文件。</p>
</li>
<li><p>然后再重新安装Docker-CE。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>docker-ce</tag>
      </tags>
  </entry>
  <entry>
    <title>在Debian10系统上安装Docker-CE的方法</title>
    <url>/archives/bad80a60.html</url>
    <content><![CDATA[<h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><p>Docker 的旧版本被称为<code>docker</code>，<code>docker.io</code>或<code>docker-engine</code>。如果已安装，请卸载它们：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<p>各类安装方式前最好都要进行的操作。</p>
<h2 id="安装-Docker-CE-的方法"><a href="#安装-Docker-CE-的方法" class="headerlink" title="安装 Docker-CE 的方法"></a>安装 Docker-CE 的方法</h2><h3 id="可以根据需要使用不同的安装方式："><a href="#可以根据需要使用不同的安装方式：" class="headerlink" title="可以根据需要使用不同的安装方式："></a>可以根据需要使用不同的安装方式：</h3><ul>
<li>大多数用户会设置 <code>docker 的存储库</code>并从中进行安装，以简化安装和升级任务。</li>
<li>很少的用户下载并手动安装 <code>deb 软件包</code>，并安全手动管理升级。这类在无法访问互联网的系统上安装 docker 的情况很有用。</li>
<li>在测试和开发环境中，一些用户选择使用<code>自动脚本</code>来安装 docker。</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>docker-ce</tag>
      </tags>
  </entry>
  <entry>
    <title>kali-linux-mate-top10-nonroot.sh</title>
    <url>/archives/fa25fe82.html</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># Kali Linux ISO recipe for : Top 10 Mate non-root</span><br><span class="line">#########################################################################################</span><br><span class="line"># Desktop 	: Mate 1.8</span><br><span class="line"># Metapackages	: kali-linux-top10</span><br><span class="line"># ISO size 	: 1.36 GB </span><br><span class="line"># Special notes	: Non root user installation enabled through preseed.cfg. </span><br><span class="line">#		: This script is not meant to run unattended.</span><br><span class="line"># Look and Feel	: Custom wallpaper and terminal configs through post install hooks.</span><br><span class="line"># Background	: http:&#x2F;&#x2F;www.offensive-security.com&#x2F;kali-linux&#x2F;kali-linux-recipes&#x2F;</span><br><span class="line">#########################################################################################</span><br><span class="line"></span><br><span class="line"># Update and install dependencies</span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install git live-build cdebootstrap devscripts -y</span><br><span class="line"></span><br><span class="line"># Clone the default Kali live-build config.</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;build-scripts&#x2F;live-build-config.git</span><br><span class="line"></span><br><span class="line"># Get the source package of the debian installer. </span><br><span class="line"># The default Kali preseed file lives here, and will need changing for non-root user support.</span><br><span class="line"></span><br><span class="line">apt-get source debian-installer</span><br><span class="line"></span><br><span class="line"># Let&#39;s begin our customisations:</span><br><span class="line"></span><br><span class="line">cd live-build-config</span><br><span class="line"></span><br><span class="line"># The user doesn&#39;t need the kali-linux-full metapackage, we overwrite with our own basic packages.</span><br><span class="line"># This includes the debian-installer and the kali-linux-top10 metapackage (commented out for brevity of build, uncomment if needed).</span><br><span class="line"></span><br><span class="line">cat &gt; config&#x2F;package-lists&#x2F;kali.list.chroot &lt;&lt; EOF</span><br><span class="line">kali-root-login</span><br><span class="line">kali-defaults</span><br><span class="line">kali-menu</span><br><span class="line">kali-debtags</span><br><span class="line">kali-archive-keyring</span><br><span class="line">debian-installer-launcher</span><br><span class="line">alsa-tools</span><br><span class="line">locales-all</span><br><span class="line">xorg</span><br><span class="line">#kali-linux-top10</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># Add the new Mate 1.8 as a Windows Manager.</span><br><span class="line"># We instruct live-build to add external MATE repositories and add relevant keys.</span><br><span class="line"># Taken from http:&#x2F;&#x2F;wiki.mate-desktop.org&#x2F;download</span><br><span class="line"></span><br><span class="line">mkdir -p config&#x2F;archives&#x2F;</span><br><span class="line">echo &quot;deb http:&#x2F;&#x2F;repo.mate-desktop.org&#x2F;archive&#x2F;1.8&#x2F;debian&#x2F; wheezy main&quot; &gt; config&#x2F;archives&#x2F;mate.list.chroot</span><br><span class="line">wget http:&#x2F;&#x2F;mirror1.mate-desktop.org&#x2F;debian&#x2F;mate-archive-keyring.gpg -O config&#x2F;archives&#x2F;mate.key.chroot</span><br><span class="line"></span><br><span class="line"># We download a wallpaper and overlay it.</span><br><span class="line"></span><br><span class="line">mkdir -p config&#x2F;includes.chroot&#x2F;usr&#x2F;share&#x2F;wallpapers&#x2F;kali&#x2F;contents&#x2F;images</span><br><span class="line">wget http:&#x2F;&#x2F;1hdwallpapers.com&#x2F;wallpapers&#x2F;kali_linux.jpg</span><br><span class="line">mv kali_linux.jpg config&#x2F;includes.chroot&#x2F;usr&#x2F;share&#x2F;wallpapers&#x2F;kali&#x2F;contents&#x2F;images</span><br><span class="line"></span><br><span class="line"># We add a chroot hook to add the MATE archive-keyring, and install MATE. </span><br><span class="line"># We even configure some of the terminal settings and wallpaper.</span><br><span class="line"></span><br><span class="line">cat &gt; config&#x2F;hooks&#x2F;mate.chroot&lt;&lt; EOF</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">wget http:&#x2F;&#x2F;mirror1.mate-desktop.org&#x2F;debian&#x2F;mate-archive-keyring.gpg</span><br><span class="line">apt-key add mate-archive-keyring.gpg</span><br><span class="line">rm -rf mate-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line">apt-get --yes --force-yes --quiet --allow-unauthenticated install mate-core mate-desktop-environment-extra</span><br><span class="line"></span><br><span class="line">dbus-launch --exit-with-session gsettings set org.mate.background picture-filename &#39;&#x2F;usr&#x2F;share&#x2F;wallpapers&#x2F;kali&#x2F;contents&#x2F;images&#x2F;kali_linux.jpg&#39;</span><br><span class="line">dbus-launch --exit-with-session gsettings set org.mate.interface gtk-theme &#39;BlackMATE&#39;</span><br><span class="line">dbus-launch --exit-with-session gsettings set org.mate.interface icon-theme &#39;mate&#39;</span><br><span class="line">dbus-launch --exit-with-session gsettings set org.mate.terminal.profile:&#x2F;org&#x2F;mate&#x2F;terminal&#x2F;profiles&#x2F;default&#x2F; background-darkness 0.86</span><br><span class="line">dbus-launch --exit-with-session gsettings set org.mate.terminal.profile:&#x2F;org&#x2F;mate&#x2F;terminal&#x2F;profiles&#x2F;default&#x2F; background-type &#39;transparent&#39;</span><br><span class="line">dbus-launch --exit-with-session gsettings set org.mate.terminal.profile:&#x2F;org&#x2F;mate&#x2F;terminal&#x2F;profiles&#x2F;default&#x2F; background-color &#39;#FFFFFFFFDDDD&#39;</span><br><span class="line">dbus-launch --exit-with-session gsettings set org.mate.terminal.profile:&#x2F;org&#x2F;mate&#x2F;terminal&#x2F;profiles&#x2F;default&#x2F; scrollback-unlimited true</span><br><span class="line"></span><br><span class="line">cp -rf &#x2F;root&#x2F;.config &#x2F;etc&#x2F;skel&#x2F;</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># We modify the default Kali preseed which disables normal user creation. </span><br><span class="line"># We copied this from the debian installer package we initially downloaded.</span><br><span class="line"></span><br><span class="line">mkdir -p config&#x2F;debian-installer</span><br><span class="line">cp ..&#x2F;debian-installer-*&#x2F;build&#x2F;preseed.cfg config&#x2F;debian-installer&#x2F;</span><br><span class="line">sed -i &#39;s&#x2F;make-user boolean false&#x2F;make-user boolean true&#x2F;&#39; config&#x2F;debian-installer&#x2F;preseed.cfg</span><br><span class="line">echo &quot;d-i passwd&#x2F;root-login boolean false&quot; &gt;&gt; config&#x2F;debian-installer&#x2F;preseed.cfg</span><br><span class="line"></span><br><span class="line"># Go ahead and run the build!</span><br><span class="line">lb build</span><br></pre></td></tr></table></figure>

<p>脚本地址：<a href="https://gitlab.com/kalilinux/recipes/live-build-config-examples/" target="_blank" rel="external nofollow noopener noreferrer">https://gitlab.com/kalilinux/recipes/live-build-config-examples/</a></p>
]]></content>
      <categories>
        <category>live-build</category>
      </categories>
      <tags>
        <tag>live-build,kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian 使用 curl 获得外部 IP 地址（公网地址）</title>
    <url>/archives/7cfdd891.html</url>
    <content><![CDATA[<h1 id="Debian-使用-curl-获得外部-IP-地址（公网地址）"><a href="#Debian-使用-curl-获得外部-IP-地址（公网地址）" class="headerlink" title="Debian 使用 curl 获得外部 IP 地址（公网地址）"></a>Debian 使用 curl 获得外部 IP 地址（公网地址）</h1><p>执行下面命令获得：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># curl icanhazip.com   #速度快点</span><br><span class="line"># curl ipinfo.io&#x2F;ip   #速度稍慢</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian 创建 sudo 用户</title>
    <url>/archives/a396cc0c.html</url>
    <content><![CDATA[<h1 id="Debian-创建-sudo-用户"><a href="#Debian-创建-sudo-用户" class="headerlink" title="Debian 创建 sudo 用户"></a>Debian 创建 sudo 用户</h1><p>sudo命令提供了临时使用root权限的机制，使普通用户可以执行超级管理员任务。</p>
<p>添加用户。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># adduser newuser</span><br></pre></td></tr></table></figure>

<p>设置用户密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># passwd newuser</span><br></pre></td></tr></table></figure>

<p>把新建用户加入sudo组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># usermod -aG sudo newuser</span><br></pre></td></tr></table></figure>

<p>测试新用户sudo机制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># su newuser</span><br><span class="line"># sudo apt update</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian 执行 sudo 不用输入密码</title>
    <url>/archives/c80a599a.html</url>
    <content><![CDATA[<h1 id="Debian-执行-sudo-不用输入密码"><a href="#Debian-执行-sudo-不用输入密码" class="headerlink" title="Debian 执行 sudo 不用输入密码"></a>Debian 执行 sudo 不用输入密码</h1><p>在 <code>/etc/sudoers</code> 文件尾添加下面一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username ALL&#x3D;(ALL)NOPASSWD:ALL</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian 添加删除用户</title>
    <url>/archives/1044a86e.html</url>
    <content><![CDATA[<h1 id="Debian-添加删除用户"><a href="#Debian-添加删除用户" class="headerlink" title="Debian 添加删除用户"></a>Debian 添加删除用户</h1><h3 id="添加用户："><a href="#添加用户：" class="headerlink" title="添加用户："></a>添加用户：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># adduser newuser</span><br></pre></td></tr></table></figure>

<h3 id="把用户添加到sudo组："><a href="#把用户添加到sudo组：" class="headerlink" title="把用户添加到sudo组："></a>把用户添加到sudo组：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># usermod -aG sudo newuser</span><br></pre></td></tr></table></figure>

<p>或：编辑 <code>/etc/sudoers</code>  文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">newuser ALL&#x3D;(ALL) ALL</span><br></pre></td></tr></table></figure>

<h3 id="删除用户而不删除用户家目录："><a href="#删除用户而不删除用户家目录：" class="headerlink" title="删除用户而不删除用户家目录："></a>删除用户而不删除用户家目录：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># deluser newuser</span><br></pre></td></tr></table></figure>

<h3 id="删除用户并删除用户家目录："><a href="#删除用户并删除用户家目录：" class="headerlink" title="删除用户并删除用户家目录："></a>删除用户并删除用户家目录：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dleuser --remove-home newuser</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>adduser</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian 给用户添加 sudo 权限</title>
    <url>/archives/c779294b.html</url>
    <content><![CDATA[<h1 id="Debian-给用户添加-sudo-权限"><a href="#Debian-给用户添加-sudo-权限" class="headerlink" title="Debian 给用户添加 sudo 权限"></a>Debian 给用户添加 sudo 权限</h1><p>1、给 <code>/etc/sudoers</code> 添加写权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chmod +w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure>

<p>2、编辑 <code>/etc/sudoers</code> 文件，给 <strong>username</strong> 用户添加 sudo 权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username ALL&#x3D;(ALL) ALL</span><br></pre></td></tr></table></figure>

<p>3、去除 <code>/etc/sudoers</code> 写权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chmod -w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure>

<p>上面操作完成后，<strong>username</strong> 用户就拥有了sudo权限了。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali Linux 安装五笔输入法</title>
    <url>/archives/8d420006.html</url>
    <content><![CDATA[<h1 id="Kali-Linux-安装五笔输入法"><a href="#Kali-Linux-安装五笔输入法" class="headerlink" title="Kali Linux 安装五笔输入法"></a>Kali Linux 安装五笔输入法</h1><p>执行下面命令，安装五笔输入法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt update</span><br><span class="line"># apt install fcitx fcitx-table-wubi</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>wubi,kali linux</tag>
      </tags>
  </entry>
  <entry>
    <title>dpkg 命令的用法</title>
    <url>/archives/a1571737.html</url>
    <content><![CDATA[<h1 id="dpkg-命令的用法"><a href="#dpkg-命令的用法" class="headerlink" title="dpkg 命令的用法"></a>dpkg 命令的用法</h1><p>dpkg 是 Debian Package 的简写，为Debian操作系统专门开发的套件管理系统，用于软件的安装、更新和移除。</p>
<h3 id="安装软件。"><a href="#安装软件。" class="headerlink" title="安装软件。"></a>安装软件。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dpkg -i ~&#x2F;package.deb</span><br></pre></td></tr></table></figure>



<h3 id="列出与该包关联的文件。"><a href="#列出与该包关联的文件。" class="headerlink" title="列出与该包关联的文件。"></a>列出与该包关联的文件。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dpkg -L package</span><br></pre></td></tr></table></figure>



<h3 id="显示软件包的版本。"><a href="#显示软件包的版本。" class="headerlink" title="显示软件包的版本。"></a>显示软件包的版本。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dpkg -l package</span><br></pre></td></tr></table></figure>



<h3 id="移除软件包（保留配置）"><a href="#移除软件包（保留配置）" class="headerlink" title="移除软件包（保留配置）"></a>移除软件包（保留配置）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dpkg -r package</span><br></pre></td></tr></table></figure>



<h3 id="移除软件包-（不保留配置）"><a href="#移除软件包-（不保留配置）" class="headerlink" title="移除软件包 （不保留配置）"></a>移除软件包 （不保留配置）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dpkg -P package</span><br></pre></td></tr></table></figure>



<h3 id="查看软件包的详细信息"><a href="#查看软件包的详细信息" class="headerlink" title="查看软件包的详细信息"></a>查看软件包的详细信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dpkg -s package</span><br></pre></td></tr></table></figure>



<h3 id="列出deb包的内容"><a href="#列出deb包的内容" class="headerlink" title="列出deb包的内容"></a>列出deb包的内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dpkg -c package.deb</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>dpkg</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Debian 终端命令行无法自动补全</title>
    <url>/archives/7d602a45.html</url>
    <content><![CDATA[<p>1、安装命令补全：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get install bash-completion</span><br></pre></td></tr></table></figure>

<p>2、在 <code>/etc/profile</code> 添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ -f &#x2F;etc&#x2F;bash_completion ]; then</span><br><span class="line">. &#x2F;etc&#x2F;bash_completion</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>3、刷新 <code>/etc/profile</code> 配置文件，使其生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>debain</tag>
      </tags>
  </entry>
  <entry>
    <title>防止远程 Linux 主机自动断开 SSH 连接</title>
    <url>/archives/e41226c8.html</url>
    <content><![CDATA[<p>由于ssh的安全机制，如果10分钟没有任何操作，本次SSH会话会自动关闭。</p>
<p>1、编辑SSH配置文件，并添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim ~&#x2F;.ssh&#x2F;config</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host *</span><br><span class="line">ServerAliveInterval 30</span><br></pre></td></tr></table></figure>

<p><code>*</code>号代表所有主机，你也可以指定某个主机ip，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host x.x.x.x</span><br></pre></td></tr></table></figure>

<p><code>ServerAliveInterval 30</code> 表示ssh客户端每隔30秒给远程主机发送一个no-op包，no-op是无任何操作的意思，这样远程主机就不会关闭这个SSH会话。</p>
<p>为了使所有用户生效，你可以在<code>/etc/ssh/ssh_config</code>全局配置文件添加如下一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ServerAliveInterval 30</span><br></pre></td></tr></table></figure>

<p>还可以在连接时使用选项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ssh -o ServerAliveInterval&#x3D;30 user@remote-ssh-server-ip</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>一个脚本轻松生成实时 Linux ISO映像</title>
    <url>/archives/62d08263.html</url>
    <content><![CDATA[<p>一个脚本可以轻松生成功能齐全的实时Linux ISO映像。这是基于<a href="http://github.com/ivandavidov/minimal" target="_blank" rel="external nofollow noopener noreferrer">Minimal Linux Live</a>的第一个发布版本，并在下一版本中进行了一些改进。已删除所有空行和注释，并且已修改脚本以减少总长度。</p>
<p>下面的脚本使用<strong>Linux内核4.19.12</strong>，<strong>BusyBox 1.29.3</strong>和<strong>Syslinux 6.03</strong>。源包将自动下载和编译。如果您使用的是Ubuntu或Linux Mint，则应该能够通过执行以下命令来解决所有构建依赖项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo apt install wget make gawk gcc bc bison flex xorriso libelf-dev libssl-dev</span><br></pre></td></tr></table></figure>

<p>之后，只需运行以下脚本。它不需要 <strong>root</strong> 权限。最后，生成<strong>minimal_linux_live.iso</strong>文件，在执行脚本的同一目录中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kernel.org&#x2F;linux&#x2F;kernel&#x2F;v4.x&#x2F;linux-4.19.12.tar.xz</span><br><span class="line">wget http:&#x2F;&#x2F;busybox.net&#x2F;downloads&#x2F;busybox-1.29.3.tar.bz2</span><br><span class="line">wget http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kernel.org&#x2F;linux&#x2F;utils&#x2F;boot&#x2F;syslinux&#x2F;syslinux-6.03.tar.xz</span><br><span class="line">mkdir isoimage</span><br><span class="line">tar -xvf linux-4.19.12.tar.xz</span><br><span class="line">tar -xvf busybox-1.29.3.tar.bz2</span><br><span class="line">tar -xvf syslinux-6.03.tar.xz</span><br><span class="line">cd busybox-1.29.3</span><br><span class="line">make distclean defconfig</span><br><span class="line">sed -i &quot;s|.*CONFIG_STATIC.*|CONFIG_STATIC&#x3D;y|&quot; .config</span><br><span class="line">make busybox install</span><br><span class="line">cd _install</span><br><span class="line">rm -f linuxrc</span><br><span class="line">mkdir dev proc sys</span><br><span class="line">echo &#39;#!&#x2F;bin&#x2F;sh&#39; &gt; init</span><br><span class="line">echo &#39;dmesg -n 1&#39; &gt;&gt; init</span><br><span class="line">echo &#39;mount -t devtmpfs none &#x2F;dev&#39; &gt;&gt; init</span><br><span class="line">echo &#39;mount -t proc none &#x2F;proc&#39; &gt;&gt; init</span><br><span class="line">echo &#39;mount -t sysfs none &#x2F;sys&#39; &gt;&gt; init</span><br><span class="line">echo &#39;setsid cttyhack &#x2F;bin&#x2F;sh&#39; &gt;&gt; init</span><br><span class="line">chmod +x init</span><br><span class="line">find . | cpio -R root:root -H newc -o | gzip &gt; ..&#x2F;..&#x2F;isoimage&#x2F;rootfs.gz</span><br><span class="line">cd ..&#x2F;..&#x2F;linux-4.19.12</span><br><span class="line">make mrproper defconfig bzImage</span><br><span class="line">cp arch&#x2F;x86&#x2F;boot&#x2F;bzImage ..&#x2F;isoimage&#x2F;kernel.gz</span><br><span class="line">cd ..&#x2F;isoimage</span><br><span class="line">cp ..&#x2F;syslinux-6.03&#x2F;bios&#x2F;core&#x2F;isolinux.bin .</span><br><span class="line">cp ..&#x2F;syslinux-6.03&#x2F;bios&#x2F;com32&#x2F;elflink&#x2F;ldlinux&#x2F;ldlinux.c32 .</span><br><span class="line">echo &#39;default kernel.gz initrd&#x3D;rootfs.gz&#39; &gt; .&#x2F;isolinux.cfg</span><br><span class="line">xorriso \</span><br><span class="line">  -as mkisofs \</span><br><span class="line">  -o ..&#x2F;minimal_linux_live.iso \</span><br><span class="line">  -b isolinux.bin \</span><br><span class="line">  -c boot.cat \</span><br><span class="line">  -no-emul-boot \</span><br><span class="line">  -boot-load-size 4 \</span><br><span class="line">  -boot-info-table \</span><br><span class="line">  .&#x2F;</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>

<p>请注意，此脚本生成非常小的实时Linux操作系统，仅支持shell，不支持网络。网络功能已在<a href="http://github.com/ivandavidov/minimal" target="_blank" rel="external nofollow noopener noreferrer">Minimal Linux Live</a>项目中正确实现，该项目具有广泛的文档记录和更丰富的功能，但仍然可以生成非常小的实时Linux ISO映像。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>允许使用 root 远程 ssh 登陆 Debian</title>
    <url>/archives/27fcce8d.html</url>
    <content><![CDATA[<p>本文介绍如果在正确安装 ssh 服务的前提下，配置允许使用 root 远程登陆 Debian 。</p>
<p>1、编辑<code>/etc/ssh/sshd_config</code> ssh服务配置文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes  #允许root远程登陆</span><br><span class="line">PasswordAuthentication yes  #开启秘钥和密码认证</span><br></pre></td></tr></table></figure>

<p>2、保存配置后，重启ssh服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;inin.d&#x2F;ssh restart  #重启ssh服务</span><br></pre></td></tr></table></figure>

<p>3、以 root 用户登陆ssh服务示例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ssh root@x.x.x.x</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian 系统老版本 iso 下载</title>
    <url>/archives/b2adb537.html</url>
    <content><![CDATA[<h1 id="Debian-系统老版本-iso-下载"><a href="#Debian-系统老版本-iso-下载" class="headerlink" title="Debian 系统老版本 iso 下载"></a>Debian 系统老版本 iso 下载</h1><p>debian官方默认只提供最新的版本下载，有时需要找一些旧的版本的debian，着实费用。下面这个debian iso镜像站可以下载各个版本的debian下载：<a href="http://cdimage.debian.org/cdimage/archive/" target="_blank" rel="external nofollow noopener noreferrer">debian 系统各个版本ISO下载</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>iso</tag>
      </tags>
  </entry>
  <entry>
    <title>Sytemctl 命令管理 systemd 服务</title>
    <url>/archives/47790c48.html</url>
    <content><![CDATA[<h1 id="Sytemctl-命令管理-systemd-服务"><a href="#Sytemctl-命令管理-systemd-服务" class="headerlink" title="Sytemctl 命令管理 systemd 服务"></a>Sytemctl 命令管理 systemd 服务</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start service  #启动服务</span><br><span class="line">systemctl stop service  #停止服务</span><br><span class="line">systemctl restart service  #重启服务</span><br><span class="line">systemctl reload service  #重新加载配置文件</span><br><span class="line">systemctl enable service  #开机启动</span><br><span class="line">systemctl disable service  #关闭开机启动</span><br><span class="line">systemctl status service  #服务状态</span><br><span class="line">systemctl list-units  #列出系统中所有可用的服务</span><br><span class="line">systemctl is-active application.service  #服务是否运行</span><br><span class="line">systemctl is-enabled application.service  #服务是否开机启动</span><br><span class="line">systemctl is-failed application.service  #服务运行是否正常</span><br><span class="line">man systemctl  #帮助命令</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>systemctl</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 16.04 安装 PyCharm 和 卸载</title>
    <url>/archives/c342aa2b.html</url>
    <content><![CDATA[<h3 id="Ubuntu-16-04-安装-PyCharm-和-卸载"><a href="#Ubuntu-16-04-安装-PyCharm-和-卸载" class="headerlink" title="Ubuntu 16.04 安装 PyCharm 和 卸载"></a>Ubuntu 16.04 安装 PyCharm 和 卸载</h3><p>1、添加 PyCharm 软件源。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo add-apt-repository ppa:mystic-mirage&#x2F;pycharm</span><br></pre></td></tr></table></figure>

<p>2、安装 PyCharm 专业版。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo apt-get update</span><br><span class="line"># sudo apt-get install pycharm</span><br></pre></td></tr></table></figure>

<p>3、安装 PyCharm 社区版。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo apt-get update</span><br><span class="line"># sudo apt-get pycharm-community</span><br></pre></td></tr></table></figure>

<p>4、卸载 PyCharm 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt remove pycharm</span><br><span class="line"># apt remove pycharm-community</span><br><span class="line"># apt autoremove</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>pycharm,ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali Linux 更新系统</title>
    <url>/archives/4eae18c.html</url>
    <content><![CDATA[<h1 id="Kali-Linux-更新系统"><a href="#Kali-Linux-更新系统" class="headerlink" title="Kali Linux 更新系统"></a>Kali Linux 更新系统</h1><p>添加中科大kali软件源。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># echo &quot;deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali-rolling main non-free contrib&quot; &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<p>更新软件包列表缓存并更新系统。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt update</span><br><span class="line"># apt upgrade -y</span><br></pre></td></tr></table></figure>

<p>重启计算机。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># reboot</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>upgrade,kali linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何获取Next主题</title>
    <url>/archives/37314.html</url>
    <content><![CDATA[<h2 id="下载最新release版本"><a href="#下载最新release版本" class="headerlink" title="下载最新release版本"></a>下载最新release版本</h2><p>这种方式将<strong>仅提供最新的 release 版本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir themes&#x2F;next</span><br><span class="line">$ curl -s https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;theme-next&#x2F;hexo-theme-next&#x2F;releases&#x2F;latest | grep tarball_url | cut -d &#39;&quot;&#39; -f 4 | wget -i - -O- | tar -zx -C themes&#x2F;next --strip-components&#x3D;1</span><br></pre></td></tr></table></figure>

<h2 id="下载指定的release版本"><a href="#下载指定的release版本" class="headerlink" title="下载指定的release版本"></a>下载指定的release版本</h2><p>在少数情况下将有所帮助，但这并非推荐方式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone --branch v6.0.0 https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<h2 id="下载最新master分支"><a href="#下载最新master分支" class="headerlink" title="下载最新master分支"></a>下载最新master分支</h2><p>可能<strong>不稳定</strong>，但包含最新的特性。推荐进阶用户和开发者按此方式进行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>git 学习笔记</title>
    <url>/archives/61023.html</url>
    <content><![CDATA[<h2 id="一、设置账户名和账户邮箱"><a href="#一、设置账户名和账户邮箱" class="headerlink" title="一、设置账户名和账户邮箱"></a>一、设置账户名和账户邮箱</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;name&quot;</span><br><span class="line">git config --global user.email &quot;name@gmail.com</span><br><span class="line">git config --global http.proxy http:&#x2F;&#x2F;example.com:port</span><br></pre></td></tr></table></figure>

<h2 id="二、验证账户名和账户邮箱"><a href="#二、验证账户名和账户邮箱" class="headerlink" title="二、验证账户名和账户邮箱"></a>二、验证账户名和账户邮箱</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure>

<h2 id="三、初始化仓库"><a href="#三、初始化仓库" class="headerlink" title="三、初始化仓库"></a>三、初始化仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init 会生成 .git 文件夹，关于这个仓库的配置</span><br></pre></td></tr></table></figure>

<h3 id="四、添加文件及文件夹"><a href="#四、添加文件及文件夹" class="headerlink" title="四、添加文件及文件夹"></a>四、添加文件及文件夹</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add name</span><br><span class="line">添加所有文件</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>

<h3 id="五、添加描述-必须添加"><a href="#五、添加描述-必须添加" class="headerlink" title="五、添加描述(必须添加)"></a>五、添加描述(必须添加)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;hello world&quot;</span><br></pre></td></tr></table></figure>

<h3 id="六、查看状态"><a href="#六、查看状态" class="headerlink" title="六、查看状态"></a>六、查看状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h3 id="七、查看修改的文件"><a href="#七、查看修改的文件" class="headerlink" title="七、查看修改的文件"></a>七、查看修改的文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff -- filename</span><br></pre></td></tr></table></figure>

<h3 id="八、撤销修改"><a href="#八、撤销修改" class="headerlink" title="八、撤销修改"></a>八、撤销修改</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout filename</span><br></pre></td></tr></table></figure>

<h3 id="九、撤销修改-针对GIT-ADD提交之后的"><a href="#九、撤销修改-针对GIT-ADD提交之后的" class="headerlink" title="九、撤销修改(针对GIT ADD提交之后的)"></a>九、撤销修改(针对GIT ADD提交之后的)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD filename</span><br><span class="line">git checkout filename</span><br></pre></td></tr></table></figure>

<h3 id="十、查看提交记录"><a href="#十、查看提交记录" class="headerlink" title="十、查看提交记录"></a>十、查看提交记录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line">git log logid -1 -p</span><br><span class="line">-1  表示只看到上面的一条记录</span><br><span class="line">-p 表示查看这条记录的所有信息</span><br></pre></td></tr></table></figure>

<h3 id="十一、上传文件"><a href="#十一、上传文件" class="headerlink" title="十一、上传文件"></a>十一、上传文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin github仓库地址</span><br><span class="line">如遇&quot;fatal: remote origin already exists.&quot;此问题</span><br><span class="line">输入 git remote rm origin</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h3 id="十二、分支"><a href="#十二、分支" class="headerlink" title="十二、分支"></a>十二、分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看分支</span><br><span class="line">git branch</span><br><span class="line">#当前分支前面会有一个*</span><br><span class="line">#创建分支</span><br><span class="line">git branch version1.0</span><br><span class="line">#切换分支</span><br><span class="line">git checkout version1.0</span><br><span class="line">#将version1.0同步到当前分支</span><br><span class="line">git merge version1.0</span><br><span class="line">#删除分支</span><br><span class="line">git branch -D version1.0</span><br><span class="line">#克隆远程项目</span><br><span class="line">git clone git@github.com:name&#x2F;项目名.git</span><br><span class="line">#将当前修改上传到服务器</span><br><span class="line">git push origin master</span><br><span class="line">#将远程修改同步到本地</span><br><span class="line">git fetch origin master</span><br><span class="line">#注：此方法不会将修改同步到当前分支，而是会同步到origin&#x2F;master分支上，需要使用git merge origin&#x2F;master同步到当前分支</span><br><span class="line">git pull origin master</span><br><span class="line">#此方法是fetch和merge两者的合并</span><br></pre></td></tr></table></figure>

<h3 id="十三、其他"><a href="#十三、其他" class="headerlink" title="十三、其他"></a>十三、其他</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建密钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;name@gmail.com&quot;</span><br><span class="line">#将公钥添加到github</span><br><span class="line">cat .ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>实时构建自定义的 Kali ISO</title>
    <url>/archives/4775.html</url>
    <content><![CDATA[<h2 id="建立自己的Kali-ISO简介"><a href="#建立自己的Kali-ISO简介" class="headerlink" title="建立自己的Kali ISO简介"></a>建立自己的Kali ISO简介</h2><p>构建自定义的Kali ISO既简单，有趣又有意义。您几乎可以使用Debian动态<a href="https://live-team.pages.debian.net/live-manual/html/live-manual/index.en.html" target="_blank" rel="external nofollow noopener noreferrer">构建</a>脚本来配置Kali ISO构建的任何方面。这些脚本使开发人员可以通过提供一个框架来轻松构建实时系统映像，该框架使用配置集来自动化和自定义构建映像的所有方面。Kali Linux开发团队已经采用了这些脚本，它们被用来制作Kali ISO正式发行版。</p>
<h2 id="您应该在哪里建立ISO？"><a href="#您应该在哪里建立ISO？" class="headerlink" title="您应该在哪里建立ISO？"></a>您应该在哪里建立ISO？</h2><p>理想情况下，您应该<strong>在现有的Kali环境中</strong>构建自定义的Kali ISO 。</p>
<h2 id="准备就绪-设置实时构建系统"><a href="#准备就绪-设置实时构建系统" class="headerlink" title="准备就绪-设置实时构建系统"></a>准备就绪-设置实时构建系统</h2><p>我们首先需要使用以下命令通过安装和设置实时构建及其要求来准备Kali ISO构建环境：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install -y curl git live-build cdebootstrap</span><br><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;build-scripts&#x2F;live-build-config.git</span><br></pre></td></tr></table></figure>

<p>现在，您只需输入“ live-build-config”目录并运行我们的<strong>build.sh</strong>包装器脚本，即可简单地构建更新的Kali ISO ，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd live-build-config&#x2F;</span><br><span class="line">.&#x2F;build.sh --verbose</span><br></pre></td></tr></table></figure>

<p>“ build.sh”脚本需要一段时间才能完成，因为它会下载创建ISO所需的所有必需软件包。喝咖啡的好时机。</p>
<h2 id="配置Kali-ISO构建（可选）"><a href="#配置Kali-ISO构建（可选）" class="headerlink" title="配置Kali ISO构建（可选）"></a>配置Kali ISO构建（可选）</h2><p>如果您想自定义您的Kali Linux ISO，本节将解释一些细节。通过<strong>kali-config</strong>目录，Kali Linux live build支持各种自定义选项，这些选项在Debian <a href="https://live-team.pages.debian.net/live-manual/html/live-manual/customization-overview.en.html" target="_blank" rel="external nofollow noopener noreferrer">live build 4.x</a>页面上有详细记录。但是，对于不耐烦的人，这里是一些重点。</p>
<h3 id="使用不同的桌面环境构建Kali"><a href="#使用不同的桌面环境构建Kali" class="headerlink" title="使用不同的桌面环境构建Kali"></a>使用不同的桌面环境构建Kali</h3><p>从Kali 2.0开始，我们现在支持各种桌面环境的内置配置，包括KDE，Gnome，E17，I3WM，LXDE，MATE和XFCE。要构建其中的任何一个，您将使用类似于以下内容的语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># These are the different Desktop Environment build options:</span><br><span class="line">#.&#x2F;build.sh --variant &#123;gnome,kde,xfce,mate,e17,lxde,i3wm&#125; --verbose</span><br><span class="line"></span><br><span class="line"># To build a KDE ISO:</span><br><span class="line">.&#x2F;build.sh --variant kde --verbose</span><br><span class="line"># To build a MATE ISO:</span><br><span class="line">.&#x2F;build.sh --variant mate --verbose</span><br><span class="line"></span><br><span class="line">#...and so on.</span><br></pre></td></tr></table></figure>

<h3 id="控制构建中包含的软件包"><a href="#控制构建中包含的软件包" class="headerlink" title="控制构建中包含的软件包"></a>控制构建中包含的软件包</h3><p>您的构建中包含的软件包列表将出现在相应的kali- $ variant目录中。例如，如果要构建默认的Gnome ISO，则应使用以下软件包列表文件<strong>-kali-config / variant-gnome / package-lists / kali.list.chroot</strong>。默认情况下，此列表包括“ kali-linux-full”元软件包以及其他一些软件包。可以将它们注释掉，并用手册的手动列表替换，以将其包括在ISO中以获得更大的粒度。</p>
<h3 id="构建钩子，二进制文件和chroot"><a href="#构建钩子，二进制文件和chroot" class="headerlink" title="构建钩子，二进制文件和chroot"></a>构建钩子，二进制文件和chroot</h3><p>实时构建挂钩允许我们在Kali ISO实时构建的各个阶段中钩挂脚本。有关钩子及其使用方法的更多详细信息，请参阅<a href="https://live-team.pages.debian.net/live-manual/html/live-manual/customizing-contents.en.html#507" target="_blank" rel="external nofollow noopener noreferrer">实时构建手册</a>。例如，我们建议您在<strong>kali-config / common / hooks /中</strong>检出现有的挂钩。</p>
<h3 id="覆盖构建中的文件"><a href="#覆盖构建中的文件" class="headerlink" title="覆盖构建中的文件"></a>覆盖构建中的文件</h3><p>您可以通过将其他文件或脚本分别覆盖在现有文件系统上的<strong>include。{chroot，binary，installer}</strong>目录中，来选择将其他文件或脚本包含在构建中。例如，如果我们想将自己的自定义脚本包括在ISO 的<strong>/ root /</strong>目录中（这将对应于“ chroot”阶段），则可以将该脚本文件放入<strong>kali-config / common / includes中。 chroot /</strong>目录，然后再建立ISO。</p>
<h2 id="为较早的i386架构构建Kali-Linux-ISO"><a href="#为较早的i386架构构建Kali-Linux-ISO" class="headerlink" title="为较早的i386架构构建Kali Linux ISO"></a>为较早的i386架构构建Kali Linux ISO</h2><p>Kali Linux i386 ISO已启用PAE。如果您需要禁用PAE的旧硬件的默认内核，则需要重建Kali Linux ISO。重建过程与上述过程基本相同，除了需要按如下所示在<strong>auto / config</strong>中将<strong>686-pae</strong>参数更改为<strong>586</strong>。首先，安装先决条件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install -y git live-build cdebootstrap debootstrap</span><br><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;build-scripts&#x2F;live-build-config.git</span><br></pre></td></tr></table></figure>

<p>接下来，对auto / config进行更改以适合相应的体系结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd live-build-config&#x2F;</span><br><span class="line">sed -i &#39;s&#x2F;686-pae&#x2F;686&#x2F;g&#39; auto&#x2F;config</span><br></pre></td></tr></table></figure>

<p>最后，运行您的构建。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;build.sh --arch i386 --verbose</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>live-build</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kali</tag>
        <tag>live-build</tag>
      </tags>
  </entry>
  <entry>
    <title>kali live build</title>
    <url>/archives/33767.html</url>
    <content><![CDATA[<p>该存储库将允许您构建自定义的Kali ISO。主要好处是可以将其用作<a href="https://docs.kali.org/downloading/kali-linux-live-usb-install" target="_blank" rel="external nofollow noopener noreferrer">可启动USB驱动器</a>。</p>
<h2 id="设定"><a href="#设定" class="headerlink" title="设定"></a>设定</h2><p>理想情况下，您应该<strong>在现有的Kali环境中</strong>构建自定义的Kali ISO <strong>。</strong>建议使用<a href="https://www.kali.org/downloads/" target="_blank" rel="external nofollow noopener noreferrer">轻量级</a>或虚拟化（<a href="https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-hyperv-image-download/" target="_blank" rel="external nofollow noopener noreferrer">VMware / VirtualBox</a>）映像。</p>
<p>作为<code>root</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install curl git live-build cdebootstrap</span><br></pre></td></tr></table></figure>

<h2 id="客制化"><a href="#客制化" class="headerlink" title="客制化"></a>客制化</h2><p>我在<a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom" target="_blank" rel="external nofollow noopener noreferrer">kali-config / variant-custom</a>目录下使用了一个自定义变量。这包括：</p>
<ul>
<li><a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/package-lists/kali.list.chroot" target="_blank" rel="external nofollow noopener noreferrer">来自默认变体</a>（<code>kali-config/variant-custom/package-lists/kali.list.chroot</code>）的<a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/package-lists/kali.list.chroot" target="_blank" rel="external nofollow noopener noreferrer">所有软件包</a></li>
<li><a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/package-lists/custom.list.chroot" target="_blank" rel="external nofollow noopener noreferrer">根据我的喜好附加包</a>（<code>kali-config/variant-custom/package-lists/custom.list.chroot</code>）</li>
<li><a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/hooks/live/customise.chroot" target="_blank" rel="external nofollow noopener noreferrer">自定义脚本</a>（<code>kali-config/variant-custom/hooks/live/customise.chroot</code>）<ul>
<li>克隆<a href="https://github.com/prateepb/dotfiles" target="_blank" rel="external nofollow noopener noreferrer">我的个人点文件</a></li>
<li><a href="https://unix.stackexchange.com/questions/387843/how-can-i-resize-the-applications-menu-item-in-gnome" target="_blank" rel="external nofollow noopener noreferrer">调整gnome菜单的大小</a></li>
</ul>
</li>
</ul>
<p>我还在以下位置自定义了时区，键盘布局和语言环境：</p>
<ul>
<li><a href="https://github.com/prateepb/kali-live-build/blob/master/auto/config" target="_blank" rel="external nofollow noopener noreferrer"><code>auto/config</code></a></li>
<li><a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/hooks/live/persistence-menu.binary" target="_blank" rel="external nofollow noopener noreferrer"><code>kali-config/variant-custom/hooks/live/persistence-menu.binary</code></a></li>
</ul>
<h2 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h2><p>要构建和使用自定义变体：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd kali-live-build</span><br><span class="line">.&#x2F;build.sh --verbose --variant自定义</span><br></pre></td></tr></table></figure>

<p>完成后，可以在以下位置找到生成的ISO映像： <code>images/kali-linux-custom-rolling-amd64.iso</code></p>
<h2 id="快取"><a href="#快取" class="headerlink" title="快取"></a>快取</h2><p>如果您可能要运行多个构建，那么通过缓存代理（例如<a href="http://www.squid-cache.org/" target="_blank" rel="external nofollow noopener noreferrer">Squid）</a>路由所有内容很有用。这将显着加快后续运行。</p>
<p>例子<a href="https://github.com/prateepb/kali-live-build/blob/master/squid.conf" target="_blank" rel="external nofollow noopener noreferrer">squid.conf</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd kali-live-build</span><br><span class="line">apt-get install squid</span><br><span class="line">cp squid.conf &#x2F;etc&#x2F;squid&#x2F;squid.conf</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;squid开始</span><br></pre></td></tr></table></figure>

<p>现在，您可以<code>build.sh</code>使用<code>--apt-http-proxy</code>参数运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">出口http_proxy &#x3D; http：&#x2F;&#x2F; localhost：3128 &#x2F;</span><br><span class="line">.&#x2F;build.sh --verbose --variant自定义-\</span><br><span class="line">--apt-http-proxy &#x3D; $ &#123;http_proxy&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><code>https://github.com/prateepb/kali-live-build</code></p>
]]></content>
      <categories>
        <category>live-build</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kali</tag>
        <tag>live-build</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 使用 next7.6 主题搭建博客详细记录</title>
    <url>/archives/19199.html</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架，Next 主题是 Hexo 一个漂亮的主题，但是个性化 Next 主题时发现网上大部分教程都是 Next7 版本以下的设置教程，本文特记录 Next7 主题设置内容方法。</p>
<h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><h3 id="设置站点语言"><a href="#设置站点语言" class="headerlink" title="设置站点语言"></a>设置站点语言</h3><p>编辑<strong>站点配置文件</strong><code>_config.yml</code>，将的值设置 <code>language</code> 为所需的语言。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language: en</span><br></pre></td></tr></table></figure>

<p>Next 更新至 Next7 版本以后，支持语言代码发生改变，<a href="https://theme-next.org/docs/getting-started/" target="_blank" rel="external nofollow noopener noreferrer">具体请参阅</a>。</p>
<table>
<thead>
<tr>
<th align="left">语言</th>
<th align="left">中文</th>
<th align="left">代码</th>
</tr>
</thead>
<tbody><tr>
<td align="left">🇨🇳 Chinese (Simplified)</td>
<td align="left">简体中文</td>
<td align="left">zh-CN</td>
</tr>
<tr>
<td align="left">🇹🇼 Chinese (Traditional)</td>
<td align="left">繁體中文</td>
<td align="left">zh-TW</td>
</tr>
<tr>
<td align="left">🇭🇰 Chinese (Hong Kong)</td>
<td align="left">繁體中文-香港</td>
<td align="left">zh-HK</td>
</tr>
<tr>
<td align="left">🇺🇸 English</td>
<td align="left">英语</td>
<td align="left">en</td>
</tr>
</tbody></table>
<h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><p>1、默认情况下，NexT提供 home 和提供 archives。启用 about、tags 、categories 菜单时，要在<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中取消前面的注释。同时您还可以自定义自已的页面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:  </span><br><span class="line">home: &#x2F; || home                        #首页  </span><br><span class="line">#about: &#x2F;about&#x2F; || user                #关于我们  </span><br><span class="line">#tags: &#x2F;tags&#x2F; || tags                  #标签  </span><br><span class="line">#categories: &#x2F;categories&#x2F; || th        #分类  </span><br><span class="line">archives: &#x2F;archives&#x2F; || archive        #归档  </span><br><span class="line">#schedule: &#x2F;schedule&#x2F; || calendar      #日历  </span><br><span class="line">#sitemap: &#x2F;sitemap.xml || sitemap      #网站地图  </span><br><span class="line">#commonweal: &#x2F;404&#x2F; || heartbeat        #公益404页面</span><br></pre></td></tr></table></figure>

<p>2、同时 Next7 支持层次结构内的动态子菜单，请在<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中添加您的子菜单设置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || home</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive</span><br><span class="line">  Docs:</span><br><span class="line">    default: &#x2F;docs&#x2F; || book</span><br><span class="line">    Third Party Services:</span><br><span class="line">      default: &#x2F;third-party-services&#x2F; || plug</span><br><span class="line">      Algolia Search: &#x2F;algolia-search&#x2F; || adn</span><br></pre></td></tr></table></figure>

<h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>NexT 在侧边栏中显示头像。在<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中编辑<code>avatar</code>值来配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  url: &#x2F;images&#x2F;avatar.gif         #请将头像文件上传至&#x2F;them&#x2F;source&#x2F;images文件中</span><br><span class="line">  rounded: true                   #设置头像为圆形</span><br><span class="line">  rotated: true                   #设置头像在鼠标悬停时旋转</span><br></pre></td></tr></table></figure>

<h3 id="设置作者署名"><a href="#设置作者署名" class="headerlink" title="设置作者署名"></a>设置作者署名</h3><p>在<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中编辑<code>author</code>值来配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">author: ling218</span><br></pre></td></tr></table></figure>

<h3 id="设置边栏RSS支持"><a href="#设置边栏RSS支持" class="headerlink" title="设置边栏RSS支持"></a>设置边栏RSS支持</h3><p>在<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中编辑<code>creative_commons</code>部分来配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure>

<h3 id="设置Creative-Commons-4-0国际许可"><a href="#设置Creative-Commons-4-0国际许可" class="headerlink" title="设置Creative Commons 4.0国际许可"></a>设置Creative Commons 4.0国际许可</h3><p>在<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中编辑<code>creative_commons</code>部分来配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa </span><br><span class="line">  sidebar: true </span><br><span class="line">  post: true </span><br><span class="line">  language: deed.zh</span><br></pre></td></tr></table></figure>

<h3 id="设置页面阅读进度条"><a href="#设置页面阅读进度条" class="headerlink" title="设置页面阅读进度条"></a>设置页面阅读进度条</h3><p>在<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中将<code>reading_progress.enable</code>的值设置<code>true</code>启用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Reading progress bar</span><br><span class="line">reading_progress:</span><br><span class="line">  enable: true</span><br><span class="line">  # Available values: top | bottom 显示位置</span><br><span class="line">  position: top</span><br><span class="line">  color: &quot;#37c6c0&quot;</span><br><span class="line">  height: 2px</span><br></pre></td></tr></table></figure>

<h3 id="设置网站开始时间"><a href="#设置网站开始时间" class="headerlink" title="设置网站开始时间"></a>设置网站开始时间</h3><p>在<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中的<code>since</code>部分编辑。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">footer:  since: 2019</span><br></pre></td></tr></table></figure>

<h3 id="设置取消网站平台信息"><a href="#设置取消网站平台信息" class="headerlink" title="设置取消网站平台信息"></a>设置取消网站平台信息</h3><p>默认情况下，Powered by Hexo v4.1.0 | Theme — NexT.Muse v7.6.0 会显示在网站下面。通过修改<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中<code>powered</code>和<code>theme</code>部分中的值进行配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powered:</span><br><span class="line">  # Hexo link (Powered by Hexo).</span><br><span class="line">  enable: false</span><br><span class="line">  # Version info of Hexo after Hexo link (vX.X.X).</span><br><span class="line">  version: true</span><br><span class="line"></span><br><span class="line">theme:</span><br><span class="line">  # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">  enable: false</span><br><span class="line">  # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">  version: true</span><br></pre></td></tr></table></figure>

<h3 id="设置网站备案信息"><a href="#设置网站备案信息" class="headerlink" title="设置网站备案信息"></a>设置网站备案信息</h3><p>在<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中的<code>beian</code>部分编辑。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beian:</span><br><span class="line">  enable: true</span><br><span class="line">  icp: 京ICP备 1234567890号-1</span><br><span class="line">  gongan_id: 1234567890</span><br><span class="line">  gongan_num: 京公网安备 1234567890号</span><br><span class="line">  gongan_icon_url: &#x2F;uploads&#x2F;beian.png</span><br></pre></td></tr></table></figure>

<h3 id="设置本地搜索"><a href="#设置本地搜索" class="headerlink" title="设置本地搜索"></a>设置本地搜索</h3><p>地搜索不需要任何外部第三方服务，但是需要依赖<code>hexo-generator-searchdb</code>，安装完<code>hexo-generator-searchdb</code>需要设置<strong>站点配置文件</strong><code>_config.yml</code>和<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>1、<strong>站点配置文件</strong><code>_config.yml</code>设置，添加如下设置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:  </span><br><span class="line">  path: search.xml  </span><br><span class="line">  field: post  </span><br><span class="line">  format: html  </span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>2、<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 设置，修改成如下设置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:  </span><br><span class="line">  enable: true  </span><br><span class="line">  trigger: auto  </span><br><span class="line">  top_n_per_article: 1   </span><br><span class="line">  unescape: false  </span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure>

<h3 id="设置发布字数统计"><a href="#设置发布字数统计" class="headerlink" title="设置发布字数统计"></a>设置发布字数统计</h3><p>发布字数统计依赖于<code>hexo-symbols-count-time</code>，在站点根目录中运行以下命令来安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<p>1、编辑<strong>站点配置文件</strong><code>_config.yml</code>，如果<strong>配置文件</strong>中没有<code>symbol_count_time</code>，请添加下面内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: true</span><br></pre></td></tr></table></figure>

<p>2、在<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中的<code>symbols_count_time</code>部分编辑。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-symbols-count-time</span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: true</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: mins.</span><br></pre></td></tr></table></figure>

<h3 id="设置文章发布显示"><a href="#设置文章发布显示" class="headerlink" title="设置文章发布显示"></a>设置文章发布显示</h3><p>NexT 支持帖子创建日期，帖子更新日期和帖子类别显示。通过<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中的<code>post_meat</code>部分编辑。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Post meta display settings</span><br><span class="line">post_meta:</span><br><span class="line">  item_text: true</span><br><span class="line">  created_at: true</span><br><span class="line">  updated_at:</span><br><span class="line">    enable: true</span><br><span class="line">    another_day: true</span><br><span class="line">  categories: true</span><br></pre></td></tr></table></figure>

<h3 id="设置侧边栏样式"><a href="#设置侧边栏样式" class="headerlink" title="设置侧边栏样式"></a>设置侧边栏样式</h3><p>默认情况下，侧边栏仅显示在帖子中（具有目录），并位于左侧。在<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中<code>sidebar</code>部分中，编辑来更改它。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # 侧边栏显示的位置.</span><br><span class="line">  #position: left</span><br><span class="line">  position: right</span><br><span class="line"></span><br><span class="line">  # Manual define the sidebar width. If commented, will be default for:</span><br><span class="line">  # Muse | Mist: 320</span><br><span class="line">  # Pisces | Gemini: 240</span><br><span class="line">  #width: 300</span><br><span class="line"></span><br><span class="line">  # 侧边栏显示的方式:</span><br><span class="line">  #  - post    仅在具有索引的帖子中显示侧边栏.</span><br><span class="line">  #  - always  在所有页面中显示侧边栏.</span><br><span class="line">  #  - hide    将其隐藏在所有页面中（但可以由用户手动打开）.</span><br><span class="line">  #  - remove  完全移除侧边栏.</span><br><span class="line">  display: post</span><br><span class="line">  </span><br><span class="line">  # Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span><br><span class="line">  offset: 12</span><br><span class="line"></span><br><span class="line">  # 移动设备显示侧边栏. (only for Muse | Mist).</span><br><span class="line">  onmobile: true</span><br></pre></td></tr></table></figure>

<h3 id="设置侧边栏显示状态"><a href="#设置侧边栏显示状态" class="headerlink" title="设置侧边栏显示状态"></a>设置侧边栏显示状态</h3><p>通过编辑<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中<code>site_state</code>部分中的值，来配置侧边栏是否显示帖子/类别/标签的类别和计数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Posts &#x2F; Categories &#x2F; Tags in sidebar.</span><br><span class="line">site_state: true</span><br></pre></td></tr></table></figure>

<h3 id="设置侧边栏社交链接"><a href="#设置侧边栏社交链接" class="headerlink" title="设置侧边栏社交链接"></a>设置侧边栏社交链接</h3><p>编辑<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中的<code>social</code>部分，启用GitHub、E-Mail、Weibo、Google和Skype如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Social Links</span><br><span class="line"># Usage: &#96;Key: permalink || icon&#96;</span><br><span class="line"># Key is the link label showing to end users.</span><br><span class="line"># Value before &#96;||&#96; delimiter is the target permalink.</span><br><span class="line"># Value after &#96;||&#96; delimiter is the name of Font Awesome icon. If icon (with or without delimiter) is not specified, globe icon will be loaded.</span><br><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;hnleyan || github</span><br><span class="line">  E-Mail: mailto:hn.zmd.ly@gmail.com || envelope</span><br><span class="line">  Weibo: https:&#x2F;&#x2F;weibo.com&#x2F;u&#x2F;5690148064 || weibo</span><br><span class="line">  Google: https:&#x2F;&#x2F;plus.google.com&#x2F;hn.zmd.ly || google</span><br><span class="line">  #Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;yourname || twitter</span><br><span class="line">  #FB Page: https:&#x2F;&#x2F;www.facebook.com&#x2F;yourname || facebook</span><br><span class="line">  #VK Group: https:&#x2F;&#x2F;vk.com&#x2F;yourname || vk</span><br><span class="line">  #StackOverflow: https:&#x2F;&#x2F;stackoverflow.com&#x2F;yourname || stack-overflow</span><br><span class="line">  #YouTube: https:&#x2F;&#x2F;youtube.com&#x2F;yourname || youtube</span><br><span class="line">  #Instagram: https:&#x2F;&#x2F;instagram.com&#x2F;yourname || instagram</span><br><span class="line">  Skype: skype:1075180052?call|chat || skype</span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  icons_only: false</span><br><span class="line">  transition: false</span><br></pre></td></tr></table></figure>

<h3 id="设置侧边栏回到顶部"><a href="#设置侧边栏回到顶部" class="headerlink" title="设置侧边栏回到顶部"></a>设置侧边栏回到顶部</h3><p>将<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中的<code>back2top</code>设置即可，侧边栏回到顶部设置如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: false</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure>

<h3 id="XXXXX设置主页文章摘要"><a href="#XXXXX设置主页文章摘要" class="headerlink" title="XXXXX设置主页文章摘要"></a>XXXXX设置主页文章摘要</h3><p>默认情况下，主页上文章显示全部。通过设置<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中的<code>excerpt_description</code>和<code>auto_excerpt</code>。如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Automatically excerpt description in homepage as preamble text.</span><br><span class="line">excerpt_description: true</span><br><span class="line"></span><br><span class="line"># Automatically excerpt (Not recommend).</span><br><span class="line"># Use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br><span class="line"></span><br><span class="line"># Read more button</span><br><span class="line"># If true, the read more button would be displayed in excerpt section.</span><br><span class="line">read_more_btn: true</span><br></pre></td></tr></table></figure>

<h3 id="设置页面分类"><a href="#设置页面分类" class="headerlink" title="设置页面分类"></a>设置页面分类</h3><p>Next 主题以前不支持同篇文章多个同级分类，Next7 更改以前设置，支持同级分类。修改<code>blog_dir/source/_posts/</code>中文章的<code>categories</code>即可。<br>1、文章多个同级分类写法，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories: </span><br><span class="line"> - [python] </span><br><span class="line"> - [pycharme] </span><br><span class="line"> - [Anaconda3]</span><br></pre></td></tr></table></figure>

<p>2、文章父子级分类写法，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories: </span><br><span class="line"> - python </span><br><span class="line"> - pycharme </span><br><span class="line"> - Anaconda</span><br></pre></td></tr></table></figure>

<h3 id="设置标签云"><a href="#设置标签云" class="headerlink" title="设置标签云"></a>设置标签云</h3><p>通过设置<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中的<code>tagcloud</code>。设置标签云最大和最小一样大，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tagcloud:</span><br><span class="line">  # All values below are same as default, change them by yourself</span><br><span class="line">  min: 22 # min font size in px</span><br><span class="line">  max: 22 # max font size in px</span><br><span class="line">  start: &#39;#ccc&#39; # start color (hex, rgba, hsla or color keywords)</span><br><span class="line">  end: &#39;#111&#39; # end color (hex, rgba, hsla or color keywords)</span><br><span class="line">  amount: 200 # amount of tags, chage it if you have more than 200 tags</span><br></pre></td></tr></table></figure>

<h3 id="设置主题背景"><a href="#设置主题背景" class="headerlink" title="设置主题背景"></a>设置主题背景</h3><p>1、3D式动态背景设置，修改如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># JavaScript 3D library.</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-three</span><br><span class="line">three:</span><br><span class="line">  enable: true</span><br><span class="line">  three_waves: false</span><br><span class="line">  canvas_lines: true</span><br><span class="line">  canvas_sphere: false</span><br><span class="line">  ......</span><br><span class="line">  </span><br><span class="line"># Internal version: 1.0.0</span><br><span class="line"># Example:</span><br><span class="line"># three: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-three@1&#x2F;three.min.js</span><br><span class="line"># three_waves: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-three@1&#x2F;three-waves.min.js</span><br><span class="line"># canvas_lines: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-three@1&#x2F;canvas_lines.min.js</span><br><span class="line"># canvas_sphere: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-three@1&#x2F;canvas_sphere.min.js</span><br><span class="line">three: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-three@1&#x2F;three.min.js</span><br><span class="line">three_waves: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-three@latest&#x2F;three-waves.min.js</span><br><span class="line">canvas_lines: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-three@latest&#x2F;canvas_lines.min.js</span><br><span class="line">canvas_sphere: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-three@latest&#x2F;canvas_sphere.min.js</span><br></pre></td></tr></table></figure>

<p>2、线条式背景设置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-nest</span><br><span class="line"># For more information: https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;canvas-nest.js</span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: false</span><br><span class="line">  onmobile: true # Display on mobile or not</span><br><span class="line">  color: &quot;0,0,0&quot; # RGB values, use &#96;,&#96; to separate</span><br><span class="line">  opacity: 0.5 # The opacity of line: 0~1</span><br><span class="line">  zIndex: -1 # z-index property of the background</span><br><span class="line">  count: 99 # The number of lines</span><br><span class="line"></span><br><span class="line"># Canvas-ribbon</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-ribbon</span><br><span class="line"># For more information: https:&#x2F;&#x2F;github.com&#x2F;zproo&#x2F;canvas-ribbon</span><br><span class="line">canvas_ribbon:</span><br><span class="line">  enable: false</span><br><span class="line">  size: 300 # The width of the ribbon</span><br><span class="line">  alpha: 0.6 # The transparency of the ribbon</span><br><span class="line">  zIndex: -1 # The display level of the ribbon</span><br><span class="line">  </span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.0.0</span><br><span class="line">  # Example:</span><br><span class="line">  #canvas_nest: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-canvas-nest@1&#x2F;canvas-nest.min.js</span><br><span class="line">  #canvas_nest_nomobile: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-canvas-nest@1&#x2F;canvas-nest-nomobile.min.js</span><br><span class="line">  canvas_nest: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-canvas-nest@latest&#x2F;canvas-nest.min.js</span><br><span class="line">  canvas_nest_nomobile: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-canvas-nest@latest&#x2F;canvas-nest-nomobile.min.js</span><br></pre></td></tr></table></figure>

<h3 id="主题设置注意事项"><a href="#主题设置注意事项" class="headerlink" title="主题设置注意事项"></a>主题设置注意事项</h3><p>主题设置完，生成发布无效的，可以通过删除缓存，在站点根目录中生成发布，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<h3 id="图片灯箱"><a href="#图片灯箱" class="headerlink" title="图片灯箱"></a>图片灯箱</h3><p>添加灯箱功能，实现点击图片后放大聚焦图片，并支持幻灯片播放、全屏播放、缩略图、快速分享到社交媒体等，该功能由 <a href="https://github.com/fancyapps/fancybox" target="_blank" rel="external nofollow noopener noreferrer">fancyBox</a> 提供。</p>
<p>在根目录下执行以下命令安装相关依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-fancybox3 themes&#x2F;next&#x2F;source&#x2F;lib&#x2F;fancybox</span><br></pre></td></tr></table></figure>

<p>通过设置<strong>主题配置文件</strong><code>themes/next/_config.yml</code> 中的 <code>fancybox</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fancybox: true</span><br></pre></td></tr></table></figure>

<h3 id="分类时间线"><a href="#分类时间线" class="headerlink" title="分类时间线"></a>分类时间线</h3><p>归档页面的时间线会让文章显示得很有条理，但是分类里却没有，可以通过修改布局自己实现这个时间线功能。</p>
<p>在主题的分类布局文件中添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	&#123;% for post in page.posts %&#125;</span><br><span class="line">+		&#123;# Show year #&#125;</span><br><span class="line">+			&#123;% set year %&#125;</span><br><span class="line">+			&#123;% set post.year &#x3D; date(post.date, &#39;YYYY&#39;) %&#125;</span><br><span class="line">+			&#123;% if post.year !&#x3D;&#x3D; year %&#125;</span><br><span class="line">+			&#123;% set year &#x3D; post.year %&#125;</span><br><span class="line">+			&lt;div class&#x3D;&quot;collection-title&quot;&gt;</span><br><span class="line">+			&lt;h2 class&#x3D;&quot;archive-year motion-element&quot; id&#x3D;&quot;archive-year-&#123;&#123; year &#125;&#125;&quot;&gt;&#123;&#123; year &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">+			&lt;&#x2F;div&gt;</span><br><span class="line">+			&#123;% endif %&#125;</span><br><span class="line">+		&#123;# endshow #&#125;</span><br><span class="line">		&#123;&#123; post_template.render(post) &#125;&#125;</span><br><span class="line">	&#123;% endfor %&#125;</span><br><span class="line">	</span><br><span class="line">	……</span><br><span class="line">	</span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">+&#123;% block script_extra %&#125;</span><br><span class="line">+  &#123;% if theme.use_motion %&#125;</span><br><span class="line">+		&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; id&#x3D;&quot;motion.page.archive&quot;&gt;</span><br><span class="line">+			$(&#39;.archive-year&#39;).velocity(&#39;transition.slideLeftIn&#39;);</span><br><span class="line">+		&lt;&#x2F;script&gt;</span><br><span class="line">+	&#123;% endif %&#125;</span><br><span class="line">+&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文章推荐"><a href="#文章推荐" class="headerlink" title="文章推荐"></a>文章推荐</h3><p>该功能由 <a href="https://github.com/tea3/hexo-related-popular-posts" target="_blank" rel="external nofollow noopener noreferrer">hexo-related-popular-posts</a> 插件提供，效果如图：</p>
<p>在站点根目录中执行以下命令安装依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure>

<p>在 <strong>主题配置文件</strong> _config.yml 中开启相关文章推荐功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">related_posts:</span><br><span class="line">  enable: true</span><br><span class="line">  title:  # custom header, leave empty to use the default one</span><br><span class="line">  display_in_home: false</span><br><span class="line">  params:</span><br><span class="line">    maxCount: 3</span><br></pre></td></tr></table></figure>

<p>此时会在每篇文章结尾根据标签相关性和内容相关性来推荐相关文章。</p>
<p>事实上并非每篇文章都需要开启该功能，可在文章 Front-Matter 中设置 <code>related_posts</code> 字段来控制是否在文末显示相关文章，然后修改文章布局模板中相关的判定条件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- &#123;% if theme.related_posts.enable and (theme.related_posts.display_in_home or not is_index) %&#125;</span><br><span class="line">+ &#123;% if theme.related_posts.enable and (theme.related_posts.display_in_home or not is_index) and post.related_posts %&#125;</span><br><span class="line">    &#123;% include &#39;post-related.swig&#39; with &#123; post: post &#125; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>为了方便可在草稿模板 scaffolds\draft.md 中统一添加 <code>related_posts</code> 字段默认值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  title: &#123;&#123; title &#125;&#125;</span><br><span class="line">  tags:</span><br><span class="line">  categories:</span><br><span class="line">+ related_posts: true</span><br></pre></td></tr></table></figure>

<h3 id="Valine评论"><a href="#Valine评论" class="headerlink" title="Valine评论"></a>Valine评论</h3><p>首先，在LeanCloud上注册账号并创建应用，设置LeanCloud的信息。</p>
<p>在 <strong>存储</strong> -&gt; <strong>数据</strong> 中 新建一个名为<code>Counter</code> 的 Class，<code>ACL</code>权限设置为 <strong>无限制</strong>：<br>在 <strong>设置</strong> -&gt; <strong>安全中心</strong> 中添加博客域名到 Web 安全域名中，以保护LeanCloud应用的数据安全。</p>
<p>然后，在 <strong>主题配置文件</strong> _config.yml 开启评论功能即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true    # 开启 Valine 评论</span><br><span class="line">  # 设置应用 id 和 key</span><br><span class="line">  appid:  # your leancloud application appid</span><br><span class="line">  appkey:  # your leancloud application appkey</span><br><span class="line">  # 关闭提醒与验证</span><br><span class="line">  notify: false</span><br><span class="line">  verify: false</span><br><span class="line">  placeholder:  # 文本框默认文字</span><br><span class="line">  avatar: mm  # gravatar style</span><br><span class="line">  guest_info: nick,mail # 需要填写的信息字段</span><br><span class="line">  pageSize: 10  # 每页评论数</span><br><span class="line">  language: zh-cn # language, available values: en, zh-cn</span><br><span class="line">  visitor: true # 开启文章阅读次数统计</span><br><span class="line">  comment_count: false # 首页是否开启评论数</span><br></pre></td></tr></table></figure>

<p>最后，集成评论服务后，所有的页面也会带有评论，包括标签、关于等页面。这里需要在添加字段<code>comments</code>并将值设置为 false 即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next7.6</tag>
      </tags>
  </entry>
  <entry>
    <title>将自定义Debian Live安装到USB驱动器 (img格式)</title>
    <url>/archives/19cdbd33.html</url>
    <content><![CDATA[<h1 id="将自定义Debian-Live安装到USB驱动器-img格式"><a href="#将自定义Debian-Live安装到USB驱动器-img格式" class="headerlink" title="将自定义Debian Live安装到USB驱动器 (img格式)"></a>将自定义Debian Live安装到USB驱动器 (img格式)</h1><p>这些说明<strong>不是</strong>用于实时安装，而是用于将Debian安装到USB闪存介质。</p>
<p>这里的一个额外好处是，我们将首先在<code>img</code>作为环回设备安装的文件中准备Debian chroot 。</p>
<p>然后，我们可以将该<code>img</code>文件用作通用基础映像，然后将其部署到大量USB驱动器中。</p>
<p>你为什么想做这个？好吧，一方面，该<code>img</code>文件有助于减少混乱，并为您提供易于管理的文件，该文件可以一次又一次地重新部署。这对于创建将在多台计算机上重用的通用映像也是理想的。就像您在网吧中所做的那样，每次启动时都会重新安装Debian，或者在教室中。</p>
<p><strong>警告</strong>：我已<strong>突出显示</strong>您应该在chroot环境中的所有位置。小心！在本地环境而不是chroot中运行其中一些命令可能会导致问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    debootstrap</span><br></pre></td></tr></table></figure>

<p>创建图像文件并将其格式化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fallocate -l 2G debian.img</span><br><span class="line">echo -e &quot;o\nn\np\n1\n\n\nw&quot; | sudo fdisk debian.img</span><br><span class="line">echo -e &quot;a\nw\n&quot; | sudo fdisk debian.img</span><br></pre></td></tr></table></figure>

<p><strong>请注意以下命令返回的内容。</strong>对我来说，回送设备是<code>/dev/loop0</code>，但它可能因您而异。如果您的回送设备地址不同，请相应地更新以下说明。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo losetup --partscan --show --find debian.img</span><br></pre></td></tr></table></figure>

<p>格式化回送设备的linux分区，就像我们对真实物理设备所做的一样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext4 &#x2F;dev&#x2F;loop0p1</span><br></pre></td></tr></table></figure>

<p>挂载分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt&#x2F;debian</span><br><span class="line">sudo mount &#x2F;dev&#x2F;loop0p1 &#x2F;mnt&#x2F;debian</span><br></pre></td></tr></table></figure>

<p>引导chroot。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo debootstrap \</span><br><span class="line">    --arch&#x3D;i386 \</span><br><span class="line">    --variant&#x3D;minbase \</span><br><span class="line">    stretch &#x2F;mnt&#x2F;debian http:&#x2F;&#x2F;ftp.us.debian.org&#x2F;debian&#x2F;</span><br></pre></td></tr></table></figure>

<p>将特殊设备安装到chroot。这对于以后安装grub非常重要。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount -t proc &#x2F;proc &#x2F;mnt&#x2F;debian&#x2F;proc</span><br><span class="line">sudo mount -t sysfs &#x2F;sys &#x2F;mnt&#x2F;debian&#x2F;sys</span><br><span class="line">sudo mount -o bind &#x2F;dev &#x2F;mnt&#x2F;debian&#x2F;dev</span><br></pre></td></tr></table></figure>

<p>将root更改为chroot环境。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chroot &#x2F;mnt&#x2F;debian</span><br></pre></td></tr></table></figure>

<p><strong>chroot</strong></p>
<p>至少需要这些软件包，但根据需要添加更多。</p>
<p><strong>当提示您将grub安装到设备上时，请勿安装它。只需单击“ Enter”，然后选择不将其安装到任何设备。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    linux-image-586 systemd-sysv \</span><br><span class="line">	grub2-common grub-pc</span><br></pre></td></tr></table></figure>

<p><strong>chroot</strong></p>
<p>我们要基于磁盘标签而不是UUID或类似的命名磁盘<code>fstab</code>进行装载。这是因为，根据计算机的不同，USB驱动器<em>可能不是/ dev / sda</em>，而且因为UUID会根据文件的部署位置而有所不同。<code>/``/dev/sda``img</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;LABEL&#x3D;DEBUSB &#x2F; ext4 defaults 0 1&quot; &gt; &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure>

<p><strong>chroot</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>

<p><strong>chroot</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grub-install \</span><br><span class="line">    --target&#x3D;i386-pc \</span><br><span class="line">    --boot-directory&#x3D;&#x2F;boot \</span><br><span class="line">    --force-file-id \</span><br><span class="line">    --skip-fs-probe \</span><br><span class="line">    --recheck &#x2F;dev&#x2F;loop0</span><br></pre></td></tr></table></figure>

<p><strong>chroot</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>在中编辑<code>grub.cfg</code>文件<code>img</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nano &#x2F;mnt&#x2F;debian&#x2F;boot&#x2F;grub&#x2F;grub.cfg</span><br></pre></td></tr></table></figure>

<p>将此内容粘贴到<code>grub.cfg</code>文件中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># grub.cfg</span><br><span class="line">set default&#x3D;&quot;0&quot;</span><br><span class="line">set timeout&#x3D;10</span><br><span class="line"></span><br><span class="line">menuentry &quot;Debian&quot; &#123;</span><br><span class="line">    linux &#x2F;vmlinuz root&#x3D;&#x2F;dev&#x2F;disk&#x2F;by-label&#x2F;DEBUSB quiet</span><br><span class="line">    initrd &#x2F;initrd.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用与我们<code>fstab</code>上面相同的名称标记映像分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo e2label &#x2F;dev&#x2F;loop0p1 DEBUSB</span><br></pre></td></tr></table></figure>

<p>设置的主机名<code>img</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;debian-usb&quot; | sudo tee &#x2F;mnt&#x2F;debian&#x2F;etc&#x2F;hostname</span><br></pre></td></tr></table></figure>

<p>清理特殊设备。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umount &#x2F;mnt&#x2F;debian&#x2F;&#123;dev,sys,proc&#125;</span><br></pre></td></tr></table></figure>

<p>卸载回路设备。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umount &#x2F;mnt&#x2F;debian</span><br></pre></td></tr></table></figure>

<p>卸下<code>img</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo losetup -d &#x2F;dev&#x2F;loop0</span><br></pre></td></tr></table></figure>

<p>现在，您具有通用的Debian安装，可以像这样将其部署到多个设备。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd if&#x3D;debian.img of&#x3D;&#x2F;dev&#x2F;sdz</span><br></pre></td></tr></table></figure>

<h1 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h1><ul>
<li><a href="https://wiki.archlinux.org/index.php/Installing_Arch_Linux_on_a_USB_key" target="_blank" rel="external nofollow noopener noreferrer">在USB密钥上安装Arch Linux</a></li>
<li><a href="http://www.wyae.de/docs/boot-usb3/" target="_blank" rel="external nofollow noopener noreferrer">从USB 3启动</a></li>
<li><a href="https://www.cyberciti.biz/faq/linux-partition-howto-set-labels/" target="_blank" rel="external nofollow noopener noreferrer">标记Linux分区</a></li>
<li><a href="https://ubuntuforums.org/showthread.php?t=1529777" target="_blank" rel="external nofollow noopener noreferrer">如何生成使用LABEL而不是UUID的grub.cfg？</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GRUB" target="_blank" rel="external nofollow noopener noreferrer">格鲁布</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/html_node/Multi_002dboot-manual-config.html" target="_blank" rel="external nofollow noopener noreferrer">6.3多引导手动配置</a></li>
<li><a href="https://unix.stackexchange.com/questions/10010/safe-to-delete-system-map-files-in-boot" target="_blank" rel="external nofollow noopener noreferrer">可以安全删除/ boot中的System.map- *文件吗？</a></li>
<li><a href="https://ubuntuforums.org/showthread.php?t=1530532" target="_blank" rel="external nofollow noopener noreferrer">使用标签引导GRUB2（无UUID）</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/grub.html#search" target="_blank" rel="external nofollow noopener noreferrer">16.3.64搜索</a></li>
<li><a href="https://ubuntuforums.org/showthread.php?t=1854142" target="_blank" rel="external nofollow noopener noreferrer">错误：没有这样的设备：grub抢救&gt;</a></li>
<li><a href="https://askubuntu.com/questions/491604/grub-rescue-no-such-partition" target="_blank" rel="external nofollow noopener noreferrer">grub救援-&gt;没有这样的分区[重复]</a></li>
<li><a href="https://superuser.com/questions/130955/how-to-install-grub-into-an-img-file" target="_blank" rel="external nofollow noopener noreferrer">如何将grub安装到.img文件中？</a></li>
<li><a href="https://unix.stackexchange.com/questions/120198/how-to-fix-boot-into-initramfs-prompt-and-mount-cant-read-etc-fstab-no-su" target="_blank" rel="external nofollow noopener noreferrer">如何解决引导进入initramfs提示符和“装载：无法读取’/ etc / fstab’：无此文件或目录”和“找不到init”的问题？</a></li>
<li><a href="https://serverfault.com/questions/540492/sudo-echo-bla-etc-sysctl-conf-permission-denied" target="_blank" rel="external nofollow noopener noreferrer"><code>sudo echo “bla” &gt;&gt; /etc/sysctl.conf</code> 没有权限</a></li>
<li><a href="https://superuser.com/questions/165116/mount-dev-proc-sys-in-a-chroot-environment" target="_blank" rel="external nofollow noopener noreferrer">在chroot环境中挂载dev，proc，sys？</a></li>
</ul>
<h2 id="原文地址："><a href="#原文地址：" class="headerlink" title="原文地址："></a>原文地址：</h2><ul>
<li><a href="https://willhaley.com/blog/install-debian-usb/" target="_blank" rel="external nofollow noopener noreferrer">https://willhaley.com/blog/install-debian-usb/</a></li>
</ul>
]]></content>
      <categories>
        <category>live-build</category>
      </categories>
      <tags>
        <tag>live-build</tag>
      </tags>
  </entry>
  <entry>
    <title>将自定义Debian安装到硬盘</title>
    <url>/archives/b4ad7c54.html</url>
    <content><![CDATA[<h1 id="将自定义Debian安装到硬盘"><a href="#将自定义Debian安装到硬盘" class="headerlink" title="将自定义Debian安装到硬盘"></a>将自定义Debian安装到硬盘</h1><p>Debian提供的库存Debian安装程序非常棒。它直观，简单。但是，如果出于某种原因（特定配置，计算机部署，最小映像）想要自定义安装，则可以使用以下步骤来完成。</p>
<p>为此，我们将需要任何基于Debian的实时CD。您可以使用我的指南来<a href="https://willhaley.com/blog/custom-debian-live-environment/" target="_blank" rel="external nofollow noopener noreferrer">创建自定义的Debian Live CD或USB</a>来生成该文件，也可以仅使用Ubuntu或Debian Live CD或USB。</p>
<p>使用自定义实时环境的优势在于您可以将所需工具打包在实时环境中，以便它们始终可用。如果您使用库存的Ubuntu或Debian Live CD，则可能需要网络连接才能安装所需的工具。</p>
<p><strong>警告</strong>：我已<strong>突出显示</strong>您应该在目标安装chroot中的所有位置。</p>
<ol>
<li><p>使用实时CD或USB引导计算机并安装必要的工具（假设它们尚不可用）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install debootstrap</span><br></pre></td></tr></table></figure>
</li>
<li><p>确定要在其中安装自定义Debian的设备。</p>
<p>我假设您打算使用的硬盘位于<code>/dev/sdz</code>，您只希望该磁盘上有一个分区，并且希望将MBR与grub2一起使用。</p>
<p>您<strong>必须</strong>替换的任何实例<code>/dev/sdz</code>与同位置在这些步骤中<strong>您的</strong>硬盘驱动器或会不小心丢失数据。</p>
</li>
<li><p>用一个可引导的Linux分区创建一个MBR表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo -e &quot;o\nn\np\n1\n\n\nw&quot; | sudo fdisk &#x2F;dev&#x2F;sdz</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo -e &quot;a\nw\n&quot; | sudo fdisk &#x2F;dev&#x2F;sdz</span><br></pre></td></tr></table></figure>
</li>
<li><p>格式化分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext4 &#x2F;dev&#x2F;sdz1</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果安装点尚不存在，请创建一个。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt</span><br></pre></td></tr></table></figure>
</li>
<li><p>挂载分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount &#x2F;dev&#x2F;sdz1 &#x2F;mnt</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置基本的Debian安装。我在我的发行版中使用Stretch，在架构上使用i386。如果您不在美国，或者您知道更近的镜子，请更换镜子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo debootstrap \</span><br><span class="line">    --arch&#x3D;i386 \</span><br><span class="line">    --variant&#x3D;minbase \</span><br><span class="line">    stretch &#x2F;mnt http:&#x2F;&#x2F;ftp.us.debian.org&#x2F;debian&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>绑定<code>/dev</code>并<code>/proc</code>从主机到chroot。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount -o bind &#x2F;dev &#x2F;mnt&#x2F;dev</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount -t proc &#x2F;proc &#x2F;mnt&#x2F;proc</span><br></pre></td></tr></table></figure>
</li>
<li><p>Chroot到我们的Debian安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chroot &#x2F;mnt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>chroot</strong></p>
<p>找出要在安装中使用的Linux内核。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-cache search linux-image</span><br></pre></td></tr></table></figure>

<p>我选择了图像<code>linux-image-586</code>。<code>systemd-sys</code>（或等效项）是必须提供的<code>init</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    linux-image-586 systemd-sysv</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>chroot</strong></p>
<p>安装您选择的程序。我使用<code>--no-install-recommends</code>以避免多余的程序包。您应该确定安装所需的内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    network-manager net-tools wireless-tools wpagui \</span><br><span class="line">    tcpdump wget openssh-client \</span><br><span class="line">    blackbox xserver-xorg-core xserver-xorg x11-xserver-utils \</span><br><span class="line">    xinit xterm \</span><br><span class="line">    pciutils usbutils gparted nano</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>chroot</strong></p>
<p>创建<code>/etc/fstab</code>用于安装的文件。</p>
<p>我们可以使用类似的脚本来生成它。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UUID&#x3D;&#96;blkid -s UUID -o value &#x2F;dev&#x2F;sdz1&#96;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;UUID&#x3D;$&#123;UUID&#125; &#x2F; ext4 defaults 1 1&quot; &gt; &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>chroot</strong></p>
<p>安装grub引导加载程序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install grub2</span><br></pre></td></tr></table></figure>

<p>出现提示时，请确保选择<code>/dev/sdz</code>（<strong>不是</strong> <code>/dev/sdz1</code>）作为<code>Grub install device</code>。</p>
</li>
<li><p><strong>chroot</strong></p>
<p>设置root密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>chroot</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动您的Debian安装！</p>
</li>
</ol>
<h2 id="原文地址："><a href="#原文地址：" class="headerlink" title="原文地址："></a>原文地址：</h2><ul>
<li><a href="https://willhaley.com/blog/custom-debian-hard-drive-install/" target="_blank" rel="external nofollow noopener noreferrer">https://willhaley.com/blog/custom-debian-hard-drive-install/</a></li>
</ul>
]]></content>
      <categories>
        <category>live-build</category>
      </categories>
      <tags>
        <tag>live-build</tag>
      </tags>
  </entry>
  <entry>
    <title>创建一个自定义BIOS启动的Debian Live环境（CD或USB）</title>
    <url>/archives/29fc0db9.html</url>
    <content><![CDATA[<h1 id="创建一个自定义BIOS启动的Debian-Live环境（CD或USB）"><a href="#创建一个自定义BIOS启动的Debian-Live环境（CD或USB）" class="headerlink" title="创建一个自定义BIOS启动的Debian Live环境（CD或USB）"></a>创建一个自定义BIOS启动的Debian Live环境（CD或USB）</h1><p>这些是我在<strong>Ubuntu 18.04 LTS（Bionic Beaver）</strong> 64位系统上使用的步骤，用于构建可以从CD或USB引导的<strong>x86 Debian 9（Stretch）</strong>实时环境。</p>
<p>这些步骤可用于创建可启动BIOS（MBR），可启动UEFI（GPT）或可启动UEFI和BIOS的组合的实时环境。本指南的独特之处在于<strong>未使用Syslinux / Isolinux。只有Grub引导设备。</strong>这样做是为了保持一致性，并避免两者混淆（仅Syslinux / Isolinux不能完成本文中介绍的所有内容，但是Grub可以做到）。</p>
<p>以下是我的指南的替代方法，对于那些阅读本文的人来说，它们可能是更好的解决方案：<a href="https://manpages.debian.org/jessie/live-build/live-build.7.en.html" target="_blank" rel="external nofollow noopener noreferrer">live-build</a>，<a href="https://help.ubuntu.com/community/mkusb" target="_blank" rel="external nofollow noopener noreferrer">mkusb</a>，<a href="https://unetbootin.github.io/" target="_blank" rel="external nofollow noopener noreferrer">UNetbootin</a>，<a href="https://github.com/jnalley/xixer" target="_blank" rel="external nofollow noopener noreferrer">xixer</a>，<a href="https://rufus.akeo.ie/" target="_blank" rel="external nofollow noopener noreferrer">rufus</a>，<a href="https://www.pendrivelinux.com/yumi-multiboot-usb-creator/" target="_blank" rel="external nofollow noopener noreferrer">YUMI</a>，<a href="https://wiki.debian.org/Simple-CDD" target="_blank" rel="external nofollow noopener noreferrer">Simple-cdd</a>。您还应该查看<a href="https://wiki.debian.org/DebianCustomCD" target="_blank" rel="external nofollow noopener noreferrer">Debian DebianCustomCD文档，</a>因为它将比本文提供的信息多得多。</p>
<p>我写这本指南的目的更多是出于教育目的。它不一定是满足您需求的最快指南或最佳指南。希望对您有所帮助。</p>
<p><strong>警告</strong>：我已<strong>突出显示</strong>您应该在 <strong>[chroot]</strong>环境中的所有位置。小心！在本地环境而不是<a href="https://en.wikipedia.org/wiki/Chroot" target="_blank" rel="external nofollow noopener noreferrer"> chroot中</a>运行其中一些命令可能会损坏系统。</p>
<h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h1><p>安装我们需要构建环境的应用程序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    debootstrap \</span><br><span class="line">    squashfs-tools \</span><br><span class="line">    xorriso \</span><br><span class="line">    grub-pc-bin \</span><br><span class="line">    grub-efi-amd64-bin \</span><br><span class="line">    mtools</span><br></pre></td></tr></table></figure>

<p>创建一个目录，我们将在其中存储在本指南中创建的所有文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;LIVE_BOOT</span><br></pre></td></tr></table></figure>

<h1 id="引导和配置Debian"><a href="#引导和配置Debian" class="headerlink" title="引导和配置Debian"></a>引导和配置Debian</h1><p>设置基本的Debian环境。我正在使用<code>stretch</code>我的发行版和<code>i386</code>体系结构。请查阅<a href="https://www.debian.org/mirror/list" target="_blank" rel="external nofollow noopener noreferrer">debian镜像</a>列表。</p>
<p><em>如果附近有镜像网站，请在此命令中更改URL。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo debootstrap \</span><br><span class="line">    --arch&#x3D;i386 \</span><br><span class="line">    --variant&#x3D;minbase \</span><br><span class="line">    stretch \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;chroot \</span><br><span class="line">    http:&#x2F;&#x2F;ftp.us.debian.org&#x2F;debian&#x2F;</span><br></pre></td></tr></table></figure>

<p>Chroot到我们刚刚引导的Debian环境。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chroot $HOME&#x2F;LIVE_BOOT&#x2F;chroot</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>为您的Debian环境设置自定义主机名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;ling&quot; &gt; &#x2F;etc&#x2F;hostname</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>确定实时环境中需要哪个Linux内核。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-cache search linux-image</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>我选择了图像<code>linux-image-686</code>。我也认为这<code>live-boot</code>是必要的。<code>systemd-sys</code>（或等效项）也是提供init所必需的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    linux-image-686 \</span><br><span class="line">    live-boot \</span><br><span class="line">    systemd-sysv</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>安装您选择的程序，然后运行<code>apt-get clean</code>以节省一些空间。我使用<code>--no-install-recommends</code>以避免多余的程序包。您应该确定环境所需的内容。</p>
<p>阅读Debian的<a href="https://wiki.debian.org/ReduceDebian" target="_blank" rel="external nofollow noopener noreferrer">ReduceDebian文章，</a>以获取有关减小Debian环境大小的技巧（如果大小很重要并且您需要最小和紧凑的安装）。请注意，某些实时环境（如<a href="https://en.wikipedia.org/wiki/Tiny_Core_Linux" target="_blank" rel="external nofollow noopener noreferrer">Tiny Core Linux</a>或<a href="https://en.wikipedia.org/wiki/Puppy_Linux" target="_blank" rel="external nofollow noopener noreferrer">Puppy Linux）</a>经过专门优化，仅占很小的空间。尽管本文提供了一个相对较小的实时环境，但生成仅几十MB大小的环境仍需要付出额外的精力，而本文并未涉及。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    network-manager net-tools wireless-tools wpagui \</span><br><span class="line">    curl openssh-client \</span><br><span class="line">    blackbox xserver-xorg-core xserver-xorg xinit xterm \</span><br><span class="line">    nano &amp;&amp; \</span><br><span class="line">apt-get clean</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>设置root密码。<code>root</code>将默认为该实时环境中的唯一用户，但是您可以根据需要添加其他用户。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>退出chroot。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>创建目录，其中将包含我们的实时环境文件和暂存文件的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;LIVE_BOOT&#x2F;&#123;scratch,image&#x2F;live&#125;</span><br></pre></td></tr></table></figure>

<p>将chroot环境压缩到一个Squash文件系统中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mksquashfs \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;chroot \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;live&#x2F;filesystem.squashfs \</span><br><span class="line">    -e boot</span><br></pre></td></tr></table></figure>

<p>将内核和initramfs从中复制<code>chroot</code>到<code>live</code>目录中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp $HOME&#x2F;LIVE_BOOT&#x2F;chroot&#x2F;boot&#x2F;vmlinuz-* \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;vmlinuz &amp;&amp; \</span><br><span class="line">cp $HOME&#x2F;LIVE_BOOT&#x2F;chroot&#x2F;boot&#x2F;initrd.img-* \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;initrd</span><br></pre></td></tr></table></figure>

<p>为grub创建菜单配置文件。请注意，<code>insmod all_video</code>在我的测试中需要该行来处理我的一台计算机的<a href="https://askubuntu.com/a/857008/413290" target="_blank" rel="external nofollow noopener noreferrer">UEFI引导中的错误</a>。也许不是每个人都需要那条线，但我确实需要。</p>
<p>此配置指示Grub使用该<code>search</code>命令来推断哪个设备包含我们的实时环境。考虑到我们可以将实时环境写入可启动媒体的各种方式，这似乎是最可移植的解决方案。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;&#39;EOF&#39; &gt;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line"></span><br><span class="line">insmod all_video</span><br><span class="line"></span><br><span class="line">search --set&#x3D;root --file &#x2F;DEBIAN_CUSTOM</span><br><span class="line"></span><br><span class="line">set default&#x3D;&quot;0&quot;</span><br><span class="line">set timeout&#x3D;30</span><br><span class="line"></span><br><span class="line">menuentry &quot;Debian Live&quot; &#123;</span><br><span class="line">    linux &#x2F;vmlinuz boot&#x3D;live quiet nomodeset</span><br><span class="line">    initrd &#x2F;initrd</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>在<code>image</code>named中创建一个特殊文件<code>DEBIAN_CUSTOM</code>。该文件将用于帮助<code>Grub</code>确定哪个设备包含我们的实时文件系统。该文件名必须唯一，并且必须与我们的<code>grub.cfg</code>配置中的文件名匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;DEBIAN_CUSTOM</span><br></pre></td></tr></table></figure>

<p>您的<code>LIVE_BOOT</code>目录现在应该大致如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LIVE_BOOT&#x2F;chroot&#x2F;*tons of chroot files*</span><br><span class="line">LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;DEBIAN_CUSTOM</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;initrd</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;vmlinuz</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;live&#x2F;filesystem.squashfs</span><br></pre></td></tr></table></figure>

<h1 id="创建可启动媒体"><a href="#创建可启动媒体" class="headerlink" title="创建可启动媒体"></a>创建可启动媒体</h1><p>请注意，下面有两组<strong>单独</strong>的说明，用于为实时环境创建可启动媒体。一个进程名为<a href="https://willhaley.com/blog/custom-debian-live-environment/#create-bootable-isocd" target="_blank" rel="external nofollow noopener noreferrer">Create Bootable ISO / CD</a>，<strong>另一个进程</strong>名为<a href="https://willhaley.com/blog/custom-debian-live-environment/#create-bootable-usb" target="_blank" rel="external nofollow noopener noreferrer">Create Bootable USB</a>。</p>
<ul>
<li>在<strong>创建可启动ISO / CD</strong>指令将导致<code>.iso</code>包含我们的生活环境中的图像文件。</li>
<li>“ <strong>创建可启动USB”</strong>说明将导致我们的实时环境直接安装到USB设备上。</li>
</ul>
<p><code>.iso</code>我们使用<strong>创建可启动ISO / CD</strong>指令<strong>创建</strong>的文件可以刻录到CD-ROM（光学介质），或通过写入USB设备<code>dd</code>。允许我们<code>.iso</code>文件中这种“应收帐款”行为的功能<em>并非</em>免费提供。这个过程有点复杂，但是在许多现代的实时环境（例如Ubuntu安装<code>.iso</code>文件）中，这种行为是很常见的。</p>
<p><em>请注意，将<code>.iso</code>文件写入USB设备与将实时环境直接安装到USB设备并不相同。在我的<a href="https://willhaley.com/blog/custom-debian-live-environment/#notes" target="_blank" rel="external nofollow noopener noreferrer">笔记</a>中详细了解我的发现。</em></p>
<h2 id="创建可启动的ISO-CD-（BIOS-启动方式）"><a href="#创建可启动的ISO-CD-（BIOS-启动方式）" class="headerlink" title="创建可启动的ISO / CD （BIOS 启动方式）"></a>创建可启动的ISO / CD （BIOS 启动方式）</h2><p>将实时环境安装到<code>.iso</code>可以刻录到光学介质的文件中。</p>
<p>如上所述，<code>.iso</code>通过这些步骤生成的文件<strong>可以</strong>使用写入到USB设备<code>dd</code>。</p>
<p>创建一个grub BIOS映像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grub-mkstandalone \</span><br><span class="line">    --format&#x3D;i386-pc \</span><br><span class="line">    --output&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;core.img \</span><br><span class="line">    --install-modules&#x3D;&quot;linux normal iso9660 biosdisk memdisk search tar ls&quot; \</span><br><span class="line">    --modules&#x3D;&quot;linux normal iso9660 biosdisk search&quot; \</span><br><span class="line">    --locales&#x3D;&quot;&quot; \</span><br><span class="line">    --fonts&#x3D;&quot;&quot; \</span><br><span class="line">    &quot;boot&#x2F;grub&#x2F;grub.cfg&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg&quot;</span><br></pre></td></tr></table></figure>

<p><code>cat</code>用于将可引导的Grub <code>cdboot.img</code>引导加载程序与我们的引导映像结合使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat \</span><br><span class="line">    &#x2F;usr&#x2F;lib&#x2F;grub&#x2F;i386-pc&#x2F;cdboot.img \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;core.img \</span><br><span class="line">&gt; $HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;bios.img</span><br></pre></td></tr></table></figure>

<p>生成ISO文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xorriso \</span><br><span class="line">    -as mkisofs \</span><br><span class="line">    -iso-level 3 \</span><br><span class="line">    -full-iso9660-filenames \</span><br><span class="line">    -volid &quot;DEBIAN_CUSTOM&quot; \</span><br><span class="line">    --grub2-boot-info \</span><br><span class="line">    --grub2-mbr &#x2F;usr&#x2F;lib&#x2F;grub&#x2F;i386-pc&#x2F;boot_hybrid.img \</span><br><span class="line">    -eltorito-boot \</span><br><span class="line">        boot&#x2F;grub&#x2F;bios.img \</span><br><span class="line">        -no-emul-boot \</span><br><span class="line">        -boot-load-size 4 \</span><br><span class="line">        -boot-info-table \</span><br><span class="line">        --eltorito-catalog boot&#x2F;grub&#x2F;boot.cat \</span><br><span class="line">    -output &quot;$&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;debian-custom.iso&quot; \</span><br><span class="line">    -graft-points \</span><br><span class="line">        &quot;$&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;image&quot; \</span><br><span class="line">        &#x2F;boot&#x2F;grub&#x2F;bios.img&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;bios.img</span><br></pre></td></tr></table></figure>

<p>现在将ISO刻录到CD，您应该可以使用BIOS系统从CD引导了。</p>
<h2 id="创建可启动USB"><a href="#创建可启动USB" class="headerlink" title="创建可启动USB"></a>创建可启动USB</h2><p>将实时环境安装到USB设备。</p>
<p>如上所述，在安装现场环境到USB设备是<strong>不</strong>一样的书面<code>.iso</code>文件到USB设备。在这两种情况下，最终结果在大多数情况下都是相同的，但是存在一些细微的差异值得理解，并且有正当的理由，有人可能希望将实时环境直接安装到USB设备，而不是将<code>.iso</code>文件写入USB设备。 </p>
<p>我假设您在<strong>/ dev /</strong> sdz上有一个已挂载的<strong>空白</strong> USB驱动器。为了在实际的块设备中轻松进行交换，我在这些命令中使用了一个变量。<code>$disk</code></p>
<p>导出<code>disk</code>变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export disk&#x3D;&#x2F;dev&#x2F;sdz</span><br></pre></td></tr></table></figure>

<p>为USB驱动器创建安装点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt&#x2F;usb</span><br></pre></td></tr></table></figure>

<p>使用分割USB驱动器<code>parted</code>。该命令在传统的MBR布局中创建1个分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo parted --script $disk \</span><br><span class="line">    mklabel msdos \</span><br><span class="line">    mkpart primary fat32 1MiB 100%</span><br></pre></td></tr></table></figure>

<p>格式化分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.vfat -F32 $&#123;disk&#125;1</span><br></pre></td></tr></table></figure>

<p>挂载分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount $&#123;disk&#125;1 &#x2F;mnt&#x2F;usb</span><br></pre></td></tr></table></figure>

<p>安装用于i386-pc引导的Grub。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo grub-install \</span><br><span class="line">    --target&#x3D;i386-pc \</span><br><span class="line">    --boot-directory&#x3D;&#x2F;mnt&#x2F;usb&#x2F;boot \</span><br><span class="line">    --recheck \</span><br><span class="line">    $disk</span><br></pre></td></tr></table></figure>

<p><code>live</code>在USB设备上创建目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt&#x2F;usb&#x2F;&#123;boot&#x2F;grub,live&#125;</span><br></pre></td></tr></table></figure>

<p>将我们先前生成的Debian实时环境文件复制到USB磁盘。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp -r $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;* &#x2F;mnt&#x2F;usb&#x2F;</span><br></pre></td></tr></table></figure>

<p>将<code>grub.cfg</code>启动配置复制到USB设备。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg \</span><br><span class="line">    &#x2F;mnt&#x2F;usb&#x2F;boot&#x2F;grub&#x2F;grub.cfg</span><br></pre></td></tr></table></figure>

<p>现在，卸下磁盘，您应该已经准备好在BIOS系统上从磁盘引导。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umount &#x2F;mnt&#x2F;usb</span><br></pre></td></tr></table></figure>

<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项 +"></a>注意事项 +</h1><h1 id="注释（Rufus支持）"><a href="#注释（Rufus支持）" class="headerlink" title="注释（Rufus支持） +"></a>注释（Rufus支持） +</h1><h1 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h1><ul>
<li><a href="https://linux.die.net/man/8/sgdisk" target="_blank" rel="external nofollow noopener noreferrer">sgdisk（8）-Linux手册页</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Multiboot_USB_drive#Hybrid_UEFI_GPT_.2B_BIOS_GPT.2FMBR_boot" target="_blank" rel="external nofollow noopener noreferrer">混合UEFI GPT + BIOS GPT / MBR引导</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GRUB#.22No_suitable_mode_found.22_error" target="_blank" rel="external nofollow noopener noreferrer">“找不到合适的模式”错误</a></li>
<li><a href="https://askubuntu.com/questions/258991/where-is-the-memtest-option-on-the-ubuntu-64-bit-live-cd" target="_blank" rel="external nofollow noopener noreferrer">Ubuntu 64位实时CD上的memtest选项在哪里？</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Remastering_the_Install_ISO" target="_blank" rel="external nofollow noopener noreferrer">重新掌握安装ISO</a></li>
<li><a href="https://help.ubuntu.com/community/UEFIBooting#Install_GRUB2_in_.28U.29EFI_systems" target="_blank" rel="external nofollow noopener noreferrer">在（U）EFI系统中安装GRUB2</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/grub/html_node/Embedded-configuration.html" target="_blank" rel="external nofollow noopener noreferrer">6.4将配置文件嵌入GRUB</a></li>
<li><a href="https://askubuntu.com/questions/643938/standalone-grub2-efi-installation-grub-cfg-placement" target="_blank" rel="external nofollow noopener noreferrer">独立的Grub2 EFI安装-grub.cfg放置？</a></li>
<li><a href="https://unix.stackexchange.com/questions/253657/actual-usage-of-grub-mkimage-config" target="_blank" rel="external nofollow noopener noreferrer">“ grub-mkimage –config =”的实际用法</a></li>
<li><a href="http://lukeluo.blogspot.com/2013/06/grub-how-to-4-memdisk-and-loopback.html" target="_blank" rel="external nofollow noopener noreferrer">GRUB2使用方法（4）：内存磁盘和回送设备</a></li>
<li><a href="https://unix.stackexchange.com/questions/267765/how-does-the-grub-efi-loader-find-the-correct-grub-cfg-and-boot-directory" target="_blank" rel="external nofollow noopener noreferrer">grub efi加载程序如何找到正确的grub.cfg和引导目录？</a></li>
<li><a href="https://www.linux.com/learn/how-rescue-non-booting-grub-2-Linux" target="_blank" rel="external nofollow noopener noreferrer">如何在Linux上救援非引导式GRUB 2</a></li>
<li><a href="https://help.ubuntu.com/community/BootFromUSB#Using_a_CD" target="_blank" rel="external nofollow noopener noreferrer">使用光盘</a></li>
<li><a href="https://superuser.com/questions/746553/boot-linux-with-extlinux-from-efi-gpt" target="_blank" rel="external nofollow noopener noreferrer">从EFI和GPT用extlinux引导Linux</a></li>
<li><a href="https://blog.fpmurphy.com/2010/06/grub2-modules.html" target="_blank" rel="external nofollow noopener noreferrer">GRUB2模块</a></li>
<li><a href="https://github.com/coreos/grub/blob/master/util/grub-install.c" target="_blank" rel="external nofollow noopener noreferrer">grub-install.c</a></li>
<li><a href="https://help.ubuntu.com/community/Grub2/Troubleshooting" target="_blank" rel="external nofollow noopener noreferrer">Grub2 /问题排查</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Secure_Boot#Set_up_PreLoader" target="_blank" rel="external nofollow noopener noreferrer">设置预加载器</a></li>
<li><a href="https://wiki.archlinux.org/index.php/REFInd#Using_PreLoader" target="_blank" rel="external nofollow noopener noreferrer">使用PreLoader</a></li>
<li><a href="https://github.com/Mic92/archlive/blob/master/build.sh#L138" target="_blank" rel="external nofollow noopener noreferrer">build.sh</a></li>
<li><a href="https://wiki.archlinux.org/index.php/archiso#Installing_packages_from_multilib" target="_blank" rel="external nofollow noopener noreferrer">阿奇索</a></li>
<li><a href="https://www.syslinux.org/wiki/index.php?title=Menu#The_simple_menu_system" target="_blank" rel="external nofollow noopener noreferrer">简单的菜单系统</a></li>
<li><a href="https://www.syslinux.org/wiki/index.php?title=Isohybrid#UEFI" target="_blank" rel="external nofollow noopener noreferrer">UEFI</a></li>
<li><a href="https://www.linuxquestions.org/questions/linux-general-1/make-uefi-bootable-live-cd-926021/" target="_blank" rel="external nofollow noopener noreferrer">制作UEFI可启动实时CD</a></li>
<li><a href="https://unix.stackexchange.com/questions/285193/what-is-the-proper-way-to-use-isolinux-with-uefi" target="_blank" rel="external nofollow noopener noreferrer">将ISOLINUX与UEFI一起使用的正确方法是什么？</a></li>
<li><a href="https://wiki.debian.org/UEFI#Booting_from_removable_media" target="_blank" rel="external nofollow noopener noreferrer">从可移动媒体引导</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GRUB#UEFI_systems" target="_blank" rel="external nofollow noopener noreferrer">UEFI系统</a></li>
<li><a href="https://www.rodsbooks.com/efi-bootloaders/installation.html" target="_blank" rel="external nofollow noopener noreferrer">管理Linux的EFI引导加载程序：EFI引导加载程序安装</a></li>
<li><a href="https://wiki.archlinux.org/index.php/syslinux#Boot_prompt" target="_blank" rel="external nofollow noopener noreferrer">例子</a></li>
<li><a href="https://forum.osdev.org/viewtopic.php?t=22169&p=178135" target="_blank" rel="external nofollow noopener noreferrer">Grub2 El-Torito CD</a></li>
<li><a href="https://forum.osdev.org/viewtopic.php?f=1&t=23766" target="_blank" rel="external nofollow noopener noreferrer">使用GRUB2创建ISO映像</a></li>
<li><a href="https://wiki.debian.org/DebianLive/MultibootISO" target="_blank" rel="external nofollow noopener noreferrer">DebianLive MultibootISO</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/grub/html_node/Images.html" target="_blank" rel="external nofollow noopener noreferrer">11个GRUB图像文件</a></li>
<li><a href="https://www.linuxquestions.org/questions/linux-software-2/stage2_eltorito-missing-884944/" target="_blank" rel="external nofollow noopener noreferrer">stage2_eltorito遗失</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/legacy/Making-a-GRUB-bootable-CD_002dROM.html" target="_blank" rel="external nofollow noopener noreferrer">3.4制作GRUB可引导CD-ROM</a></li>
<li><a href="https://unix.stackexchange.com/questions/283994/why-is-grub2-ignoring-kernel-options-when-boot-from-el-torito-on-cd" target="_blank" rel="external nofollow noopener noreferrer">从CD上的el torito引导时，grub2为什么会忽略内核选项？</a></li>
<li><a href="https://communities.vmware.com/message/2228281#2228281" target="_blank" rel="external nofollow noopener noreferrer">从CD / DVD引导UEFI无效</a></li>
<li><a href="https://communities.vmware.com/message/2583742#2583742" target="_blank" rel="external nofollow noopener noreferrer">升级到VMWS Player 12后的UEFI问题</a></li>
<li><a href="https://github.com/linuxkit/linuxkit/blob/master/tools/mkimage-iso-efi/make-efi" target="_blank" rel="external nofollow noopener noreferrer">品牌</a></li>
<li><a href="https://unix.stackexchange.com/questions/382817/uefi-bios-bootable-live-debian-stretch-amd64-with-persistence" target="_blank" rel="external nofollow noopener noreferrer">UEFI + BIOS可启动实时Debian Stretch amd64持久化</a></li>
<li><a href="https://www.syslinux.org/archives/2015-April/023381.html" target="_blank" rel="external nofollow noopener noreferrer">[syslinux] Isohybrid Wiki页面和UEFI</a></li>
</ul>
<h2 id="原文地址："><a href="#原文地址：" class="headerlink" title="原文地址："></a>原文地址：</h2><ul>
<li><a href="https://willhaley.com/blog/custom-debian-live-environment/" target="_blank" rel="external nofollow noopener noreferrer">https://willhaley.com/blog/custom-debian-live-environment/</a></li>
</ul>
]]></content>
      <categories>
        <category>live-build</category>
      </categories>
      <tags>
        <tag>live-build</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian10 环境下安装 hexo 并选择 next7.6 主题</title>
    <url>/archives/64471.html</url>
    <content><![CDATA[<h2 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h2><p><strong>1、安装nodejs</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -sL https:&#x2F;&#x2F;deb.nodesource.com&#x2F;setup_12.x | bash -</span><br><span class="line">apt-get install nodejs -y</span><br></pre></td></tr></table></figure>

<p><strong>2、检测nodejs是否安装成功</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -version      #显示版本号</span><br><span class="line">npm -version       #显示版本号</span><br></pre></td></tr></table></figure>



<h2 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h2><p><strong>1、更新安装源缓存并安装 git</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<p>2、检测git是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git --version        #显示版本号</span><br></pre></td></tr></table></figure>



<h2 id="hexo-安装及初始化"><a href="#hexo-安装及初始化" class="headerlink" title="hexo 安装及初始化"></a>hexo 安装及初始化</h2><p><strong>1、安装hexo</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli hexo-server hexo-deployer-git -g</span><br></pre></td></tr></table></figure>

<p><strong>2、初始化hexo项目</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init &lt;blog_path_folder&gt;</span><br></pre></td></tr></table></figure>

<p><strong>3、hexo部署及生成</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>



<h2 id="next-主题设置"><a href="#next-主题设置" class="headerlink" title="next 主题设置"></a>next 主题设置</h2><p><strong>1、下载主题</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &lt;you_hexo_blog_path&gt;</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p><strong>2、启用主题</strong></p>
<p>编辑hexo站点配置文件 <code>_config.yml</code> ,找到 <code>theme</code> 字段，并将其值更改为 next。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next7.6</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next 7.xx 添加背景图片</title>
    <url>/archives/32702.html</url>
    <content><![CDATA[<p><strong>主题配置文件</strong> <code>themes/next/_config.yml</code></p>
<p>找到custom_file_path，将如图所示的代码取消注释。</p>
<p>style: source/_data/styles.styl</p>
<p><strong>站点根目录</strong></p>
<p>mkdir -p source/_data</p>
<p>vim source/_data/styles.styl</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 添加背景图片</span><br><span class="line">body &#123;</span><br><span class="line">      background: url(https:&#x2F;&#x2F;source.unsplash.com&#x2F;random&#x2F;1600x900?wallpapers);&#x2F;&#x2F;自己喜欢的图片地址</span><br><span class="line">      background-size: cover;</span><br><span class="line">      background-repeat: no-repeat;</span><br><span class="line">      background-attachment: fixed;</span><br><span class="line">      background-position: 50% 50%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 修改主体透明度</span><br><span class="line">.main-inner &#123;</span><br><span class="line">      background: #fff;</span><br><span class="line">      opacity: 0.8;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 修改菜单栏透明度</span><br><span class="line">.header-inner &#123;</span><br><span class="line">      opacity: 0.8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next7.6</tag>
      </tags>
  </entry>
  <entry>
    <title>在基于非Kali Debian的系统上构建Kali</title>
    <url>/archives/34374.html</url>
    <content><![CDATA[<p>您可以在Kali以外的基于Debian的系统上轻松运行实时构建。以下说明已经过测试，可以与Debian和Ubuntu一起使用。</p>
<p>首先，我们通过确保已完全更新来准备系统，然后继续下载Kali存档密钥环和实时构建软件包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">cd &#x2F;root&#x2F;</span><br><span class="line"></span><br><span class="line">wget http:&#x2F;&#x2F;http.kali.org&#x2F;pool&#x2F;main&#x2F;k&#x2F;kali-archive-keyring&#x2F;kali-archive-keyring_2018.2_all.deb</span><br><span class="line">wget https:&#x2F;&#x2F;archive.kali.org&#x2F;kali&#x2F;pool&#x2F;main&#x2F;l&#x2F;live-build&#x2F;live-build_20190311_all.deb</span><br></pre></td></tr></table></figure>

<p>完成后，我们将安装一些其他依赖项和以前下载的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install -y git live-build cdebootstrap debootstrap curl</span><br><span class="line">sudo dpkg -i kali-archive-keyring_2018.2_all.deb</span><br><span class="line">sudo dpkg -i live-build_20190311_all.deb</span><br></pre></td></tr></table></figure>

<p>准备好所有环境后，我们通过设置构建脚本并签出构建配置来开始实时构建过程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;share&#x2F;debootstrap&#x2F;scripts&#x2F;</span><br><span class="line">echo &quot;default_mirror http:&#x2F;&#x2F;http.kali.org&#x2F;kali&quot;; sed -e &quot;s&#x2F;debian-archive-keyring.gpg&#x2F;kali-archive-keyring.gpg&#x2F;g&quot; sid &gt; &#x2F;tmp&#x2F;kali</span><br><span class="line">sudo mv &#x2F;tmp&#x2F;kali .</span><br><span class="line">sudo ln -s kali kali-rolling</span><br><span class="line"></span><br><span class="line">cd ~</span><br><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;build-scripts&#x2F;live-build-config.git</span><br><span class="line"></span><br><span class="line">cd live-build-config&#x2F;</span><br></pre></td></tr></table></figure>

<p>此时，我们必须编辑<code>build.sh</code>脚本以绕过版本检查。为此，我们注释掉下面的“出口1”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Check we have a good debootstrap</span><br><span class="line">ver_debootstrap&#x3D;$(dpkg-query -f &#39;$&#123;Version&#125;&#39; -W debootstrap)</span><br><span class="line">if dpkg --compare-versions &quot;$ver_debootstrap&quot; lt &quot;1.0.97&quot;; then</span><br><span class="line">if ! echo &quot;$ver_debootstrap&quot; | grep -q kali; then</span><br><span class="line">echo &quot;ERROR: You need debootstrap &gt;&#x3D; 1.0.97 (or a Kali patched debootstrap). Your current version: $ver_debootstrap&quot; &gt;&amp;2</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>进行更改后，脚本应如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Check we have a good debootstrap</span><br><span class="line">ver_debootstrap&#x3D;$(dpkg-query -f &#39;$&#123;Version&#125;&#39; -W debootstrap)</span><br><span class="line">if dpkg --compare-versions &quot;$ver_debootstrap&quot; lt &quot;1.0.97&quot;; then</span><br><span class="line">if ! echo &quot;$ver_debootstrap&quot; | grep -q kali; then</span><br><span class="line">echo &quot;ERROR: You need debootstrap &gt;&#x3D; 1.0.97 (or a Kali patched debootstrap). Your current version: $ver_debootstrap&quot; &gt;&amp;2</span><br><span class="line"># exit 1</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>此时，我们可以正常建立ISO</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo .&#x2F;build.sh --variant light --verbose</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>live-build</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kali</tag>
        <tag>live-build</tag>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>重建源程序包</title>
    <url>/archives/21215.html</url>
    <content><![CDATA[<p>Kali Linux <a href="https://www.kali.org/docs/development/live-build-a-custom-kali-iso/" target="_blank" rel="external nofollow noopener noreferrer">易于在每个软件包级别进行自定义</a>，并且对单个<a href="http://pkg.kali.org/" target="_blank" rel="external nofollow noopener noreferrer">软件包</a>进行修改并从其源代码重建它们以包含在自定义ISO或桌面安装中也很简单。</p>
<p>完成此过程很简单，只需三个步骤：</p>
<ul>
<li>使用<strong>apt</strong>提取软件包源</li>
<li>根据需要修改它们</li>
<li>使用Debian工具重建软件包。</li>
</ul>
<p>在此示例中，我们将重建<a href="https://github.com/nfc-tools/libfreefare" target="_blank" rel="external nofollow noopener noreferrer">libfreefare</a>软件包，以便将一些额外的硬编码Mifare访问密钥添加到mifare格式的工具中。</p>
<p>在进行其他操作之前，请确保未注释掉该<code>deb-src</code>行<code>/etc/apt/sources.list</code>。</p>
<h2 id="下载包源"><a href="#下载包源" class="headerlink" title="下载包源"></a>下载包源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Get the source package</span><br><span class="line">apt update</span><br><span class="line">apt-get source libfreefare</span><br><span class="line">cd libfreefare-0.4.0&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="编辑包源代码"><a href="#编辑包源代码" class="headerlink" title="编辑包源代码"></a>编辑包源代码</h2><p>对程序包的源代码进行所需的更改。在本例中，我们修改了示例文件mifare-classic-format.c。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">nano examples/mifare-classic-format.c</span><br></pre></td></tr></table></figure>

<h2 id="检查构建依赖关系"><a href="#检查构建依赖关系" class="headerlink" title="检查构建依赖关系"></a>检查构建依赖关系</h2><p>检查软件包可能具有的任何构建依赖项。必须先安装这些工具，然后才能构建软件包。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">dpkg-checkbuilddeps</span><br></pre></td></tr></table></figure>

<p>输出应类似于以下内容，具体取决于您已经安装了哪些软件包。如果<strong>dpkg-checkbuilddeps不</strong>返回任何输出，则意味着您可以继续进行构建，所有依赖项都已满足。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">dpkg-checkbuilddeps: Unmet build dependencies:</span><br></pre></td></tr></table></figure>

<h2 id="安装构建依赖项"><a href="#安装构建依赖项" class="headerlink" title="安装构建依赖项"></a>安装构建依赖项</h2><p>如果需要，请安装所有构建依赖项，如<strong>dpkg-checkbuilddeps</strong>的输出所示：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">apt install dh-autoreconf libnfc-dev libssl-dev</span><br></pre></td></tr></table></figure>

<h2 id="构建修改后的程序包"><a href="#构建修改后的程序包" class="headerlink" title="构建修改后的程序包"></a>构建修改后的程序包</h2><p>安装了所有依赖项之后，<strong>dpkg-buildpackage</strong>命令就可以构建新版本。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">dpkg-buildpackage</span><br></pre></td></tr></table></figure>

<h2 id="安装新软件包"><a href="#安装新软件包" class="headerlink" title="安装新软件包"></a>安装新软件包</h2><p>如果构建顺利完成，则可以使用<strong>dpkg</strong>安装新创建的软件包。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">dpkg -i ../libfreefare*.deb</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>重新编译Kali Linux内核</title>
    <url>/archives/52863.html</url>
    <content><![CDATA[<p>Kali Linux的可定制性一直扩展到Linux内核。</p>
<p>根据您的要求，您可能希望添加库存Kali Linux内核中未包含的驱动程序，补丁或内核功能。以下指南将介绍如何快速修改和重新编译Kali Linux内核以满足您的需求。请注意，默认情况下，Kali Linux内核中已经存在全局无线注入补丁。</p>
<h2 id="安装构建依赖项"><a href="#安装构建依赖项" class="headerlink" title="安装构建依赖项"></a>安装构建依赖项</h2><p>首先安装所有用于重新编译内核的构建依赖项。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install build-essential libncurses5-dev fakeroot unxz</span><br></pre></td></tr></table></figure>

<h2 id="下载Kali-Linux内核源代码"><a href="#下载Kali-Linux内核源代码" class="headerlink" title="下载Kali Linux内核源代码"></a>下载Kali Linux内核源代码</h2><p>本节的其余部分重点介绍4.9版本的Linux内核，但是示例当然可以根据所需的特定内核版本进行调整。我们假设已安装linux-source-4.9二进制软件包。请注意，我们安装了包含上游源代码的二进制软件包，但没有检索名为linux的Kali源代码软件包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install linux-source-4.9</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  bc libreadline7</span><br><span class="line">Suggested packages:</span><br><span class="line">  libncurses-dev | ncurses-dev libqt4-dev</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  bc libreadline7 linux-source-4.9</span><br><span class="line">0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Need to get 95.4 MB of archives.</span><br><span class="line">After this operation, 95.8 MB of additional disk space will be used.</span><br><span class="line">Do you want to continue? [Y&#x2F;n] y</span><br><span class="line">...SNIP...</span><br><span class="line">ls &#x2F;usr&#x2F;src</span><br><span class="line">linux-config-4.9  linux-patch-4.9-rt.patch.xz  linux-source-4.9.tar.xz</span><br></pre></td></tr></table></figure>

<p>请注意，该软件包包含<em>/usr/src/linux-source-4.9.tar.xz</em>，这是内核源代码的压缩存档。您必须将这些文件解压缩到新目录中（而不是直接在/ usr / src /下，因为不需要特殊权限来编译Linux内核）。相反，<em>〜/ kernel /</em>更合适。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~&#x2F;kernel; cd ~&#x2F;kernel</span><br><span class="line">tar -xaf &#x2F;usr&#x2F;src&#x2F;linux-source-4.9.tar.xz</span><br></pre></td></tr></table></figure>

<h3 id="配置内核"><a href="#配置内核" class="headerlink" title="配置内核"></a>配置内核</h3><p>重新编译内核的最新版本（可能带有附加补丁程序）时，配置很可能会尽可能与Kali提出的配置保持接近。在这种情况下，将<em>/ boot / config-version</em>文件（版本是当前使用的内核的版本，可以通过<strong>uname -r</strong>命令找到）复制到<em>本地</em>，而不是从头开始重新配置所有内容<em>。</em>包含内核源代码的目录中的<em>配置</em>文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;boot&#x2F;config-4.9.0-kali1-amd64 ~&#x2F;kernel&#x2F;linux-source-4.9&#x2F;.config</span><br></pre></td></tr></table></figure>

<p>如果需要进行更改，或者决定从头开始重新配置所有内容，则必须花时间配置内核。这可以通过调用<strong>make menuconfig</strong>命令来完成。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>

<p>使用<strong>menuconfig</strong>设置内核构建的详细信息不在本指南的范围之内。<a href="https://www.linux.org/threads/the-linux-kernel-configuring-the-kernel-part-1.8745/" target="_blank" rel="external nofollow noopener noreferrer">有关</a>在Linux.org <a href="https://www.linux.org/threads/the-linux-kernel-configuring-the-kernel-part-1.8745/" target="_blank" rel="external nofollow noopener noreferrer">上配置内核构建</a>的<a href="https://www.linux.org/threads/the-linux-kernel-configuring-the-kernel-part-1.8745/" target="_blank" rel="external nofollow noopener noreferrer">详细教程</a>。</p>
<h2 id="建立内核"><a href="#建立内核" class="headerlink" title="建立内核"></a>建立内核</h2><p>准备好内核配置后，一个简单的<strong>make deb-pkg</strong>将生成多达5个Debian软件包：包含内核映像和相关模块的<em>linux-image- *</em>版本<strong>* <em>linux-headers- **version</em></strong>，其中包含构建所需的头文件。外部模块<em>linux-firmware-image- *</em>version<strong><em>，其中包含一些驱动程序所需的固件文件（当从Debian或Kali提供的内核源进行构建时，可能会缺少此软件包），</em>linux-image- **version</strong> -dbg<em>，其中包含内核映像及其模块和</em>linux-libc-dev*的调试符号，其中包含与某些用户空间库（例如GNU glibc）相关的标头。Linux内核映像是一个大型构建，需要花费一些时间才能完成。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make clean</span><br><span class="line">make deb-pkg LOCALVERSION&#x3D;-custom KDEB_PKGVERSION&#x3D;$(make kernelversion)-1</span><br><span class="line">...SNIP...</span><br><span class="line">ls ..&#x2F;*.deb</span><br><span class="line">..&#x2F;linux-headers-4.9.0-kali1-custom_4.9.2-1_amd64.deb</span><br><span class="line">..&#x2F;linux-image-4.9.0-kali1-custom_4.9.2-1_amd64.deb</span><br><span class="line">..&#x2F;linux-image-4.9.0-kali1-custom-dbg_4.9.2-1_amd64.deb</span><br><span class="line">..&#x2F;linux-libc-dev_4.9.2-1_amd64.deb</span><br></pre></td></tr></table></figure>

<h2 id="安装修改后的内核"><a href="#安装修改后的内核" class="headerlink" title="安装修改后的内核"></a>安装修改后的内核</h2><p>构建成功完成后，您可以继续安装新的自定义内核并重新引导系统。请注意，特定的内核版本号会有所不同-在我们的示例中，是在Kali 2016.2系统上完成的，为4.9.2。根据要构建的当前内核版本，您将需要相应地调整命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -i ..&#x2F;linux-image-4.9.0-kali1-custom_4.9.2-1_amd64.deb</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>系统重新引导后，新内核应已运行。如果出现问题并且内核无法成功引导，您仍然可以使用GrUB菜单从原始的原始Kali内核引导并解决问题。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kali</tag>
        <tag>kernl</tag>
      </tags>
  </entry>
  <entry>
    <title>Debain Live 实时构建脚本</title>
    <url>/archives/3f9a2b60.html</url>
    <content><![CDATA[<h1 id="Debain-Live-实时构建脚本"><a href="#Debain-Live-实时构建脚本" class="headerlink" title="Debain Live 实时构建脚本"></a>Debain Live 实时构建脚本</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#</span><br><span class="line"># Debian Live image creator</span><br><span class="line">#</span><br><span class="line"># Author: Mathias Fredriksson</span><br><span class="line"># Based on: https:&#x2F;&#x2F;willhaley.com&#x2F;blog&#x2F;custom-debian-live-environment&#x2F;</span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">IN_CHROOT&#x3D;0</span><br><span class="line">if [[ $1 &#x3D;&#x3D; chroot ]]; then</span><br><span class="line">	IN_CHROOT&#x3D;1</span><br><span class="line">	shift</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">SCRIPT&#x3D;&quot;$0&quot;</span><br><span class="line">MIRROR&#x3D;&quot;http:&#x2F;&#x2F;www.nic.funet.fi&#x2F;debian&#x2F;&quot;</span><br><span class="line">WORK&#x3D;$(mktemp -d -t live-image.XXXX)</span><br><span class="line">#WORK&#x3D;&#x2F;tmp&#x2F;live-image.21Lr</span><br><span class="line">CHROOT&#x3D;&quot;$WORK&#x2F;chroot&quot;</span><br><span class="line">mkdir -p &quot;$WORK&quot;</span><br><span class="line"></span><br><span class="line">prepare() &#123;</span><br><span class="line">	apt-get -y install \</span><br><span class="line">		debootstrap \</span><br><span class="line">		squashfs-tools \</span><br><span class="line">		xorriso \</span><br><span class="line">		grub-pc-bin \</span><br><span class="line">		grub-efi-amd64-bin \</span><br><span class="line">		mtools</span><br><span class="line"></span><br><span class="line">	debootstrap \</span><br><span class="line">		--arch&#x3D;amd64 \</span><br><span class="line">		--variant&#x3D;minbase \</span><br><span class="line">		stretch \</span><br><span class="line">		&quot;$CHROOT&quot; \</span><br><span class="line">		$MIRROR</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cont_in_chroot() &#123;</span><br><span class="line">	local name</span><br><span class="line"></span><br><span class="line">	name&#x3D;&quot;$(basename &quot;$SCRIPT&quot;)&quot;</span><br><span class="line">	cp -a &quot;$SCRIPT&quot; &quot;$CHROOT&quot;</span><br><span class="line"></span><br><span class="line">	mount --rbind &#x2F;dev &quot;$CHROOT&quot;&#x2F;dev</span><br><span class="line">	mount --make-rslave &quot;$CHROOT&quot;&#x2F;dev</span><br><span class="line">	mount --rbind &#x2F;proc &quot;$CHROOT&quot;&#x2F;proc</span><br><span class="line">	mount --make-rslave &quot;$CHROOT&quot;&#x2F;proc</span><br><span class="line">	mount --rbind &#x2F;sys &quot;$CHROOT&quot;&#x2F;sys</span><br><span class="line">	mount --make-rslave &quot;$CHROOT&quot;&#x2F;sys</span><br><span class="line"></span><br><span class="line">	chroot &quot;$CHROOT&quot; &#x2F;bin&#x2F;bash .&#x2F;&quot;$name&quot; chroot &quot;$@&quot;</span><br><span class="line"></span><br><span class="line">	# Try to unmount a few times since this doesn&#39;t alway work on the first try...</span><br><span class="line">	grep &quot;$CHROOT&quot; &#x2F;proc&#x2F;mounts | cut -f2 -d&quot; &quot; | sort -r | xargs umount -n || \</span><br><span class="line">		grep &quot;$CHROOT&quot; &#x2F;proc&#x2F;mounts | cut -f2 -d&quot; &quot; | sort -r | xargs umount -n || \</span><br><span class="line">		grep &quot;$CHROOT&quot; &#x2F;proc&#x2F;mounts | cut -f2 -d&quot; &quot; | sort -r | xargs umount -n</span><br><span class="line"></span><br><span class="line">	rm &quot;$CHROOT&#x2F;$name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chroot_prepare() &#123;</span><br><span class="line">	echo debian-live &gt; &#x2F;etc&#x2F;hostname</span><br><span class="line"></span><br><span class="line">	# Set root password to &#39;live&#39;.</span><br><span class="line">	echo $&#39;live\nlive&#39; | passwd root</span><br><span class="line"></span><br><span class="line">	apt-get update</span><br><span class="line">	apt-get -y install --no-install-recommends \</span><br><span class="line">		linux-image-amd64 \</span><br><span class="line">		live-boot \</span><br><span class="line">		systemd-sysv</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chroot_install_tools() &#123;</span><br><span class="line">	cat &lt;&lt;-EOS &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;contrib-non-free.list</span><br><span class="line">	deb http:&#x2F;&#x2F;deb.debian.org&#x2F;debian&#x2F; stretch contrib non-free</span><br><span class="line">	EOS</span><br><span class="line"></span><br><span class="line">	apt update</span><br><span class="line">	apt-get -y install --no-install-recommends \</span><br><span class="line">		grub-pc-bin \</span><br><span class="line">		grub-efi-amd64-bin \</span><br><span class="line">		sudo \</span><br><span class="line">		curl \</span><br><span class="line">		hdparm \</span><br><span class="line">		sdparm \</span><br><span class="line">		pciutils \</span><br><span class="line">		usbutils \</span><br><span class="line">		dnsutils \</span><br><span class="line">		moreutils \</span><br><span class="line">		net-tools \</span><br><span class="line">		dosfstools \</span><br><span class="line">		openssh-server \</span><br><span class="line">		openssh-client \</span><br><span class="line">		nano \</span><br><span class="line">		vim \</span><br><span class="line">		zsh \</span><br><span class="line">		lsof \</span><br><span class="line">		lshw \</span><br><span class="line">		less \</span><br><span class="line">		rsync \</span><br><span class="line">		smartmontools \</span><br><span class="line">		intel-microcode \</span><br><span class="line">		cryptsetup \</span><br><span class="line">		lvm2 \</span><br><span class="line">		mdadm</span><br><span class="line"></span><br><span class="line">	chsh -s &#x2F;bin&#x2F;zsh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chroot_install_zfs() &#123;</span><br><span class="line">	cat &lt;&lt;-EOS &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;zfs.list</span><br><span class="line">	deb http:&#x2F;&#x2F;deb.debian.org&#x2F;debian&#x2F; stretch-backports main contrib non-free</span><br><span class="line">	EOS</span><br><span class="line"></span><br><span class="line">	apt-get update</span><br><span class="line">	apt-get -y install dpkg-dev linux-headers-amd64</span><br><span class="line">	apt-get -y install -t stretch-backports zfs-dkms</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chroot_finalize() &#123;</span><br><span class="line">	apt-get clean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">finalize() &#123;</span><br><span class="line">	mkdir -p &quot;$WORK&quot;&#x2F;&#123;scratch,image&#x2F;live&#125;</span><br><span class="line"></span><br><span class="line">	mksquashfs \</span><br><span class="line">		&quot;$CHROOT&quot; \</span><br><span class="line">		&quot;$WORK&quot;&#x2F;image&#x2F;live&#x2F;filesystem.squashfs \</span><br><span class="line">		-e boot</span><br><span class="line"></span><br><span class="line">	cp &quot;$CHROOT&quot;&#x2F;boot&#x2F;vmlinuz-* &quot;$CHROOT&quot;&#x2F;boot&#x2F;initrd.img-* \</span><br><span class="line">		&quot;$WORK&quot;&#x2F;image&#x2F;live</span><br><span class="line"></span><br><span class="line">	cat &lt;&lt;EOF &gt; &quot;$WORK&quot;&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line">insmod all_video</span><br><span class="line">insmod play</span><br><span class="line">play 960 440 1 0 4 440 1</span><br><span class="line">if [ \$&#123;iso_path&#125; ] ; then</span><br><span class="line">  set loopback&#x3D;&quot;findiso&#x3D;\$&#123;iso_path&#125;&quot;</span><br><span class="line">fi</span><br><span class="line">search --set&#x3D;root --file &#x2F;DEBIAN_LIVE</span><br><span class="line">set default&#x3D;&quot;0&quot;</span><br><span class="line">set timeout&#x3D;5</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">	(cd &quot;$CHROOT&quot;&#x2F;boot || exit 1</span><br><span class="line">		for kernel in vmlinuz-*; do</span><br><span class="line">			version&#x3D;$&#123;kernel#vmlinuz-&#125;</span><br><span class="line">			cat &lt;&lt;EOF &gt;&gt; &quot;$WORK&quot;&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line">menuentry &quot;Debian GNU&#x2F;Linux Live (kernel $version)&quot; &#123;</span><br><span class="line">  linux  &#x2F;live&#x2F;vmlinuz-$version boot&#x3D;live components &quot;\$&#123;loopback&#125;&quot;</span><br><span class="line">  initrd &#x2F;live&#x2F;initrd.img-$version</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">		done</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	# Create file used by grub to search for boot device.</span><br><span class="line">	touch &quot;$WORK&quot;&#x2F;image&#x2F;DEBIAN_LIVE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create_iso() &#123;</span><br><span class="line">	grub-mkstandalone \</span><br><span class="line">		--format&#x3D;x86_64-efi \</span><br><span class="line">		--output&#x3D;&quot;$WORK&quot;&#x2F;scratch&#x2F;bootx64.efi \</span><br><span class="line">		--locales&#x3D;&quot;&quot; \</span><br><span class="line">		--fonts&#x3D;&quot;&quot; \</span><br><span class="line">		&quot;boot&#x2F;grub&#x2F;grub.cfg&#x3D;$WORK&#x2F;scratch&#x2F;grub.cfg&quot;</span><br><span class="line"></span><br><span class="line">	(cd &quot;$WORK&quot;&#x2F;scratch</span><br><span class="line">		dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;efiboot.img bs&#x3D;1M count&#x3D;10</span><br><span class="line">		mkfs.vfat efiboot.img</span><br><span class="line">		mmd -i efiboot.img efi efi&#x2F;boot</span><br><span class="line">		mcopy -i efiboot.img .&#x2F;bootx64.efi ::efi&#x2F;boot&#x2F;</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	grub-mkstandalone \</span><br><span class="line">		--format&#x3D;i386-pc \</span><br><span class="line">		--output&#x3D;&quot;$WORK&quot;&#x2F;scratch&#x2F;core.img \</span><br><span class="line">		--install-modules&#x3D;&quot;linux normal iso9660 biosdisk memdisk search tar ls&quot; \</span><br><span class="line">		--modules&#x3D;&quot;linux normal iso9660 biosdisk search&quot; \</span><br><span class="line">		--locales&#x3D;&quot;&quot; \</span><br><span class="line">		--fonts&#x3D;&quot;&quot; \</span><br><span class="line">		&quot;boot&#x2F;grub&#x2F;grub.cfg&#x3D;$WORK&#x2F;scratch&#x2F;grub.cfg&quot;</span><br><span class="line"></span><br><span class="line">	cat &#x2F;usr&#x2F;lib&#x2F;grub&#x2F;i386-pc&#x2F;cdboot.img &quot;$WORK&quot;&#x2F;scratch&#x2F;core.img \</span><br><span class="line">		&gt; &quot;$WORK&quot;&#x2F;scratch&#x2F;bios.img</span><br><span class="line"></span><br><span class="line">	xorriso \</span><br><span class="line">		-as mkisofs \</span><br><span class="line">		-iso-level 3 \</span><br><span class="line">		-full-iso9660-filenames \</span><br><span class="line">		-volid &quot;DEBIAN_LIVE&quot; \</span><br><span class="line">		-eltorito-boot boot&#x2F;grub&#x2F;bios.img \</span><br><span class="line">		-no-emul-boot \</span><br><span class="line">		-boot-load-size 4 \</span><br><span class="line">		-boot-info-table \</span><br><span class="line">		--eltorito-catalog boot&#x2F;grub&#x2F;boot.cat \</span><br><span class="line">		--grub2-boot-info \</span><br><span class="line">		--grub2-mbr &#x2F;usr&#x2F;lib&#x2F;grub&#x2F;i386-pc&#x2F;boot_hybrid.img \</span><br><span class="line">		-eltorito-alt-boot \</span><br><span class="line">		-e EFI&#x2F;efiboot.img \</span><br><span class="line">		-no-emul-boot \</span><br><span class="line">		-append_partition 2 0xef &quot;$WORK&quot;&#x2F;scratch&#x2F;efiboot.img \</span><br><span class="line">		-output &quot;$WORK&#x2F;debian-custom.iso&quot; \</span><br><span class="line">		-graft-points \</span><br><span class="line">		&quot;$WORK&#x2F;image&quot; \</span><br><span class="line">		&#x2F;boot&#x2F;grub&#x2F;bios.img&#x3D;&quot;$WORK&quot;&#x2F;scratch&#x2F;bios.img \</span><br><span class="line">		&#x2F;EFI&#x2F;efiboot.img&#x3D;&quot;$WORK&quot;&#x2F;scratch&#x2F;efiboot.img</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (( IN_CHROOT )); then</span><br><span class="line">	chroot_prepare</span><br><span class="line">	chroot_install_tools</span><br><span class="line">	chroot_install_zfs</span><br><span class="line">	chroot_finalize</span><br><span class="line">	exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">prepare</span><br><span class="line">cont_in_chroot &quot;$@&quot;</span><br><span class="line">finalize</span><br><span class="line">create_iso</span><br></pre></td></tr></table></figure>



<p><a href="https://github.com/mafredri/debian-my-live-build/blob/master/misc/deprecated/create_live_cd.sh" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/mafredri/debian-my-live-build/blob/master/misc/deprecated/create_live_cd.sh</a></p>
]]></content>
      <categories>
        <category>live-build</category>
      </categories>
      <tags>
        <tag>live-build-script</tag>
      </tags>
  </entry>
  <entry>
    <title>Debain tar 命令常用参数及示例</title>
    <url>/archives/56a7b24e.html</url>
    <content><![CDATA[<h1 id="Debain-tar-命令常用参数及示例"><a href="#Debain-tar-命令常用参数及示例" class="headerlink" title="Debain tar 命令常用参数及示例"></a>Debain tar 命令常用参数及示例</h1><p>tar 命令常用来把文件和目录打包成一个文件。</p>
<h2 id="选项参数："><a href="#选项参数：" class="headerlink" title="选项参数："></a>选项参数：</h2><ul>
<li>-c 创建压缩文件</li>
<li>-x 解压文件</li>
<li>-v 显示进度</li>
<li>-f 文件名</li>
<li>-t 查看压缩文件内容</li>
<li>-j 通过bzip归档</li>
<li>-z 通过gzip归档</li>
<li>-r 在压缩文件中追加文件或目录 </li>
<li>-W 验证压缩文件</li>
</ul>
<h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><h3 id="把目录-home-abc-code-打包为code-tar"><a href="#把目录-home-abc-code-打包为code-tar" class="headerlink" title="把目录/home/abc/code 打包为code.tar"></a>把目录/home/abc/code 打包为code.tar</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -cvf code.tar &#x2F;home&#x2F;abc&#x2F;code&#x2F;</span><br></pre></td></tr></table></figure>



<h3 id="压缩为tar-gz-格式的包"><a href="#压缩为tar-gz-格式的包" class="headerlink" title="压缩为tar.gz 格式的包"></a>压缩为tar.gz 格式的包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar cvzf code.tar.gz &#x2F;home&#x2F;abc&#x2F;code&#x2F;</span><br></pre></td></tr></table></figure>



<h3 id="压缩率更高的tar-bz2-格式的包"><a href="#压缩率更高的tar-bz2-格式的包" class="headerlink" title="压缩率更高的tar.bz2 格式的包"></a>压缩率更高的tar.bz2 格式的包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar cvfj code.tar.bz2 &#x2F;home&#x2F;abc&#x2F;code&#x2F;</span><br></pre></td></tr></table></figure>



<h3 id="解压tar包"><a href="#解压tar包" class="headerlink" title="解压tar包"></a>解压tar包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -xvf code.tar -C &#x2F;home&#x2F;abc&#x2F;code</span><br></pre></td></tr></table></figure>



<h3 id="解压tar-gz包"><a href="#解压tar-gz包" class="headerlink" title="解压tar.gz包"></a>解压tar.gz包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -xvf code.tar.gz</span><br></pre></td></tr></table></figure>



<h3 id="解压tar-bz2-包"><a href="#解压tar-bz2-包" class="headerlink" title="解压tar.bz2 包"></a>解压tar.bz2 包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -xvf code.tar.bz2</span><br></pre></td></tr></table></figure>



<h3 id="列出tar包内容"><a href="#列出tar包内容" class="headerlink" title="列出tar包内容"></a>列出tar包内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -tvf code.tar</span><br></pre></td></tr></table></figure>



<h3 id="解压tar包中的单个文件"><a href="#解压tar包中的单个文件" class="headerlink" title="解压tar包中的单个文件"></a>解压tar包中的单个文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar --extract --file&#x3D;code.tar Readme.txt</span><br></pre></td></tr></table></figure>



<h3 id="解压tar包中的多个文件"><a href="#解压tar包中的多个文件" class="headerlink" title="解压tar包中的多个文件"></a>解压tar包中的多个文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -xvf code.tar &quot;file1&quot; &quot;file2&quot;</span><br></pre></td></tr></table></figure>



<h3 id="解压同一种类型的文件（下面是解压txt文件）"><a href="#解压同一种类型的文件（下面是解压txt文件）" class="headerlink" title="解压同一种类型的文件（下面是解压txt文件）"></a>解压同一种类型的文件（下面是解压txt文件）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -xvf code.tar --wildcards *.txt&#39;</span><br></pre></td></tr></table></figure>



<h3 id="在tar包中加入文件或目录"><a href="#在tar包中加入文件或目录" class="headerlink" title="在tar包中加入文件或目录"></a>在tar包中加入文件或目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -rvf code.tar abcd.txt</span><br><span class="line"># tar -rvf code.tar Doc&#x2F;</span><br></pre></td></tr></table></figure>



<h3 id="tar帮助信息查看"><a href="#tar帮助信息查看" class="headerlink" title="tar帮助信息查看"></a>tar帮助信息查看</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># man tar</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>tar</tag>
      </tags>
  </entry>
  <entry>
    <title>Debain vim语法高亮并显示行号</title>
    <url>/archives/1609fb63.html</url>
    <content><![CDATA[<h1 id="Debain-vim语法高亮并显示行号"><a href="#Debain-vim语法高亮并显示行号" class="headerlink" title="Debain vim语法高亮并显示行号"></a>Debain vim语法高亮并显示行号</h1><h2 id="临时生效："><a href="#临时生效：" class="headerlink" title="临时生效："></a>临时生效：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:syntax on  #高亮开</span><br><span class="line">:syntax off  #高亮关</span><br><span class="line">:set nu  #行号</span><br></pre></td></tr></table></figure>

<h2 id="永久生效："><a href="#永久生效：" class="headerlink" title="永久生效："></a>永久生效：</h2><p>切换到当前登陆用户家目录并编辑 .vimrc 文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd ~</span><br><span class="line"># vim .vimrc</span><br></pre></td></tr></table></figure>

<p>添加以下行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">syntax on</span><br><span class="line">set nu</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Debain 压缩和解压.bz2文件</title>
    <url>/archives/7e620ba9.html</url>
    <content><![CDATA[<h1 id="Debain-压缩和解压-bz2文件"><a href="#Debain-压缩和解压-bz2文件" class="headerlink" title="Debain 压缩和解压.bz2文件"></a>Debain 压缩和解压.bz2文件</h1><p>1、如果没有安装，执行如下命令安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt update</span><br><span class="line"># apt install bzip2</span><br></pre></td></tr></table></figure>

<p>2、使用bzip2压缩文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bzip2 filename&#x2F; </span><br><span class="line"># bzip2 -z filename</span><br></pre></td></tr></table></figure>

<p>上面命令执行后，会把原文件删除，如果要保留原文件，使用-k选项。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bzip2 -zk filename</span><br></pre></td></tr></table></figure>

<p>-f 选项强制覆盖已经存在的文件。</p>
<p>3、使用bzip2解压文件。(-d 选项解压)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bzip2 -d filename.bz2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bzip2 -vfd filename.bz2</span><br></pre></td></tr></table></figure>

<p>4、选项总结。</p>
<ul>
<li>-f 覆盖文件 </li>
<li>-v 可视化输出 </li>
<li>-k 保留原文件</li>
<li>-d 解压文件</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>bz2</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian Linux tar命令示例</title>
    <url>/archives/b76eb839.html</url>
    <content><![CDATA[<h1 id="Debian-Linux-tar命令示例"><a href="#Debian-Linux-tar命令示例" class="headerlink" title="Debian Linux tar命令示例"></a>Debian Linux tar命令示例</h1><h2 id="tar命令参数："><a href="#tar命令参数：" class="headerlink" title="tar命令参数："></a>tar命令参数：</h2><ul>
<li>-c 创建压缩文件</li>
<li>-x 解压文件</li>
<li>-v 显示进度</li>
<li>-f 文件名</li>
<li>-t 查看压缩文件内容</li>
<li>-j 通过bzip2归档</li>
<li>-z 通过gzip归档</li>
<li>-r 在压缩文件中追加文件或目录</li>
<li>-W 验证压缩文件</li>
</ul>
<h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -cvf code.tar &#x2F;home&#x2F;abc&#x2F;code&#x2F;</span><br><span class="line">tar cvzf code.tar.gz &#x2F;home&#x2F;abc&#x2F;code&#x2F;</span><br><span class="line">tar cvfj code.tar.bz2 &#x2F;home&#x2F;abc&#x2F;code&#x2F;</span><br><span class="line">tar xvf code.tar -C &#x2F;home&#x2F;abc&#x2F;code</span><br><span class="line">tar xvf code.tar.gz</span><br><span class="line">tar xvf code.tar.bz2</span><br><span class="line">tar tvf code.tar</span><br><span class="line">tar --extract --file&#x3D;code.tar Readme.txt  解压tar包中的单个文件</span><br><span class="line">tar -xvf code.tar &quot;file1&quot; &quot;file2&quot;</span><br><span class="line">tar -rvf code.tar abc.txt 在tar包中加入文件</span><br><span class="line">tar -rvf code.tar &#x2F;home&#x2F;abc&#x2F;doc 在tar包中加入目录</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>tar</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian rpm和deb包相互转换</title>
    <url>/archives/6596e5c7.html</url>
    <content><![CDATA[<h1 id="Debian-rpm和deb包相互转换"><a href="#Debian-rpm和deb包相互转换" class="headerlink" title="Debian rpm和deb包相互转换"></a>Debian rpm和deb包相互转换</h1><h2 id="安装alien软件包："><a href="#安装alien软件包：" class="headerlink" title="安装alien软件包："></a>安装alien软件包：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt update</span><br><span class="line"># apt install alien -y</span><br></pre></td></tr></table></figure>



<h2 id="RPM-gt-DEB"><a href="#RPM-gt-DEB" class="headerlink" title="RPM=&gt;DEB"></a>RPM=&gt;DEB</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alien google-chrome.rpm google-chrome.deb generated</span><br></pre></td></tr></table></figure>



<h2 id="DEB-gt-RPM-添加参数-r进行转换"><a href="#DEB-gt-RPM-添加参数-r进行转换" class="headerlink" title="DEB=&gt;RPM(添加参数-r进行转换)"></a>DEB=&gt;RPM(添加参数-r进行转换)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alien -r google-chrome.deb google-chrome.rpm generated</span><br></pre></td></tr></table></figure>



<h2 id="DEB包手动安装"><a href="#DEB包手动安装" class="headerlink" title="DEB包手动安装"></a>DEB包手动安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -i google-chrome.deb</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>rpm,deb</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian 安装 Google Chrome 浏览器</title>
    <url>/archives/c945e1f0.html</url>
    <content><![CDATA[<h1 id="Debian-安装-Google-Chrome-浏览器"><a href="#Debian-安装-Google-Chrome-浏览器" class="headerlink" title="Debian 安装 Google Chrome 浏览器"></a>Debian 安装 Google Chrome 浏览器</h1><p>1、首先需要下载并安装谷歌官方秘钥：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wget -q -O - https:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;linux_signing_key.pub | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<p>2、然后是添加谷歌官方软件源：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># echo &quot;deb http:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;chrome&#x2F;deb&#x2F; stable main&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;google-chrome.list</span><br></pre></td></tr></table></figure>

<p>3、执行安装命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get update</span><br><span class="line"># apt-get -y install google-chrome-stable</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>apt-get 安装过程被强制中断后</title>
    <url>/archives/668adeaf.html</url>
    <content><![CDATA[<h1 id="apt-get-安装过程被强制中断后"><a href="#apt-get-安装过程被强制中断后" class="headerlink" title="apt-get 安装过程被强制中断后"></a>apt-get 安装过程被强制中断后</h1><p>apt-get 操作被强行中断后，会出现无法进行新的安装和删除的情况只是提示您使用apt-get -f install来解决问题，但实际上，你按它的提示操作却解决不了任何问题。</p>
<p>这时你需要这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo dpkg --configure -a</span><br><span class="line"># sudo apt-get update</span><br><span class="line"># sudo apt-get install -f</span><br><span class="line"># sudo apt-get autoremove </span><br><span class="line"># sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<p>如果还有一些有问题的软件包可以用下面这个命令干掉它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dpkg -r pack</span><br></pre></td></tr></table></figure>

<p><code>-r</code> 选项：移除软件包（保留配置）</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>apt-get</tag>
      </tags>
  </entry>
  <entry>
    <title>apt-get 常用命令参数及常用选项</title>
    <url>/archives/b9dbae5f.html</url>
    <content><![CDATA[<h1 id="apt-get-常用命令参数及常用选项"><a href="#apt-get-常用命令参数及常用选项" class="headerlink" title="apt-get 常用命令参数及常用选项"></a>apt-get 常用命令参数及常用选项</h1><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><h3 id="更新软件包列表"><a href="#更新软件包列表" class="headerlink" title="更新软件包列表"></a>更新软件包列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt update</span><br></pre></td></tr></table></figure>



<h3 id="删除本地缓存的所有软件包"><a href="#删除本地缓存的所有软件包" class="headerlink" title="删除本地缓存的所有软件包"></a>删除本地缓存的所有软件包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt clean</span><br></pre></td></tr></table></figure>



<h3 id="升级系统中的所有软件包"><a href="#升级系统中的所有软件包" class="headerlink" title="升级系统中的所有软件包"></a>升级系统中的所有软件包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt upgrade</span><br></pre></td></tr></table></figure>



<h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt install pack</span><br></pre></td></tr></table></figure>



<h3 id="删除软件包"><a href="#删除软件包" class="headerlink" title="删除软件包"></a>删除软件包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt remove pack</span><br></pre></td></tr></table></figure>



<h3 id="彻底删除软件包（包括其配置文件）"><a href="#彻底删除软件包（包括其配置文件）" class="headerlink" title="彻底删除软件包（包括其配置文件）"></a>彻底删除软件包（包括其配置文件）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt purge pack</span><br></pre></td></tr></table></figure>



<h3 id="删除本地缓存中无用的软件包"><a href="#删除本地缓存中无用的软件包" class="headerlink" title="删除本地缓存中无用的软件包"></a>删除本地缓存中无用的软件包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt autoclean</span><br></pre></td></tr></table></figure>



<h3 id="删除所有自动安装且不再使用的软件包"><a href="#删除所有自动安装且不再使用的软件包" class="headerlink" title="删除所有自动安装且不再使用的软件包"></a>删除所有自动安装且不再使用的软件包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt autoremove</span><br></pre></td></tr></table></figure>



<h3 id="搜索软件包"><a href="#搜索软件包" class="headerlink" title="搜索软件包"></a>搜索软件包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-cache search pack</span><br></pre></td></tr></table></figure>



<h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><ul>
<li>–fix-missing</li>
<li>–yes </li>
<li>–no-install-recommends</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>apt-get</tag>
      </tags>
  </entry>
  <entry>
    <title>创建一个自定义UEFI启动的Debian Live环境</title>
    <url>/archives/39b84d77.html</url>
    <content><![CDATA[<h1 id="创建一个自定义UEFI启动的Debian-Live环境（CD或USB）"><a href="#创建一个自定义UEFI启动的Debian-Live环境（CD或USB）" class="headerlink" title="创建一个自定义UEFI启动的Debian Live环境（CD或USB）"></a>创建一个自定义UEFI启动的Debian Live环境（CD或USB）</h1><p>这些是我在<strong>Ubuntu 18.04 LTS（Bionic Beaver）</strong> 64位系统上使用的步骤，用于构建可以从CD或USB引导的<strong>x86 Debian 9（Stretch）</strong>实时环境。</p>
<p>这些步骤可用于创建可启动BIOS（MBR），可启动UEFI（GPT）或可启动UEFI和BIOS的组合的实时环境。本指南的独特之处在于<strong>未使用Syslinux / Isolinux。只有Grub引导设备。</strong>这样做是为了保持一致性，并避免两者混淆（仅Syslinux / Isolinux不能完成本文中介绍的所有内容，但是Grub可以做到）。</p>
<p>以下是我的指南的替代方法，对于那些阅读本文的人来说，它们可能是更好的解决方案：<a href="https://manpages.debian.org/jessie/live-build/live-build.7.en.html" target="_blank" rel="external nofollow noopener noreferrer">live-build</a>，<a href="https://help.ubuntu.com/community/mkusb" target="_blank" rel="external nofollow noopener noreferrer">mkusb</a>，<a href="https://unetbootin.github.io/" target="_blank" rel="external nofollow noopener noreferrer">UNetbootin</a>，<a href="https://github.com/jnalley/xixer" target="_blank" rel="external nofollow noopener noreferrer">xixer</a>，<a href="https://rufus.akeo.ie/" target="_blank" rel="external nofollow noopener noreferrer">rufus</a>，<a href="https://www.pendrivelinux.com/yumi-multiboot-usb-creator/" target="_blank" rel="external nofollow noopener noreferrer">YUMI</a>，<a href="https://wiki.debian.org/Simple-CDD" target="_blank" rel="external nofollow noopener noreferrer">Simple-cdd</a>。您还应该查看<a href="https://wiki.debian.org/DebianCustomCD" target="_blank" rel="external nofollow noopener noreferrer">Debian DebianCustomCD文档，</a>因为它将比本文提供的信息多得多。</p>
<p>我写这本指南的目的更多是出于教育目的。它不一定是满足您需求的最快指南或最佳指南。希望对您有所帮助。</p>
<p><strong>警告</strong>：我已<strong>突出显示</strong>您应该在 <strong>[chroot]</strong>环境中的所有位置。小心！在本地环境而不是<a href="https://en.wikipedia.org/wiki/Chroot" target="_blank" rel="external nofollow noopener noreferrer"> chroot中</a>运行其中一些命令可能会损坏系统。</p>
<h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h1><p>安装我们需要构建环境的应用程序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    debootstrap \</span><br><span class="line">    squashfs-tools \</span><br><span class="line">    xorriso \</span><br><span class="line">    grub-pc-bin \</span><br><span class="line">    grub-efi-amd64-bin \</span><br><span class="line">    mtools</span><br></pre></td></tr></table></figure>

<p>创建一个目录，我们将在其中存储在本指南中创建的所有文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;LIVE_BOOT</span><br></pre></td></tr></table></figure>

<h1 id="引导和配置Debian"><a href="#引导和配置Debian" class="headerlink" title="引导和配置Debian"></a>引导和配置Debian</h1><p>设置基本的Debian环境。我正在使用<code>stretch</code>我的发行版和<code>i386</code>体系结构。请查阅<a href="https://www.debian.org/mirror/list" target="_blank" rel="external nofollow noopener noreferrer">debian镜像</a>列表。</p>
<p><em>如果附近有镜子，请在此命令中更改URL。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo debootstrap \</span><br><span class="line">    --arch&#x3D;i386 \</span><br><span class="line">    --variant&#x3D;minbase \</span><br><span class="line">    stretch \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;chroot \</span><br><span class="line">    http:&#x2F;&#x2F;ftp.us.debian.org&#x2F;debian&#x2F;</span><br></pre></td></tr></table></figure>

<p>Chroot到我们刚刚引导的Debian环境。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chroot $HOME&#x2F;LIVE_BOOT&#x2F;chroot</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>为您的Debian环境设置自定义主机名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;debian-live&quot; &gt; &#x2F;etc&#x2F;hostname</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>确定实时环境中需要哪个Linux内核。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-cache search linux-image</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>我选择了图像<code>linux-image-686</code>。我也认为这<code>live-boot</code>是必要的。<code>systemd-sys</code>（或等效项）也是提供init所必需的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    linux-image-686 \</span><br><span class="line">    live-boot \</span><br><span class="line">    systemd-sysv</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>安装您选择的程序，然后运行<code>apt-get clean</code>以节省一些空间。我使用<code>--no-install-recommends</code>以避免多余的程序包。您应该确定环境所需的内容。</p>
<p>阅读Debian的<a href="https://wiki.debian.org/ReduceDebian" target="_blank" rel="external nofollow noopener noreferrer">ReduceDebian文章，</a>以获取有关减小Debian环境大小的技巧（如果大小很重要并且您需要最小和紧凑的安装）。请注意，某些实时环境（如<a href="https://en.wikipedia.org/wiki/Tiny_Core_Linux" target="_blank" rel="external nofollow noopener noreferrer">Tiny Core Linux</a>或<a href="https://en.wikipedia.org/wiki/Puppy_Linux" target="_blank" rel="external nofollow noopener noreferrer">Puppy Linux）</a>经过专门优化，仅占很小的空间。尽管本文提供了一个相对较小的实时环境，但生成仅几十MB大小的环境仍需要付出额外的精力，而本文并未涉及。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    network-manager net-tools wireless-tools wpagui \</span><br><span class="line">    curl openssh-client \</span><br><span class="line">    blackbox xserver-xorg-core xserver-xorg xinit xterm \</span><br><span class="line">    nano &amp;&amp; \</span><br><span class="line">apt-get clean</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>设置root密码。<code>root</code>将默认为该实时环境中的唯一用户，但是您可以根据需要添加其他用户。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>退出chroot。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>创建目录，其中将包含我们的实时环境文件和暂存文件的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;LIVE_BOOT&#x2F;&#123;scratch,image&#x2F;live&#125;</span><br></pre></td></tr></table></figure>

<p>将chroot环境压缩到一个Squash文件系统中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mksquashfs \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;chroot \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;live&#x2F;filesystem.squashfs \</span><br><span class="line">    -e boot</span><br></pre></td></tr></table></figure>

<p>将内核和initramfs从中复制<code>chroot</code>到<code>live</code>目录中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp $HOME&#x2F;LIVE_BOOT&#x2F;chroot&#x2F;boot&#x2F;vmlinuz-* \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;vmlinuz &amp;&amp; \</span><br><span class="line">cp $HOME&#x2F;LIVE_BOOT&#x2F;chroot&#x2F;boot&#x2F;initrd.img-* \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;initrd</span><br></pre></td></tr></table></figure>

<p>为grub创建菜单配置文件。请注意，<code>insmod all_video</code>在我的测试中需要该行来处理我的一台计算机的<a href="https://askubuntu.com/a/857008/413290" target="_blank" rel="external nofollow noopener noreferrer">UEFI引导中的错误</a>。也许不是每个人都需要那条线，但我确实需要。</p>
<p>此配置指示Grub使用该<code>search</code>命令来推断哪个设备包含我们的实时环境。考虑到我们可以将实时环境写入可启动媒体的各种方式，这似乎是最可移植的解决方案。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;&#39;EOF&#39; &gt;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line"></span><br><span class="line">insmod all_video</span><br><span class="line"></span><br><span class="line">search --set&#x3D;root --file &#x2F;DEBIAN_CUSTOM</span><br><span class="line"></span><br><span class="line">set default&#x3D;&quot;0&quot;</span><br><span class="line">set timeout&#x3D;30</span><br><span class="line"></span><br><span class="line">menuentry &quot;Debian Live&quot; &#123;</span><br><span class="line">    linux &#x2F;vmlinuz boot&#x3D;live quiet nomodeset</span><br><span class="line">    initrd &#x2F;initrd</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>在<code>image</code>named中创建一个特殊文件<code>DEBIAN_CUSTOM</code>。该文件将用于帮助<code>Grub</code>确定哪个设备包含我们的实时文件系统。该文件名必须唯一，并且必须与我们的<code>grub.cfg</code>配置中的文件名匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;DEBIAN_CUSTOM</span><br></pre></td></tr></table></figure>

<p>您的<code>LIVE_BOOT</code>目录现在应该大致如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LIVE_BOOT&#x2F;chroot&#x2F;*tons of chroot files*</span><br><span class="line">LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;DEBIAN_CUSTOM</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;initrd</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;vmlinuz</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;live&#x2F;filesystem.squashfs</span><br></pre></td></tr></table></figure>

<h1 id="创建可启动媒体"><a href="#创建可启动媒体" class="headerlink" title="创建可启动媒体"></a>创建可启动媒体</h1><p>请注意，下面有两组<strong>单独</strong>的说明，用于为实时环境创建可启动媒体。一个进程名为<a href="https://willhaley.com/blog/custom-debian-live-environment/#create-bootable-isocd" target="_blank" rel="external nofollow noopener noreferrer">Create Bootable ISO / CD</a>，<strong>另一个进程</strong>名为<a href="https://willhaley.com/blog/custom-debian-live-environment/#create-bootable-usb" target="_blank" rel="external nofollow noopener noreferrer">Create Bootable USB</a>。</p>
<ul>
<li>在<strong>创建可启动ISO / CD</strong>指令将导致<code>.iso</code>包含我们的生活环境中的图像文件。</li>
<li>“ <strong>创建可启动USB”</strong>说明将导致我们的实时环境直接安装到USB设备上。</li>
</ul>
<p><code>.iso</code>我们使用<strong>创建可启动ISO / CD</strong>指令<strong>创建</strong>的文件可以刻录到CD-ROM（光学介质），或通过写入USB设备<code>dd</code>。允许我们<code>.iso</code>文件中这种“应收帐款”行为的功能<em>并非</em>免费提供。这个过程有点复杂，但是在许多现代的实时环境（例如Ubuntu安装<code>.iso</code>文件）中，这种行为是很常见的。</p>
<p><em>请注意，将<code>.iso</code>文件写入USB设备与将实时环境直接安装到USB设备并不相同。在我的<a href="https://willhaley.com/blog/custom-debian-live-environment/#notes" target="_blank" rel="external nofollow noopener noreferrer">笔记</a>中详细了解我的发现。</em></p>
<h2 id="创建可启动的ISO-CD"><a href="#创建可启动的ISO-CD" class="headerlink" title="创建可启动的ISO / CD"></a>创建可启动的ISO / CD</h2><p>将实时环境安装到<code>.iso</code>可以刻录到光学介质的文件中。</p>
<p>如上所述，<code>.iso</code>通过这些步骤生成的文件<strong>可以</strong>使用写入到USB设备<code>dd</code>。</p>
<p>创建一个grub UEFI映像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grub-mkstandalone \</span><br><span class="line">    --format&#x3D;x86_64-efi \</span><br><span class="line">    --output&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;bootx64.efi \</span><br><span class="line">    --locales&#x3D;&quot;&quot; \</span><br><span class="line">    --fonts&#x3D;&quot;&quot; \</span><br><span class="line">    &quot;boot&#x2F;grub&#x2F;grub.cfg&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg&quot;</span><br></pre></td></tr></table></figure>

<p>创建包含EFI引导加载程序的FAT16 UEFI引导磁盘映像。请注意，使用<code>mmd</code>和<code>mcopy</code>命令来复制名为的UEFI引导加载程序<code>bootx64.efi</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(cd $HOME&#x2F;LIVE_BOOT&#x2F;scratch &amp;&amp; \</span><br><span class="line">    dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;efiboot.img bs&#x3D;1M count&#x3D;10 &amp;&amp; \</span><br><span class="line">    mkfs.vfat efiboot.img &amp;&amp; \</span><br><span class="line">    mmd -i efiboot.img efi efi&#x2F;boot &amp;&amp; \</span><br><span class="line">    mcopy -i efiboot.img .&#x2F;bootx64.efi ::efi&#x2F;boot&#x2F;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>生成ISO文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xorriso \</span><br><span class="line">    -as mkisofs \</span><br><span class="line">    -iso-level 3 \</span><br><span class="line">    -full-iso9660-filenames \</span><br><span class="line">    -volid &quot;DEBIAN_CUSTOM&quot; \</span><br><span class="line">    -eltorito-alt-boot \</span><br><span class="line">        -e EFI&#x2F;efiboot.img \</span><br><span class="line">        -no-emul-boot \</span><br><span class="line">    -append_partition 2 0xef $&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;efiboot.img \</span><br><span class="line">    -output &quot;$&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;debian-custom.iso&quot; \</span><br><span class="line">    -graft-points \</span><br><span class="line">        &quot;$&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;image&quot; \</span><br><span class="line">        &#x2F;EFI&#x2F;efiboot.img&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;efiboot.img</span><br></pre></td></tr></table></figure>

<p>现在将ISO刻录到CD，您应该可以使用UEFI系统从CD引导了。</p>
<h2 id="创建可启动USB"><a href="#创建可启动USB" class="headerlink" title="创建可启动USB"></a>创建可启动USB</h2><p>将实时环境安装到USB设备。</p>
<p>如上所述，在安装现场环境到USB设备是<strong>不</strong>一样的书面<code>.iso</code>文件到USB设备。在这两种情况下，最终结果在大多数情况下都是相同的，但是存在一些细微的差异值得理解，并且有正当的理由，有人可能希望将实时环境直接安装到USB设备，而不是将<code>.iso</code>文件写入USB设备。 </p>
<p>我假设您在<strong>/ dev /</strong> sdz上有一个已挂载的<strong>空白</strong> USB驱动器。为了在实际的块设备中轻松进行交换，我在这些命令中使用了一个变量。<code>$disk</code></p>
<p>导出<code>disk</code>变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export disk&#x3D;&#x2F;dev&#x2F;sdz</span><br></pre></td></tr></table></figure>

<p>为USB驱动器创建一些安装点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt&#x2F;&#123;usb,efi&#125;</span><br></pre></td></tr></table></figure>

<p>使用分割USB驱动器<code>parted</code>。此命令在GPT（Guid分区表）布局中创建2个分区。一个分区用于UEFI，另一个分区用于我们的Debian OS和其他实时数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo parted --script $disk \</span><br><span class="line">    mklabel gpt \</span><br><span class="line">    mkpart ESP fat32 1MiB 200MiB \</span><br><span class="line">        name 1 EFI \</span><br><span class="line">        set 1 esp on \</span><br><span class="line">    mkpart primary fat32 200MiB 100% \</span><br><span class="line">        name 2 LINUX \</span><br><span class="line">        set 2 msftdata on</span><br></pre></td></tr></table></figure>

<p>格式化UEFI和数据分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.vfat -F32 $&#123;disk&#125;1 &amp;&amp; \</span><br><span class="line">sudo mkfs.vfat -F32 $&#123;disk&#125;2</span><br></pre></td></tr></table></figure>

<p>挂载分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount $&#123;disk&#125;1 &#x2F;mnt&#x2F;efi &amp;&amp; \</span><br><span class="line">sudo mount $&#123;disk&#125;2 &#x2F;mnt&#x2F;usb</span><br></pre></td></tr></table></figure>

<p>安装用于x86_64 UEFI引导的Grub。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo grub-install \</span><br><span class="line">    --target&#x3D;x86_64-efi \</span><br><span class="line">    --efi-directory&#x3D;&#x2F;mnt&#x2F;efi \</span><br><span class="line">    --boot-directory&#x3D;&#x2F;mnt&#x2F;usb&#x2F;boot \</span><br><span class="line">    --removable \</span><br><span class="line">    --recheck</span><br></pre></td></tr></table></figure>

<p><code>live</code>在USB设备上创建目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt&#x2F;usb&#x2F;&#123;boot&#x2F;grub,live&#125;</span><br></pre></td></tr></table></figure>

<p>将我们先前生成的Debian实时环境文件复制到USB磁盘。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp -r $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;* &#x2F;mnt&#x2F;usb&#x2F;</span><br></pre></td></tr></table></figure>

<p>将<code>grub.cfg</code>启动配置复制到USB设备。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg \</span><br><span class="line">    &#x2F;mnt&#x2F;usb&#x2F;boot&#x2F;grub&#x2F;grub.cfg</span><br></pre></td></tr></table></figure>

<p>现在卸载磁盘，您应该已经准备好在UEFI系统上从磁盘启动。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umount &#x2F;mnt&#x2F;&#123;usb,efi&#125;</span><br></pre></td></tr></table></figure>

<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项 +"></a>注意事项 +</h1><h1 id="注释（Rufus支持）"><a href="#注释（Rufus支持）" class="headerlink" title="注释（Rufus支持） +"></a>注释（Rufus支持） +</h1><h1 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h1><ul>
<li><a href="https://linux.die.net/man/8/sgdisk" target="_blank" rel="external nofollow noopener noreferrer">sgdisk（8）-Linux手册页</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Multiboot_USB_drive#Hybrid_UEFI_GPT_.2B_BIOS_GPT.2FMBR_boot" target="_blank" rel="external nofollow noopener noreferrer">混合UEFI GPT + BIOS GPT / MBR引导</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GRUB#.22No_suitable_mode_found.22_error" target="_blank" rel="external nofollow noopener noreferrer">“找不到合适的模式”错误</a></li>
<li><a href="https://askubuntu.com/questions/258991/where-is-the-memtest-option-on-the-ubuntu-64-bit-live-cd" target="_blank" rel="external nofollow noopener noreferrer">Ubuntu 64位实时CD上的memtest选项在哪里？</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Remastering_the_Install_ISO" target="_blank" rel="external nofollow noopener noreferrer">重新掌握安装ISO</a></li>
<li><a href="https://help.ubuntu.com/community/UEFIBooting#Install_GRUB2_in_.28U.29EFI_systems" target="_blank" rel="external nofollow noopener noreferrer">在（U）EFI系统中安装GRUB2</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/grub/html_node/Embedded-configuration.html" target="_blank" rel="external nofollow noopener noreferrer">6.4将配置文件嵌入GRUB</a></li>
<li><a href="https://askubuntu.com/questions/643938/standalone-grub2-efi-installation-grub-cfg-placement" target="_blank" rel="external nofollow noopener noreferrer">独立的Grub2 EFI安装-grub.cfg放置？</a></li>
<li><a href="https://unix.stackexchange.com/questions/253657/actual-usage-of-grub-mkimage-config" target="_blank" rel="external nofollow noopener noreferrer">“ grub-mkimage –config =”的实际用法</a></li>
<li><a href="http://lukeluo.blogspot.com/2013/06/grub-how-to-4-memdisk-and-loopback.html" target="_blank" rel="external nofollow noopener noreferrer">GRUB2使用方法（4）：内存磁盘和回送设备</a></li>
<li><a href="https://unix.stackexchange.com/questions/267765/how-does-the-grub-efi-loader-find-the-correct-grub-cfg-and-boot-directory" target="_blank" rel="external nofollow noopener noreferrer">grub efi加载程序如何找到正确的grub.cfg和引导目录？</a></li>
<li><a href="https://www.linux.com/learn/how-rescue-non-booting-grub-2-Linux" target="_blank" rel="external nofollow noopener noreferrer">如何在Linux上救援非引导式GRUB 2</a></li>
<li><a href="https://help.ubuntu.com/community/BootFromUSB#Using_a_CD" target="_blank" rel="external nofollow noopener noreferrer">使用光盘</a></li>
<li><a href="https://superuser.com/questions/746553/boot-linux-with-extlinux-from-efi-gpt" target="_blank" rel="external nofollow noopener noreferrer">从EFI和GPT用extlinux引导Linux</a></li>
<li><a href="https://blog.fpmurphy.com/2010/06/grub2-modules.html" target="_blank" rel="external nofollow noopener noreferrer">GRUB2模块</a></li>
<li><a href="https://github.com/coreos/grub/blob/master/util/grub-install.c" target="_blank" rel="external nofollow noopener noreferrer">grub-install.c</a></li>
<li><a href="https://help.ubuntu.com/community/Grub2/Troubleshooting" target="_blank" rel="external nofollow noopener noreferrer">Grub2 /问题排查</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Secure_Boot#Set_up_PreLoader" target="_blank" rel="external nofollow noopener noreferrer">设置预加载器</a></li>
<li><a href="https://wiki.archlinux.org/index.php/REFInd#Using_PreLoader" target="_blank" rel="external nofollow noopener noreferrer">使用PreLoader</a></li>
<li><a href="https://github.com/Mic92/archlive/blob/master/build.sh#L138" target="_blank" rel="external nofollow noopener noreferrer">build.sh</a></li>
<li><a href="https://wiki.archlinux.org/index.php/archiso#Installing_packages_from_multilib" target="_blank" rel="external nofollow noopener noreferrer">阿奇索</a></li>
<li><a href="https://www.syslinux.org/wiki/index.php?title=Menu#The_simple_menu_system" target="_blank" rel="external nofollow noopener noreferrer">简单的菜单系统</a></li>
<li><a href="https://www.syslinux.org/wiki/index.php?title=Isohybrid#UEFI" target="_blank" rel="external nofollow noopener noreferrer">UEFI</a></li>
<li><a href="https://www.linuxquestions.org/questions/linux-general-1/make-uefi-bootable-live-cd-926021/" target="_blank" rel="external nofollow noopener noreferrer">制作UEFI可启动实时CD</a></li>
<li><a href="https://unix.stackexchange.com/questions/285193/what-is-the-proper-way-to-use-isolinux-with-uefi" target="_blank" rel="external nofollow noopener noreferrer">将ISOLINUX与UEFI一起使用的正确方法是什么？</a></li>
<li><a href="https://wiki.debian.org/UEFI#Booting_from_removable_media" target="_blank" rel="external nofollow noopener noreferrer">从可移动媒体引导</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GRUB#UEFI_systems" target="_blank" rel="external nofollow noopener noreferrer">UEFI系统</a></li>
<li><a href="https://www.rodsbooks.com/efi-bootloaders/installation.html" target="_blank" rel="external nofollow noopener noreferrer">管理Linux的EFI引导加载程序：EFI引导加载程序安装</a></li>
<li><a href="https://wiki.archlinux.org/index.php/syslinux#Boot_prompt" target="_blank" rel="external nofollow noopener noreferrer">例子</a></li>
<li><a href="https://forum.osdev.org/viewtopic.php?t=22169&p=178135" target="_blank" rel="external nofollow noopener noreferrer">Grub2 El-Torito CD</a></li>
<li><a href="https://forum.osdev.org/viewtopic.php?f=1&t=23766" target="_blank" rel="external nofollow noopener noreferrer">使用GRUB2创建ISO映像</a></li>
<li><a href="https://wiki.debian.org/DebianLive/MultibootISO" target="_blank" rel="external nofollow noopener noreferrer">DebianLive MultibootISO</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/grub/html_node/Images.html" target="_blank" rel="external nofollow noopener noreferrer">11个GRUB图像文件</a></li>
<li><a href="https://www.linuxquestions.org/questions/linux-software-2/stage2_eltorito-missing-884944/" target="_blank" rel="external nofollow noopener noreferrer">stage2_eltorito遗失</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/legacy/Making-a-GRUB-bootable-CD_002dROM.html" target="_blank" rel="external nofollow noopener noreferrer">3.4制作GRUB可引导CD-ROM</a></li>
<li><a href="https://unix.stackexchange.com/questions/283994/why-is-grub2-ignoring-kernel-options-when-boot-from-el-torito-on-cd" target="_blank" rel="external nofollow noopener noreferrer">从CD上的el torito引导时，grub2为什么会忽略内核选项？</a></li>
<li><a href="https://communities.vmware.com/message/2228281#2228281" target="_blank" rel="external nofollow noopener noreferrer">从CD / DVD引导UEFI无效</a></li>
<li><a href="https://communities.vmware.com/message/2583742#2583742" target="_blank" rel="external nofollow noopener noreferrer">升级到VMWS Player 12后的UEFI问题</a></li>
<li><a href="https://github.com/linuxkit/linuxkit/blob/master/tools/mkimage-iso-efi/make-efi" target="_blank" rel="external nofollow noopener noreferrer">品牌</a></li>
<li><a href="https://unix.stackexchange.com/questions/382817/uefi-bios-bootable-live-debian-stretch-amd64-with-persistence" target="_blank" rel="external nofollow noopener noreferrer">UEFI + BIOS可启动实时Debian Stretch amd64持久化</a></li>
<li><a href="https://www.syslinux.org/archives/2015-April/023381.html" target="_blank" rel="external nofollow noopener noreferrer">[syslinux] Isohybrid Wiki页面和UEFI</a></li>
</ul>
<h2 id="原文地址："><a href="#原文地址：" class="headerlink" title="原文地址："></a>原文地址：</h2><ul>
<li><a href="https://willhaley.com/blog/custom-debian-live-environment/" target="_blank" rel="external nofollow noopener noreferrer">https://willhaley.com/blog/custom-debian-live-environment/</a></li>
</ul>
]]></content>
      <categories>
        <category>live-build</category>
      </categories>
      <tags>
        <tag>live-build</tag>
      </tags>
  </entry>
  <entry>
    <title>创建一个自定义BISO+UEFI启动的Debian Live环境</title>
    <url>/archives/e8063e13.html</url>
    <content><![CDATA[<h1 id="创建一个自定义BISO-UEFI启动的Debian-Live环境（CD或USB）"><a href="#创建一个自定义BISO-UEFI启动的Debian-Live环境（CD或USB）" class="headerlink" title="创建一个自定义BISO+UEFI启动的Debian Live环境（CD或USB）"></a>创建一个自定义BISO+UEFI启动的Debian Live环境（CD或USB）</h1><p>这些是我在<strong>Ubuntu 18.04 LTS（Bionic Beaver）</strong> 64位系统上使用的步骤，用于构建可以从CD或USB引导的<strong>x86 Debian 9（Stretch）</strong>实时环境。</p>
<p>这些步骤可用于创建可启动BIOS（MBR），可启动UEFI（GPT）或可启动UEFI和BIOS的组合的实时环境。本指南的独特之处在于<strong>未使用Syslinux / Isolinux。只有Grub引导设备。</strong>这样做是为了保持一致性，并避免两者混淆（仅Syslinux / Isolinux不能完成本文中介绍的所有内容，但是Grub可以做到）。</p>
<p>以下是我的指南的替代方法，对于那些阅读本文的人来说，它们可能是更好的解决方案：<a href="https://manpages.debian.org/jessie/live-build/live-build.7.en.html" target="_blank" rel="external nofollow noopener noreferrer">live-build</a>，<a href="https://help.ubuntu.com/community/mkusb" target="_blank" rel="external nofollow noopener noreferrer">mkusb</a>，<a href="https://unetbootin.github.io/" target="_blank" rel="external nofollow noopener noreferrer">UNetbootin</a>，<a href="https://github.com/jnalley/xixer" target="_blank" rel="external nofollow noopener noreferrer">xixer</a>，<a href="https://rufus.akeo.ie/" target="_blank" rel="external nofollow noopener noreferrer">rufus</a>，<a href="https://www.pendrivelinux.com/yumi-multiboot-usb-creator/" target="_blank" rel="external nofollow noopener noreferrer">YUMI</a>，<a href="https://wiki.debian.org/Simple-CDD" target="_blank" rel="external nofollow noopener noreferrer">Simple-cdd</a>。您还应该查看<a href="https://wiki.debian.org/DebianCustomCD" target="_blank" rel="external nofollow noopener noreferrer">Debian DebianCustomCD文档，</a>因为它将比本文提供的信息多得多。</p>
<p>我写这本指南的目的更多是出于教育目的。它不一定是满足您需求的最快指南或最佳指南。希望对您有所帮助。</p>
<p><strong>警告</strong>：我已<strong>突出显示</strong>您应该在 <strong>[chroot]</strong>环境中的所有位置。小心！在本地环境而不是<a href="https://en.wikipedia.org/wiki/Chroot" target="_blank" rel="external nofollow noopener noreferrer"> chroot中</a>运行其中一些命令可能会损坏系统。</p>
<h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h1><p>安装我们需要构建环境的应用程序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    debootstrap \</span><br><span class="line">    squashfs-tools \</span><br><span class="line">    xorriso \</span><br><span class="line">    grub-pc-bin \</span><br><span class="line">    grub-efi-amd64-bin \</span><br><span class="line">    mtools</span><br></pre></td></tr></table></figure>

<p>创建一个目录，我们将在其中存储在本指南中创建的所有文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;LIVE_BOOT</span><br></pre></td></tr></table></figure>

<h1 id="引导和配置Debian"><a href="#引导和配置Debian" class="headerlink" title="引导和配置Debian"></a>引导和配置Debian</h1><p>设置基本的Debian环境。我正在使用<code>stretch</code>我的发行版和<code>i386</code>体系结构。请查阅<a href="https://www.debian.org/mirror/list" target="_blank" rel="external nofollow noopener noreferrer">debian镜像</a>列表。</p>
<p><em>如果附近有镜子，请在此命令中更改URL。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo debootstrap \</span><br><span class="line">    --arch&#x3D;i386 \</span><br><span class="line">    --variant&#x3D;minbase \</span><br><span class="line">    stretch \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;chroot \</span><br><span class="line">    http:&#x2F;&#x2F;ftp.us.debian.org&#x2F;debian&#x2F;</span><br></pre></td></tr></table></figure>

<p>Chroot到我们刚刚引导的Debian环境。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chroot $HOME&#x2F;LIVE_BOOT&#x2F;chroot</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>为您的Debian环境设置自定义主机名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;ling&quot; &gt; &#x2F;etc&#x2F;hostname</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>确定实时环境中需要哪个Linux内核。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-cache search linux-image</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>我选择了图像<code>linux-image-686</code>。我也认为这<code>live-boot</code>是必要的。<code>systemd-sys</code>（或等效项）也是提供init所必需的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    linux-image-686 \</span><br><span class="line">    live-boot \</span><br><span class="line">    systemd-sysv</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>安装您选择的程序，然后运行<code>apt-get clean</code>以节省一些空间。我使用<code>--no-install-recommends</code>以避免多余的程序包。您应该确定环境所需的内容。</p>
<p>阅读Debian的<a href="https://wiki.debian.org/ReduceDebian" target="_blank" rel="external nofollow noopener noreferrer">ReduceDebian文章，</a>以获取有关减小Debian环境大小的技巧（如果大小很重要并且您需要最小和紧凑的安装）。请注意，某些实时环境（如<a href="https://en.wikipedia.org/wiki/Tiny_Core_Linux" target="_blank" rel="external nofollow noopener noreferrer">Tiny Core Linux</a>或<a href="https://en.wikipedia.org/wiki/Puppy_Linux" target="_blank" rel="external nofollow noopener noreferrer">Puppy Linux）</a>经过专门优化，仅占很小的空间。尽管本文提供了一个相对较小的实时环境，但生成仅几十MB大小的环境仍需要付出额外的精力，而本文并未涉及。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    network-manager net-tools wireless-tools wpagui \</span><br><span class="line">    curl openssh-client \</span><br><span class="line">    blackbox xserver-xorg-core xserver-xorg xinit xterm \</span><br><span class="line">    nano &amp;&amp; \</span><br><span class="line">apt-get clean</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>设置root密码。<code>root</code>将默认为该实时环境中的唯一用户，但是您可以根据需要添加其他用户。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>退出chroot。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>创建目录，其中将包含我们的实时环境文件和暂存文件的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;LIVE_BOOT&#x2F;&#123;scratch,image&#x2F;live&#125;</span><br></pre></td></tr></table></figure>

<p>将chroot环境压缩到一个Squash文件系统中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mksquashfs \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;chroot \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;live&#x2F;filesystem.squashfs \</span><br><span class="line">    -e boot</span><br></pre></td></tr></table></figure>

<p>将内核和initramfs从中复制<code>chroot</code>到<code>live</code>目录中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp $HOME&#x2F;LIVE_BOOT&#x2F;chroot&#x2F;boot&#x2F;vmlinuz-* \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;vmlinuz &amp;&amp; \</span><br><span class="line">cp $HOME&#x2F;LIVE_BOOT&#x2F;chroot&#x2F;boot&#x2F;initrd.img-* \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;initrd</span><br></pre></td></tr></table></figure>

<p>为grub创建菜单配置文件。请注意，<code>insmod all_video</code>在我的测试中需要该行来处理我的一台计算机的<a href="https://askubuntu.com/a/857008/413290" target="_blank" rel="external nofollow noopener noreferrer">UEFI引导中的错误</a>。也许不是每个人都需要那条线，但我确实需要。</p>
<p>此配置指示Grub使用该<code>search</code>命令来推断哪个设备包含我们的实时环境。考虑到我们可以将实时环境写入可启动媒体的各种方式，这似乎是最可移植的解决方案。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;&#39;EOF&#39; &gt;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line"></span><br><span class="line">insmod all_video</span><br><span class="line"></span><br><span class="line">search --set&#x3D;root --file &#x2F;DEBIAN_CUSTOM</span><br><span class="line"></span><br><span class="line">set default&#x3D;&quot;0&quot;</span><br><span class="line">set timeout&#x3D;30</span><br><span class="line"></span><br><span class="line">menuentry &quot;Debian Live&quot; &#123;</span><br><span class="line">    linux &#x2F;vmlinuz boot&#x3D;live quiet nomodeset</span><br><span class="line">    initrd &#x2F;initrd</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>在<code>image</code>named中创建一个特殊文件<code>DEBIAN_CUSTOM</code>。该文件将用于帮助<code>Grub</code>确定哪个设备包含我们的实时文件系统。该文件名必须唯一，并且必须与我们的<code>grub.cfg</code>配置中的文件名匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;DEBIAN_CUSTOM</span><br></pre></td></tr></table></figure>

<p>您的<code>LIVE_BOOT</code>目录现在应该大致如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LIVE_BOOT&#x2F;chroot&#x2F;*tons of chroot files*</span><br><span class="line">LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;DEBIAN_CUSTOM</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;initrd</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;vmlinuz</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;live&#x2F;filesystem.squashfs</span><br></pre></td></tr></table></figure>

<h1 id="创建可启动媒体"><a href="#创建可启动媒体" class="headerlink" title="创建可启动媒体"></a>创建可启动媒体</h1><p>请注意，下面有两组<strong>单独</strong>的说明，用于为实时环境创建可启动媒体。一个进程名为<a href="https://willhaley.com/blog/custom-debian-live-environment/#create-bootable-isocd" target="_blank" rel="external nofollow noopener noreferrer">Create Bootable ISO / CD</a>，<strong>另一个进程</strong>名为<a href="https://willhaley.com/blog/custom-debian-live-environment/#create-bootable-usb" target="_blank" rel="external nofollow noopener noreferrer">Create Bootable USB</a>。</p>
<ul>
<li>在<strong>创建可启动ISO / CD</strong>指令将导致<code>.iso</code>包含我们的生活环境中的图像文件。</li>
<li>“ <strong>创建可启动USB”</strong>说明将导致我们的实时环境直接安装到USB设备上。</li>
</ul>
<p><code>.iso</code>我们使用<strong>创建可启动ISO / CD</strong>指令<strong>创建</strong>的文件可以刻录到CD-ROM（光学介质），或通过写入USB设备<code>dd</code>。允许我们<code>.iso</code>文件中这种“应收帐款”行为的功能<em>并非</em>免费提供。这个过程有点复杂，但是在许多现代的实时环境（例如Ubuntu安装<code>.iso</code>文件）中，这种行为是很常见的。</p>
<p><em>请注意，将<code>.iso</code>文件写入USB设备与将实时环境直接安装到USB设备并不相同。在我的<a href="https://willhaley.com/blog/custom-debian-live-environment/#notes" target="_blank" rel="external nofollow noopener noreferrer">笔记</a>中详细了解我的发现。</em></p>
<h2 id="创建可启动的ISO-CD"><a href="#创建可启动的ISO-CD" class="headerlink" title="创建可启动的ISO / CD"></a>创建可启动的ISO / CD</h2><p>将实时环境安装到<code>.iso</code>可以刻录到光学介质的文件中。</p>
<p>如上所述，<code>.iso</code>通过这些步骤生成的文件<strong>可以</strong>使用写入到USB设备<code>dd</code>。</p>
<p>创建一个grub UEFI映像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grub-mkstandalone \</span><br><span class="line">    --format&#x3D;x86_64-efi \</span><br><span class="line">    --output&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;bootx64.efi \</span><br><span class="line">    --locales&#x3D;&quot;&quot; \</span><br><span class="line">    --fonts&#x3D;&quot;&quot; \</span><br><span class="line">    &quot;boot&#x2F;grub&#x2F;grub.cfg&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg&quot;</span><br></pre></td></tr></table></figure>

<p>创建包含EFI引导加载程序的FAT16 UEFI引导磁盘映像。请注意，使用<code>mmd</code>和<code>mcopy</code>命令来复制名为的UEFI引导加载程序<code>bootx64.efi</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(cd $HOME&#x2F;LIVE_BOOT&#x2F;scratch &amp;&amp; \</span><br><span class="line">    dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;efiboot.img bs&#x3D;1M count&#x3D;10 &amp;&amp; \</span><br><span class="line">    mkfs.vfat efiboot.img &amp;&amp; \</span><br><span class="line">    mmd -i efiboot.img efi efi&#x2F;boot &amp;&amp; \</span><br><span class="line">    mcopy -i efiboot.img .&#x2F;bootx64.efi ::efi&#x2F;boot&#x2F;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>创建一个grub BIOS映像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grub-mkstandalone \</span><br><span class="line">    --format&#x3D;i386-pc \</span><br><span class="line">    --output&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;core.img \</span><br><span class="line">    --install-modules&#x3D;&quot;linux normal iso9660 biosdisk memdisk search tar ls&quot; \</span><br><span class="line">    --modules&#x3D;&quot;linux normal iso9660 biosdisk search&quot; \</span><br><span class="line">    --locales&#x3D;&quot;&quot; \</span><br><span class="line">    --fonts&#x3D;&quot;&quot; \</span><br><span class="line">    &quot;boot&#x2F;grub&#x2F;grub.cfg&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg&quot;</span><br></pre></td></tr></table></figure>

<p><code>cat</code>用于将可引导的Grub <code>cdboot.img</code>引导加载程序与我们的引导映像结合使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat \</span><br><span class="line">    &#x2F;usr&#x2F;lib&#x2F;grub&#x2F;i386-pc&#x2F;cdboot.img \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;core.img \</span><br><span class="line">&gt; $HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;bios.img</span><br></pre></td></tr></table></figure>

<p>生成ISO文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xorriso \</span><br><span class="line">    -as mkisofs \</span><br><span class="line">    -iso-level 3 \</span><br><span class="line">    -full-iso9660-filenames \</span><br><span class="line">    -volid &quot;DEBIAN_CUSTOM&quot; \</span><br><span class="line">    -eltorito-boot \</span><br><span class="line">        boot&#x2F;grub&#x2F;bios.img \</span><br><span class="line">        -no-emul-boot \</span><br><span class="line">        -boot-load-size 4 \</span><br><span class="line">        -boot-info-table \</span><br><span class="line">        --eltorito-catalog boot&#x2F;grub&#x2F;boot.cat \</span><br><span class="line">    --grub2-boot-info \</span><br><span class="line">    --grub2-mbr &#x2F;usr&#x2F;lib&#x2F;grub&#x2F;i386-pc&#x2F;boot_hybrid.img \</span><br><span class="line">    -eltorito-alt-boot \</span><br><span class="line">        -e EFI&#x2F;efiboot.img \</span><br><span class="line">        -no-emul-boot \</span><br><span class="line">    -append_partition 2 0xef $&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;efiboot.img \</span><br><span class="line">    -output &quot;$&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;debian-custom.iso&quot; \</span><br><span class="line">    -graft-points \</span><br><span class="line">        &quot;$&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;image&quot; \</span><br><span class="line">        &#x2F;boot&#x2F;grub&#x2F;bios.img&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;bios.img \</span><br><span class="line">        &#x2F;EFI&#x2F;efiboot.img&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;efiboot.img</span><br></pre></td></tr></table></figure>

<p>现在将ISO刻录到CD，您应该准备使用UEFI或BIOS系统从CD引导。</p>
<h2 id="创建可启动USB"><a href="#创建可启动USB" class="headerlink" title="创建可启动USB"></a>创建可启动USB</h2><p>将实时环境安装到USB设备。</p>
<p>如上所述，在安装现场环境到USB设备是<strong>不</strong>一样的书面<code>.iso</code>文件到USB设备。在这两种情况下，最终结果在大多数情况下都是相同的，但是存在一些细微的差异值得理解，并且有正当的理由，有人可能希望将实时环境直接安装到USB设备，而不是将<code>.iso</code>文件写入USB设备。 </p>
<p>我假设您在<strong>/ dev /</strong> sdz上有一个已挂载的<strong>空白</strong> USB驱动器。为了在实际的块设备中轻松进行交换，我在这些命令中使用了一个变量。<code>$disk</code></p>
<p>导出<code>disk</code>变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export disk&#x3D;&#x2F;dev&#x2F;sdz</span><br></pre></td></tr></table></figure>

<p>为USB驱动器创建一些安装点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt&#x2F;&#123;usb,efi&#125;</span><br></pre></td></tr></table></figure>

<p>使用分割USB驱动器<code>parted</code>。此命令在GPT（Guid分区表）布局中创建3个分区。一个分区用于BIOS引导记录，一个分区用于UEFI，另一个分区用于我们的Debian OS和其他实时数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo parted --script $disk \</span><br><span class="line">    mklabel gpt \</span><br><span class="line">    mkpart primary fat32 2048s 4095s \</span><br><span class="line">        name 1 BIOS \</span><br><span class="line">        set 1 bios_grub on \</span><br><span class="line">    mkpart ESP fat32 4096s 413695s \</span><br><span class="line">        name 2 EFI \</span><br><span class="line">        set 2 esp on \</span><br><span class="line">    mkpart primary fat32 413696s 100% \</span><br><span class="line">        name 3 LINUX \</span><br><span class="line">        set 3 msftdata on</span><br></pre></td></tr></table></figure>

<p>为USB设备生成一个混合MBR。注意，这是非标准的，因此可能不适用于所有系统。<a href="https://wiki.archlinux.org/index.php/Multiboot_USB_drive#Hybrid_UEFI_GPT_.2B_BIOS_GPT.2FMBR_boot" target="_blank" rel="external nofollow noopener noreferrer">我</a>在混合MBR上发现的<a href="https://tails.boum.org/blueprint/usb_install_and_upgrade/gpt/" target="_blank" rel="external nofollow noopener noreferrer">唯一</a> <a href="https://wiki.gentoo.org/wiki/Hybrid_partition_table" target="_blank" rel="external nofollow noopener noreferrer">指南</a> 表明必须使用。支持<a href="https://manpages.debian.org/unstable/gdisk/sgdisk.8.en.html" target="_blank" rel="external nofollow noopener noreferrer">不在中的</a>命令，因此该命令不容易编写脚本。用于警告的文档警告此过程是<a href="http://www.rodsbooks.com/gdisk/hybrid.html" target="_blank" rel="external nofollow noopener noreferrer">非标准的，易碎的且不受支持的</a>，但这<em>通常</em>似乎确实可以预期。它允许BIOS和UEFI从同一USB设备引导。<code>gdisk``gdisk</code> <code>sgdisk``gdisk</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gdisk $disk &lt;&lt; EOF</span><br><span class="line">r     # recovery and transformation options</span><br><span class="line">h     # make hybrid MBR</span><br><span class="line">1 2 3 # partition numbers for hybrid MBR</span><br><span class="line">N     # do not place EFI GPT (0xEE) partition first in MBR</span><br><span class="line">EF    # MBR hex code</span><br><span class="line">N     # do not set bootable flag</span><br><span class="line">EF    # MBR hex code</span><br><span class="line">N     # do not set bootable flag</span><br><span class="line">83    # MBR hex code</span><br><span class="line">Y     # set the bootable flag</span><br><span class="line">x     # extra functionality menu</span><br><span class="line">h     # recompute CHS values in protective&#x2F;hybrid MBR</span><br><span class="line">w     # write table to disk and exit</span><br><span class="line">Y     # confirm changes</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>格式化UEFI和数据分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.vfat -F32 $&#123;disk&#125;2 &amp;&amp; \</span><br><span class="line">sudo mkfs.vfat -F32 $&#123;disk&#125;3</span><br></pre></td></tr></table></figure>

<p>挂载分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount $&#123;disk&#125;2 &#x2F;mnt&#x2F;efi &amp;&amp; \</span><br><span class="line">sudo mount $&#123;disk&#125;3 &#x2F;mnt&#x2F;usb</span><br></pre></td></tr></table></figure>

<p>安装用于x86_64 UEFI引导的Grub。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo grub-install \</span><br><span class="line">    --target&#x3D;x86_64-efi \</span><br><span class="line">    --efi-directory&#x3D;&#x2F;mnt&#x2F;efi \</span><br><span class="line">    --boot-directory&#x3D;&#x2F;mnt&#x2F;usb&#x2F;boot \</span><br><span class="line">    --removable \</span><br><span class="line">    --recheck</span><br></pre></td></tr></table></figure>

<p>安装用于i386-pc引导的Grub。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo grub-install \</span><br><span class="line">    --target&#x3D;i386-pc \</span><br><span class="line">    --boot-directory&#x3D;&#x2F;mnt&#x2F;usb&#x2F;boot \</span><br><span class="line">    --recheck \</span><br><span class="line">    $disk</span><br></pre></td></tr></table></figure>

<p><code>live</code>在USB设备上创建目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt&#x2F;usb&#x2F;&#123;boot&#x2F;grub,live&#125;</span><br></pre></td></tr></table></figure>

<p>将我们先前生成的Debian实时环境文件复制到USB磁盘。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp -r $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;* &#x2F;mnt&#x2F;usb&#x2F;</span><br></pre></td></tr></table></figure>

<p>将<code>grub.cfg</code>启动配置复制到USB设备。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg \</span><br><span class="line">    &#x2F;mnt&#x2F;usb&#x2F;boot&#x2F;grub&#x2F;grub.cfg</span><br></pre></td></tr></table></figure>

<p>现在，卸下磁盘，您应该已经准备好在BIOS或UEFI系统上从磁盘引导。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umount &#x2F;mnt&#x2F;&#123;usb,efi&#125;</span><br></pre></td></tr></table></figure>

<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项 +"></a>注意事项 +</h1><h1 id="注释（Rufus支持）"><a href="#注释（Rufus支持）" class="headerlink" title="注释（Rufus支持） +"></a>注释（Rufus支持） +</h1><h1 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h1><ul>
<li><a href="https://linux.die.net/man/8/sgdisk" target="_blank" rel="external nofollow noopener noreferrer">sgdisk（8）-Linux手册页</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Multiboot_USB_drive#Hybrid_UEFI_GPT_.2B_BIOS_GPT.2FMBR_boot" target="_blank" rel="external nofollow noopener noreferrer">混合UEFI GPT + BIOS GPT / MBR引导</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GRUB#.22No_suitable_mode_found.22_error" target="_blank" rel="external nofollow noopener noreferrer">“找不到合适的模式”错误</a></li>
<li><a href="https://askubuntu.com/questions/258991/where-is-the-memtest-option-on-the-ubuntu-64-bit-live-cd" target="_blank" rel="external nofollow noopener noreferrer">Ubuntu 64位实时CD上的memtest选项在哪里？</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Remastering_the_Install_ISO" target="_blank" rel="external nofollow noopener noreferrer">重新掌握安装ISO</a></li>
<li><a href="https://help.ubuntu.com/community/UEFIBooting#Install_GRUB2_in_.28U.29EFI_systems" target="_blank" rel="external nofollow noopener noreferrer">在（U）EFI系统中安装GRUB2</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/grub/html_node/Embedded-configuration.html" target="_blank" rel="external nofollow noopener noreferrer">6.4将配置文件嵌入GRUB</a></li>
<li><a href="https://askubuntu.com/questions/643938/standalone-grub2-efi-installation-grub-cfg-placement" target="_blank" rel="external nofollow noopener noreferrer">独立的Grub2 EFI安装-grub.cfg放置？</a></li>
<li><a href="https://unix.stackexchange.com/questions/253657/actual-usage-of-grub-mkimage-config" target="_blank" rel="external nofollow noopener noreferrer">“ grub-mkimage –config =”的实际用法</a></li>
<li><a href="http://lukeluo.blogspot.com/2013/06/grub-how-to-4-memdisk-and-loopback.html" target="_blank" rel="external nofollow noopener noreferrer">GRUB2使用方法（4）：内存磁盘和回送设备</a></li>
<li><a href="https://unix.stackexchange.com/questions/267765/how-does-the-grub-efi-loader-find-the-correct-grub-cfg-and-boot-directory" target="_blank" rel="external nofollow noopener noreferrer">grub efi加载程序如何找到正确的grub.cfg和引导目录？</a></li>
<li><a href="https://www.linux.com/learn/how-rescue-non-booting-grub-2-Linux" target="_blank" rel="external nofollow noopener noreferrer">如何在Linux上救援非引导式GRUB 2</a></li>
<li><a href="https://help.ubuntu.com/community/BootFromUSB#Using_a_CD" target="_blank" rel="external nofollow noopener noreferrer">使用光盘</a></li>
<li><a href="https://superuser.com/questions/746553/boot-linux-with-extlinux-from-efi-gpt" target="_blank" rel="external nofollow noopener noreferrer">从EFI和GPT用extlinux引导Linux</a></li>
<li><a href="https://blog.fpmurphy.com/2010/06/grub2-modules.html" target="_blank" rel="external nofollow noopener noreferrer">GRUB2模块</a></li>
<li><a href="https://github.com/coreos/grub/blob/master/util/grub-install.c" target="_blank" rel="external nofollow noopener noreferrer">grub-install.c</a></li>
<li><a href="https://help.ubuntu.com/community/Grub2/Troubleshooting" target="_blank" rel="external nofollow noopener noreferrer">Grub2 /问题排查</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Secure_Boot#Set_up_PreLoader" target="_blank" rel="external nofollow noopener noreferrer">设置预加载器</a></li>
<li><a href="https://wiki.archlinux.org/index.php/REFInd#Using_PreLoader" target="_blank" rel="external nofollow noopener noreferrer">使用PreLoader</a></li>
<li><a href="https://github.com/Mic92/archlive/blob/master/build.sh#L138" target="_blank" rel="external nofollow noopener noreferrer">build.sh</a></li>
<li><a href="https://wiki.archlinux.org/index.php/archiso#Installing_packages_from_multilib" target="_blank" rel="external nofollow noopener noreferrer">阿奇索</a></li>
<li><a href="https://www.syslinux.org/wiki/index.php?title=Menu#The_simple_menu_system" target="_blank" rel="external nofollow noopener noreferrer">简单的菜单系统</a></li>
<li><a href="https://www.syslinux.org/wiki/index.php?title=Isohybrid#UEFI" target="_blank" rel="external nofollow noopener noreferrer">UEFI</a></li>
<li><a href="https://www.linuxquestions.org/questions/linux-general-1/make-uefi-bootable-live-cd-926021/" target="_blank" rel="external nofollow noopener noreferrer">制作UEFI可启动实时CD</a></li>
<li><a href="https://unix.stackexchange.com/questions/285193/what-is-the-proper-way-to-use-isolinux-with-uefi" target="_blank" rel="external nofollow noopener noreferrer">将ISOLINUX与UEFI一起使用的正确方法是什么？</a></li>
<li><a href="https://wiki.debian.org/UEFI#Booting_from_removable_media" target="_blank" rel="external nofollow noopener noreferrer">从可移动媒体引导</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GRUB#UEFI_systems" target="_blank" rel="external nofollow noopener noreferrer">UEFI系统</a></li>
<li><a href="https://www.rodsbooks.com/efi-bootloaders/installation.html" target="_blank" rel="external nofollow noopener noreferrer">管理Linux的EFI引导加载程序：EFI引导加载程序安装</a></li>
<li><a href="https://wiki.archlinux.org/index.php/syslinux#Boot_prompt" target="_blank" rel="external nofollow noopener noreferrer">例子</a></li>
<li><a href="https://forum.osdev.org/viewtopic.php?t=22169&p=178135" target="_blank" rel="external nofollow noopener noreferrer">Grub2 El-Torito CD</a></li>
<li><a href="https://forum.osdev.org/viewtopic.php?f=1&t=23766" target="_blank" rel="external nofollow noopener noreferrer">使用GRUB2创建ISO映像</a></li>
<li><a href="https://wiki.debian.org/DebianLive/MultibootISO" target="_blank" rel="external nofollow noopener noreferrer">DebianLive MultibootISO</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/grub/html_node/Images.html" target="_blank" rel="external nofollow noopener noreferrer">11个GRUB图像文件</a></li>
<li><a href="https://www.linuxquestions.org/questions/linux-software-2/stage2_eltorito-missing-884944/" target="_blank" rel="external nofollow noopener noreferrer">stage2_eltorito遗失</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/legacy/Making-a-GRUB-bootable-CD_002dROM.html" target="_blank" rel="external nofollow noopener noreferrer">3.4制作GRUB可引导CD-ROM</a></li>
<li><a href="https://unix.stackexchange.com/questions/283994/why-is-grub2-ignoring-kernel-options-when-boot-from-el-torito-on-cd" target="_blank" rel="external nofollow noopener noreferrer">从CD上的el torito引导时，grub2为什么会忽略内核选项？</a></li>
<li><a href="https://communities.vmware.com/message/2228281#2228281" target="_blank" rel="external nofollow noopener noreferrer">从CD / DVD引导UEFI无效</a></li>
<li><a href="https://communities.vmware.com/message/2583742#2583742" target="_blank" rel="external nofollow noopener noreferrer">升级到VMWS Player 12后的UEFI问题</a></li>
<li><a href="https://github.com/linuxkit/linuxkit/blob/master/tools/mkimage-iso-efi/make-efi" target="_blank" rel="external nofollow noopener noreferrer">品牌</a></li>
<li><a href="https://unix.stackexchange.com/questions/382817/uefi-bios-bootable-live-debian-stretch-amd64-with-persistence" target="_blank" rel="external nofollow noopener noreferrer">UEFI + BIOS可启动实时Debian Stretch amd64持久化</a></li>
<li><a href="https://www.syslinux.org/archives/2015-April/023381.html" target="_blank" rel="external nofollow noopener noreferrer">[syslinux] Isohybrid Wiki页面和UEFI</a></li>
</ul>
<h2 id="原文地址："><a href="#原文地址：" class="headerlink" title="原文地址："></a>原文地址：</h2><ul>
<li><a href="https://willhaley.com/blog/custom-debian-live-environment/" target="_blank" rel="external nofollow noopener noreferrer">https://willhaley.com/blog/custom-debian-live-environment/</a></li>
</ul>
]]></content>
      <categories>
        <category>live-build</category>
      </categories>
      <tags>
        <tag>live-build</tag>
      </tags>
  </entry>
  <entry>
    <title>Next 主题美化篇</title>
    <url>/archives/6807.html</url>
    <content><![CDATA[<h2 id="Next-主题的安装"><a href="#Next-主题的安装" class="headerlink" title="Next 主题的安装"></a>Next 主题的安装</h2><p>Next主题安装和闪烁之狐一样，直接将克隆到博客文件夹即可，命令如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>由于Next主题比较简洁，所以等待数秒即可安装完成。<br>由于Next主题一直在更新，所以此处加一个更新命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd themes&#x2F;next</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>安装完成后到根目录下的<code>_config.yml</code>在<code>theme：</code>后添加<code>next</code>即可。</p>
<h2 id="Next-主题的配置"><a href="#Next-主题的配置" class="headerlink" title="Next 主题的配置"></a>Next 主题的配置</h2><p>安装完成后还需要进一步配置主题</p>
<h2 id="根目录下-config-yml的配置"><a href="#根目录下-config-yml的配置" class="headerlink" title="根目录下_config.yml的配置"></a>根目录下<code>_config.yml</code>的配置</h2><h3 id="Site设置"><a href="#Site设置" class="headerlink" title="Site设置"></a>Site设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Site</span></span><br><span class="line"><span class="selector-tag">title</span>: <span class="selector-tag">LinG218</span></span><br><span class="line"><span class="selector-tag">subtitle</span>: <span class="selector-tag">LinG218-Blog</span>!</span><br><span class="line"><span class="selector-tag">description</span>: 技术宅男！</span><br><span class="line"><span class="selector-tag">keywords</span>:</span><br><span class="line"><span class="selector-tag">author</span>: <span class="selector-tag">ling</span></span><br><span class="line"><span class="selector-tag">language</span>: <span class="selector-tag">zh-CN</span></span><br></pre></td></tr></table></figure>

<p><code>title:</code> 填写标题<br><code>subtitle:</code> 填写副标题<br><code>description:</code> 简介<br><code>keywords:</code> 关键词<br><code>author:</code> 作者，文章中显示的作者名称<br><code>language:</code> 设置语言，zh-CN是简体中文，en是英语，默认是英语</p>
<h3 id="URL栏设置"><a href="#URL栏设置" class="headerlink" title="URL栏设置"></a>URL栏设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">URL</span></span><br><span class="line">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><br><span class="line">url: https://Siriusq.github.io</span><br><span class="line">root: /</span><br><span class="line"><span class="selector-tag">permalink</span>: <span class="selector-pseudo">:title.html</span></span><br><span class="line"><span class="selector-tag">permalink_defaults</span>:</span><br></pre></td></tr></table></figure>

<p><code>url:</code>填写博客在Github的二级域名，如 <code>https://ling218.github.io</code></p>
<p><code>permalink:</code>是生成博客页面时的路径名，一般是<code>:title.html</code></p>
<h3 id="翻页设置"><a href="#翻页设置" class="headerlink" title="翻页设置"></a>翻页设置</h3><p>共有两处，用于控制每一页显示多少篇博文</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Home</span> <span class="selector-tag">page</span> <span class="selector-tag">setting</span></span><br><span class="line"># path: Root path for your blogs index page. (default = '')</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># <span class="selector-tag">order_by</span>: <span class="selector-tag">Posts</span> <span class="selector-tag">order</span>. (<span class="selector-tag">Order</span> <span class="selector-tag">by</span> <span class="selector-tag">date</span> <span class="selector-tag">descending</span> <span class="selector-tag">by</span> <span class="selector-tag">default</span>)</span><br><span class="line"><span class="selector-tag">index_generator</span>:</span><br><span class="line">  path: ''</span><br><span class="line">  <span class="selector-tag">per_page</span>: 12</span><br><span class="line">  <span class="selector-tag">order_by</span>: <span class="selector-tag">-date</span></span><br><span class="line"></span><br><span class="line"># <span class="selector-tag">Pagination</span></span><br><span class="line">## <span class="selector-tag">Set</span> <span class="selector-tag">per_page</span> <span class="selector-tag">to</span> 0 <span class="selector-tag">to</span> <span class="selector-tag">disable</span> <span class="selector-tag">pagination</span></span><br><span class="line"><span class="selector-tag">per_page</span>: 12</span><br><span class="line"><span class="selector-tag">pagination_dir</span>: <span class="selector-tag">page</span></span><br></pre></td></tr></table></figure>

<p><code>per_page:</code>后设置博文数量，0代表不翻页全部平铺显示</p>
<h3 id="Deployment设置"><a href="#Deployment设置" class="headerlink" title="Deployment设置"></a>Deployment设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Deployment</span></span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line"><span class="selector-tag">deploy</span>:</span><br><span class="line">  <span class="selector-tag">type</span>: <span class="selector-tag">git</span></span><br><span class="line">  repo: git@github.com:username/username.github.io.git</span><br><span class="line">  <span class="selector-tag">branch</span>: <span class="selector-tag">master</span></span><br></pre></td></tr></table></figure>

<p><code>branch:</code>分支填写<code>master</code></p>
<p><code>repo:</code>后把<code>username</code>换成自己的用户名</p>
<h3 id="主题目录下-config-yml的配置"><a href="#主题目录下-config-yml的配置" class="headerlink" title="主题目录下_config.yml的配置"></a>主题目录下<code>_config.yml</code>的配置</h3><p><strong>文件中很多配置前面都带有<code>#</code>，删掉它就可以激活选项</strong></p>
<h3 id="网站Logo设置"><a href="#网站Logo设置" class="headerlink" title="网站Logo设置"></a>网站Logo设置</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">favicon</span>:</span><br><span class="line">  small: /images/favicon-16x16-next.png</span><br><span class="line">  medium: /images/favicon-32x32-next.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  #safari_pinned_tab: /images/logo.svg</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure>

<p>把选好的图标放入<code>\themes\next\source\images</code>目录中并改成上面的文件名即可，注意图片尺寸</p>
<h3 id="页脚设置"><a href="#页脚设置" class="headerlink" title="页脚设置"></a>页脚设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">footer</span>:</span><br><span class="line">  # <span class="selector-tag">Specify</span> <span class="selector-tag">the</span> <span class="selector-tag">date</span> <span class="selector-tag">when</span> <span class="selector-tag">the</span> <span class="selector-tag">site</span> <span class="selector-tag">was</span> <span class="selector-tag">setup</span>. <span class="selector-tag">If</span> <span class="selector-tag">not</span> <span class="selector-tag">defined</span>, <span class="selector-tag">current</span> <span class="selector-tag">year</span> <span class="selector-tag">will</span> <span class="selector-tag">be</span> <span class="selector-tag">used</span>.</span><br><span class="line">  <span class="selector-tag">since</span>: 2019</span><br><span class="line"></span><br><span class="line">  # <span class="selector-tag">Icon</span> <span class="selector-tag">between</span> <span class="selector-tag">year</span> <span class="selector-tag">and</span> <span class="selector-tag">copyright</span> <span class="selector-tag">info</span>.</span><br><span class="line">  <span class="selector-tag">icon</span>:</span><br><span class="line">    # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons/</span><br><span class="line">    # `<span class="selector-tag">heart</span>` <span class="selector-tag">is</span> <span class="selector-tag">recommended</span> <span class="selector-tag">with</span> <span class="selector-tag">animation</span> <span class="selector-tag">in</span> <span class="selector-tag">red</span> (<span class="selector-id">#ff0000</span>).</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">heart</span></span><br><span class="line">    # <span class="selector-tag">If</span> <span class="selector-tag">you</span> <span class="selector-tag">want</span> <span class="selector-tag">to</span> <span class="selector-tag">animate</span> <span class="selector-tag">the</span> <span class="selector-tag">icon</span>, <span class="selector-tag">set</span> <span class="selector-tag">it</span> <span class="selector-tag">to</span> <span class="selector-tag">true</span>.</span><br><span class="line">    <span class="selector-tag">animated</span>: <span class="selector-tag">true</span></span><br><span class="line">    # <span class="selector-tag">Change</span> <span class="selector-tag">the</span> <span class="selector-tag">color</span> <span class="selector-tag">of</span> <span class="selector-tag">icon</span>, <span class="selector-tag">using</span> <span class="selector-tag">Hex</span> <span class="selector-tag">Code</span>.</span><br><span class="line">    <span class="selector-tag">color</span>: "<span class="selector-id">#f08080</span>"</span><br><span class="line"></span><br><span class="line">  # <span class="selector-tag">If</span> <span class="selector-tag">not</span> <span class="selector-tag">defined</span>, `<span class="selector-tag">author</span>` <span class="selector-tag">from</span> <span class="selector-tag">Hexo</span> <span class="selector-tag">main</span> <span class="selector-tag">config</span> <span class="selector-tag">will</span> <span class="selector-tag">be</span> <span class="selector-tag">used</span>.</span><br><span class="line">  <span class="selector-tag">copyright</span>: <span class="selector-tag">Siriusq</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">powered</span>:</span><br><span class="line">    # <span class="selector-tag">Hexo</span> <span class="selector-tag">link</span> (<span class="selector-tag">Powered</span> <span class="selector-tag">by</span> <span class="selector-tag">Hexo</span>).</span><br><span class="line">    <span class="selector-tag">enable</span>: <span class="selector-tag">false</span></span><br><span class="line">    # <span class="selector-tag">Version</span> <span class="selector-tag">info</span> <span class="selector-tag">of</span> <span class="selector-tag">Hexo</span> <span class="selector-tag">after</span> <span class="selector-tag">Hexo</span> <span class="selector-tag">link</span> (<span class="selector-tag">vX</span><span class="selector-class">.X</span><span class="selector-class">.X</span>).</span><br><span class="line">    <span class="selector-tag">version</span>: <span class="selector-tag">false</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">theme</span>:</span><br><span class="line">    # <span class="selector-tag">Theme</span> &amp; <span class="selector-tag">scheme</span> <span class="selector-tag">info</span> <span class="selector-tag">link</span> (<span class="selector-tag">Theme</span> <span class="selector-tag">-</span> <span class="selector-tag">NexT</span><span class="selector-class">.scheme</span>).</span><br><span class="line">    <span class="selector-tag">enable</span>: <span class="selector-tag">false</span></span><br><span class="line">    # <span class="selector-tag">Version</span> <span class="selector-tag">info</span> <span class="selector-tag">of</span> <span class="selector-tag">NexT</span> <span class="selector-tag">after</span> <span class="selector-tag">scheme</span> <span class="selector-tag">info</span> (<span class="selector-tag">vX</span><span class="selector-class">.X</span><span class="selector-class">.X</span>).</span><br><span class="line">    <span class="selector-tag">version</span>: <span class="selector-tag">false</span></span><br></pre></td></tr></table></figure>

<p><code>since:</code> 表示网站成立的年份，不设置的话默认是当前年份，显示为<code>© 2019</code></p>
<p><code>icon:</code> 中设置年份后面的图标，默认是心形，想修改的话去<a href="https://fontawesome.com/" target="_blank" rel="external nofollow noopener noreferrer">Fontawesome</a>选择图标，然后再<code>name</code>栏修改</p>
<p><code>animated:</code> 用于设置心形是否跳动<code>color:</code> 用于设置图标颜色，百度对照色表查就好</p>
<p><code>copyright:</code> 显示图标后面的版权所属，也就是作者名，不设置的话默认显示根目录配置文件中的作者名</p>
<p><code>powered:</code> 后面的栏目用于设定是否显示<code>Powered by Hexo</code>以及当前主题的版本信息，显示的话设为<code>true</code></p>
<p><code>theme:</code> 后面的栏目用于设定是否显示当前主题的版本信息，显示的话将设为<code>true</code></p>
<h3 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">creative_commons</span>:</span><br><span class="line">  <span class="selector-tag">license</span>: <span class="selector-tag">by-nc-sa</span></span><br><span class="line">  <span class="selector-tag">sidebar</span>: <span class="selector-tag">true</span></span><br><span class="line">  <span class="selector-tag">post</span>: <span class="selector-tag">true</span></span><br><span class="line">  <span class="selector-tag">language</span>: <span class="selector-tag">en</span></span><br></pre></td></tr></table></figure>

<p><code>license:</code>用于设置版权标准，具体可以去<a href="https://creativecommons.org/share-your-work/licensing-types-examples" target="_blank" rel="external nofollow noopener noreferrer">Creative Commons</a>查看<br><code>sidebar:</code>用于设置是否在侧边栏显示版权标准<br><code>post:</code>用于设置是否在文章底部显示版权信息<br><code>language:</code>用于设置语言</p>
<h3 id="Github角标"><a href="#Github角标" class="headerlink" title="Github角标"></a>Github角标</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># `<span class="selector-tag">Follow</span> <span class="selector-tag">me</span> <span class="selector-tag">on</span> <span class="selector-tag">GitHub</span>` <span class="selector-tag">banner</span> <span class="selector-tag">in</span> <span class="selector-tag">the</span> <span class="selector-tag">top-right</span> <span class="selector-tag">corner</span>.</span><br><span class="line"><span class="selector-tag">github_banner</span>:</span><br><span class="line">  <span class="selector-tag">enable</span>: <span class="selector-tag">true</span></span><br><span class="line">  permalink: https://github.com/Siriusq</span><br><span class="line">  <span class="selector-tag">title</span>: <span class="selector-tag">Follow</span> <span class="selector-tag">me</span> <span class="selector-tag">on</span> <span class="selector-tag">GitHub</span></span><br></pre></td></tr></table></figure>

<p><code>enable:</code>用于设置是否在页面右上角显示Github三角标<br><code>permalink:</code>后面填写你的Github地址<br><code>title:</code>用于设置鼠标移动到图标后显示的文字</p>
<h3 id="侧边栏菜单设置"><a href="#侧边栏菜单设置" class="headerlink" title="侧边栏菜单设置"></a>侧边栏菜单设置</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">menu</span>:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  switch_lang: /en || language</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure>

<p><code>||</code>前表示页面的地址，后面表示显示的图标名称<br><code>about:</code>用于设置<code>关于</code>页面，没有的话在Git bash中使用<code>hexo new page &quot;about&quot;</code>创建，然后打开<code>\source\about\index.md</code>就可以编写了<br><code>tags:</code>用于设置<code>标签</code>功能，同样使用命令<code>hexo new page &quot;tags&quot;</code>创建，然后打开<code>source\tags\index.md</code>并在日期后面添加一行<code>type: &quot;tags&quot;</code>，写博文时在顶部加上一栏<code>tags: []</code>即可设置标签，多个标签中间使用<code>,</code>分隔<br><code>archieves:</code>用于设置归档页面<br><code>categories:</code>用于设置目录页面，编辑博文时在顶部加上一栏<code>categories:</code>就可以为博文设置所属目录</p>
<h3 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h3><p>Next有四个主题可供选择</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Schemes</span></span><br><span class="line"><span class="selector-id">#scheme</span>: <span class="selector-tag">Muse</span></span><br><span class="line"><span class="selector-id">#scheme</span>: <span class="selector-tag">Mist</span></span><br><span class="line"><span class="selector-id">#scheme</span>: <span class="selector-tag">Pisces</span></span><br><span class="line"><span class="selector-tag">scheme</span>: <span class="selector-tag">Gemini</span></span><br></pre></td></tr></table></figure>

<p>把想要的主题前面的<code>#</code>删掉即可</p>
<h3 id="社交网站链接设置"><a href="#社交网站链接设置" class="headerlink" title="社交网站链接设置"></a>社交网站链接设置</h3><p>在侧边栏可以设置显示社交链接，让更多人了解自己</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Social</span> <span class="selector-tag">Links</span></span><br><span class="line"># Usage: `Key: permalink || icon`</span><br><span class="line"># <span class="selector-tag">Key</span> <span class="selector-tag">is</span> <span class="selector-tag">the</span> <span class="selector-tag">link</span> <span class="selector-tag">label</span> <span class="selector-tag">showing</span> <span class="selector-tag">to</span> <span class="selector-tag">end</span> <span class="selector-tag">users</span>.</span><br><span class="line"># Value before `||` delimeter is the target permalink.</span><br><span class="line"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span><br><span class="line"><span class="selector-tag">social</span>:</span><br><span class="line">  GitHub: https://github.com/Siriusq || github</span><br><span class="line">  <span class="selector-tag">E-Mail</span>: <span class="selector-tag">mailto</span><span class="selector-pseudo">:siriuskevin</span><span class="keyword">@foxmail</span>.com || envelope</span><br><span class="line">  #<span class="attribute">Weibo:</span> <span class="attribute">https:</span>//weibo.com/yourname || weibo</span><br><span class="line">  #<span class="attribute">Google:</span> <span class="attribute">https:</span>//plus.google.com/yourname || google</span><br><span class="line">  #<span class="attribute">Twitter:</span> <span class="attribute">https:</span>//twitter.com/yourname || twitter</span><br><span class="line">  #FB <span class="attribute">Page:</span> <span class="attribute">https:</span>//www.facebook.com/yourname || facebook</span><br><span class="line">  #VK <span class="attribute">Group:</span> <span class="attribute">https:</span>//vk.com/yourname || vk</span><br><span class="line">  #<span class="attribute">StackOverflow:</span> <span class="attribute">https:</span>//stackoverflow.com/yourname || stack-overflow</span><br><span class="line">  #<span class="attribute">YouTube:</span> <span class="attribute">https:</span>//youtube.com/yourname || youtube</span><br><span class="line">  #<span class="attribute">Instagram:</span> <span class="attribute">https:</span>//instagram.com/yourname || instagram</span><br><span class="line">  #<span class="attribute">Skype:</span> <span class="attribute">skype:</span>yourname?call|chat || skype</span><br></pre></td></tr></table></figure>

<p>在<code>||</code>前输入你社交主页的链接即可，后面用于设置图标<br><code>E-mail:</code>栏格式为<code>mailto:邮箱地址</code>，在win10系统可以调用系统邮件服务自动填写收件人</p>
<h3 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h3><p>用于设置是否在侧边栏显示头像</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Sidebar</span> <span class="selector-tag">Avatar</span></span><br><span class="line"><span class="selector-tag">avatar</span>:</span><br><span class="line">  # In theme directory (source/images): /images/avatar.gif</span><br><span class="line">  # In site directory (source/uploads): /uploads/avatar.gif</span><br><span class="line">  # <span class="selector-tag">You</span> <span class="selector-tag">can</span> <span class="selector-tag">also</span> <span class="selector-tag">use</span> <span class="selector-tag">other</span> <span class="selector-tag">linking</span> <span class="selector-tag">images</span>.</span><br><span class="line">  url: /images/avatar.gif</span><br><span class="line">  # <span class="selector-tag">If</span> <span class="selector-tag">true</span>, <span class="selector-tag">the</span> <span class="selector-tag">avatar</span> <span class="selector-tag">would</span> <span class="selector-tag">be</span> <span class="selector-tag">dispalyed</span> <span class="selector-tag">in</span> <span class="selector-tag">circle</span>.</span><br><span class="line">  <span class="selector-tag">rounded</span>: <span class="selector-tag">true</span></span><br><span class="line">  # <span class="selector-tag">The</span> <span class="selector-tag">value</span> <span class="selector-tag">of</span> <span class="selector-tag">opacity</span> <span class="selector-tag">should</span> <span class="selector-tag">be</span> <span class="selector-tag">choose</span> <span class="selector-tag">from</span> 0 <span class="selector-tag">to</span> 1 <span class="selector-tag">to</span> <span class="selector-tag">set</span> <span class="selector-tag">the</span> <span class="selector-tag">opacity</span> <span class="selector-tag">of</span> <span class="selector-tag">the</span> <span class="selector-tag">avatar</span>.</span><br><span class="line">  <span class="selector-tag">opacity</span>: 1</span><br><span class="line">  # <span class="selector-tag">If</span> <span class="selector-tag">true</span>, <span class="selector-tag">the</span> <span class="selector-tag">avatar</span> <span class="selector-tag">would</span> <span class="selector-tag">be</span> <span class="selector-tag">rotated</span> <span class="selector-tag">with</span> <span class="selector-tag">the</span> <span class="selector-tag">cursor</span>.</span><br><span class="line">  <span class="selector-tag">rotated</span>: <span class="selector-tag">true</span></span><br></pre></td></tr></table></figure>

<p>在<code>url:</code>后填写头像图片的路径，默认在<code>\themes\next\source\images</code>中<br><code>rounded:</code>用于设置是否显示圆形头像<br><code>opacity:</code>用于设置头像透明度，1为不透明<br><code>rotated:</code>用于设置头像鼠标移动到头像上时头像是否旋转</p>
<h3 id="侧边栏目录设置"><a href="#侧边栏目录设置" class="headerlink" title="侧边栏目录设置"></a>侧边栏目录设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Table</span> <span class="selector-tag">Of</span> <span class="selector-tag">Contents</span> <span class="selector-tag">in</span> <span class="selector-tag">the</span> <span class="selector-tag">Sidebar</span></span><br><span class="line"><span class="selector-tag">toc</span>:</span><br><span class="line">  <span class="selector-tag">enable</span>: <span class="selector-tag">true</span></span><br><span class="line">  # <span class="selector-tag">Automatically</span> <span class="selector-tag">add</span> <span class="selector-tag">list</span> <span class="selector-tag">number</span> <span class="selector-tag">to</span> <span class="selector-tag">toc</span>.</span><br><span class="line">  <span class="selector-tag">number</span>: <span class="selector-tag">true</span></span><br><span class="line">  # <span class="selector-tag">If</span> <span class="selector-tag">true</span>, <span class="selector-tag">all</span> <span class="selector-tag">words</span> <span class="selector-tag">will</span> <span class="selector-tag">placed</span> <span class="selector-tag">on</span> <span class="selector-tag">next</span> <span class="selector-tag">lines</span> <span class="selector-tag">if</span> <span class="selector-tag">header</span> <span class="selector-tag">width</span> <span class="selector-tag">longer</span> <span class="selector-tag">then</span> <span class="selector-tag">sidebar</span> <span class="selector-tag">width</span>.</span><br><span class="line">  <span class="selector-tag">wrap</span>: <span class="selector-tag">false</span></span><br><span class="line">  # <span class="selector-tag">If</span> <span class="selector-tag">true</span>, <span class="selector-tag">all</span> <span class="selector-tag">level</span> <span class="selector-tag">of</span> <span class="selector-tag">TOC</span> <span class="selector-tag">in</span> <span class="selector-tag">a</span> <span class="selector-tag">post</span> <span class="selector-tag">will</span> <span class="selector-tag">be</span> <span class="selector-tag">displayed</span>, <span class="selector-tag">rather</span> <span class="selector-tag">than</span> <span class="selector-tag">the</span> <span class="selector-tag">activated</span> <span class="selector-tag">part</span> <span class="selector-tag">of</span> <span class="selector-tag">it</span>.</span><br><span class="line">  <span class="selector-tag">expand_all</span>: <span class="selector-tag">false</span></span><br><span class="line">  # <span class="selector-tag">Maximum</span> <span class="selector-tag">heading</span> <span class="selector-tag">depth</span> <span class="selector-tag">of</span> <span class="selector-tag">generated</span> <span class="selector-tag">toc</span>. <span class="selector-tag">You</span> <span class="selector-tag">can</span> <span class="selector-tag">set</span> <span class="selector-tag">it</span> <span class="selector-tag">in</span> <span class="selector-tag">one</span> <span class="selector-tag">post</span> <span class="selector-tag">through</span> `<span class="selector-tag">toc_max_depth</span>` <span class="selector-tag">in</span> <span class="selector-tag">Front</span> <span class="selector-tag">Matter</span>.</span><br><span class="line">  <span class="selector-tag">max_depth</span>: 6</span><br></pre></td></tr></table></figure>

<p><code>enable:</code>用于设置是否开启侧边栏目录<br><code>number:</code>用于设置自动编号<br><code>wrap:</code>用于设置当标题长度超过侧边栏长度时是否自动换行<br><code>expand_all:</code>用于设置是否展开全部目录，否的话会自动展开正在看的那部分<br><code>max_depth:</code>用于设置自动生成目录的最大深度，也就是生成到几级标题</p>
<h3 id="侧边栏显示设置"><a href="#侧边栏显示设置" class="headerlink" title="侧边栏显示设置"></a>侧边栏显示设置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">sidebar</span>:</span><br><span class="line">  # Sidebar Position, available values: left | right (only for Pisces | Gemini).</span><br><span class="line">  <span class="selector-id">#position</span>: <span class="selector-tag">left</span></span><br><span class="line">  <span class="selector-tag">position</span>: <span class="selector-tag">right</span></span><br><span class="line"></span><br><span class="line">  # <span class="selector-tag">Manual</span> <span class="selector-tag">define</span> <span class="selector-tag">the</span> <span class="selector-tag">sidebar</span> <span class="selector-tag">width</span>. <span class="selector-tag">If</span> <span class="selector-tag">commented</span>, <span class="selector-tag">will</span> <span class="selector-tag">be</span> <span class="selector-tag">default</span> <span class="selector-tag">for</span>:</span><br><span class="line">  # Muse | Mist: 320</span><br><span class="line">  # Pisces | Gemini: 240</span><br><span class="line">  <span class="selector-tag">width</span>: 320</span><br><span class="line"></span><br><span class="line">  # Sidebar Display, available values (only for Muse | Mist):</span><br><span class="line">  #  <span class="selector-tag">-</span> <span class="selector-tag">post</span>    <span class="selector-tag">expand</span> <span class="selector-tag">on</span> <span class="selector-tag">posts</span> <span class="selector-tag">automatically</span>. <span class="selector-tag">Default</span>.</span><br><span class="line">  #  <span class="selector-tag">-</span> <span class="selector-tag">always</span>  <span class="selector-tag">expand</span> <span class="selector-tag">for</span> <span class="selector-tag">all</span> <span class="selector-tag">pages</span> <span class="selector-tag">automatically</span>.</span><br><span class="line">  #  <span class="selector-tag">-</span> <span class="selector-tag">hide</span>    <span class="selector-tag">expand</span> <span class="selector-tag">only</span> <span class="selector-tag">when</span> <span class="selector-tag">click</span> <span class="selector-tag">on</span> <span class="selector-tag">the</span> <span class="selector-tag">sidebar</span> <span class="selector-tag">toggle</span> <span class="selector-tag">icon</span>.</span><br><span class="line">  #  <span class="selector-tag">-</span> <span class="selector-tag">remove</span>  <span class="selector-tag">totally</span> <span class="selector-tag">remove</span> <span class="selector-tag">sidebar</span> <span class="selector-tag">including</span> <span class="selector-tag">sidebar</span> <span class="selector-tag">toggle</span>.</span><br><span class="line">  <span class="selector-tag">display</span>: <span class="selector-tag">post</span></span><br><span class="line"></span><br><span class="line">  # Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span><br><span class="line">  <span class="selector-tag">offset</span>: 12</span><br><span class="line">  # Enable sidebar on narrow view (only for Muse | Mist).</span><br><span class="line">  <span class="selector-tag">onmobile</span>: <span class="selector-tag">false</span></span><br><span class="line">  # Click any blank part of the page to close sidebar (only for Muse | Mist).</span><br><span class="line">  <span class="selector-tag">dimmer</span>: <span class="selector-tag">false</span></span><br></pre></td></tr></table></figure>

<p><code>position:</code>用于设置侧边栏在左边还是右边，把要选择的位置前面的<code>#</code>去掉再把另一个前面加上<code>#</code>即可，这个选项只对<code>Pisces</code>和<code>Gemini</code>两个主题起作用<br><code>width:</code>用于设置侧边栏的宽度，默认<code>Muse</code>和<code>Mist</code>是320,<code>Pisces</code>和<code>Gemini</code>是240<br><code>display:</code>用于设置侧边栏的显示方式，只对<code>Muse</code>和<code>Mist</code>两个主题起作用，可以挨个试一下<br><code>offset:</code>用于设置侧边栏距离顶部介绍的距离，只对<code>Pisces</code>和<code>Gemini</code>两个主题起作用<br><code>onmobile:</code>用于设置是否在手机等宽度较小的设备上显示侧边栏，只对<code>Muse</code>和<code>Mist</code>两个主题起作用<br><code>dimmer:</code>用于设置点击屏幕空白处是否关闭侧边栏，同样只对<code>Muse</code>和<code>Mist</code>两个主题起作用</p>
<h3 id="返回顶部按钮"><a href="#返回顶部按钮" class="headerlink" title="返回顶部按钮"></a>返回顶部按钮</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">back2top</span>:</span><br><span class="line">  <span class="selector-tag">enable</span>: <span class="selector-tag">true</span></span><br><span class="line">  # <span class="selector-tag">Back</span> <span class="selector-tag">to</span> <span class="selector-tag">top</span> <span class="selector-tag">in</span> <span class="selector-tag">sidebar</span>.</span><br><span class="line">  <span class="selector-tag">sidebar</span>: <span class="selector-tag">true</span></span><br><span class="line">  # <span class="selector-tag">Scroll</span> <span class="selector-tag">percent</span> <span class="selector-tag">label</span> <span class="selector-tag">in</span> <span class="selector-tag">b2t</span> <span class="selector-tag">button</span>.</span><br><span class="line">  <span class="selector-tag">scrollpercent</span>: <span class="selector-tag">true</span></span><br></pre></td></tr></table></figure>

<p><code>enable:</code>用于设置是否开启回到顶部按钮<br><code>sidebar:</code>用于设置是否将按钮放到侧边栏中<br><code>scrollpercent:</code>用于设置是否显示阅读进度百分比</p>
<h3 id="开启阅读全文选项"><a href="#开启阅读全文选项" class="headerlink" title="开启阅读全文选项"></a>开启<code>阅读全文</code>选项</h3><p>用搜索找到这一段并把<code>read_more_btn:</code>设为<code>true</code>即可</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Read</span> <span class="selector-tag">more</span> <span class="selector-tag">button</span></span><br><span class="line"># <span class="selector-tag">If</span> <span class="selector-tag">true</span>, <span class="selector-tag">the</span> <span class="selector-tag">read</span> <span class="selector-tag">more</span> <span class="selector-tag">button</span> <span class="selector-tag">would</span> <span class="selector-tag">be</span> <span class="selector-tag">displayed</span> <span class="selector-tag">in</span> <span class="selector-tag">excerpt</span> <span class="selector-tag">section</span>.</span><br><span class="line"><span class="selector-tag">read_more_btn</span>: <span class="selector-tag">true</span></span><br></pre></td></tr></table></figure>

<p>下面这一段用于设置自动生成<code>阅读全文</code>选项</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Automatically</span> <span class="selector-tag">Excerpt</span> (<span class="selector-tag">Not</span> <span class="selector-tag">recommend</span>).</span><br><span class="line"># <span class="selector-tag">Use</span> &lt;!<span class="selector-tag">--</span> <span class="selector-tag">more</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">in</span> <span class="selector-tag">the</span> <span class="selector-tag">post</span> <span class="selector-tag">to</span> <span class="selector-tag">control</span> <span class="selector-tag">excerpt</span> <span class="selector-tag">accurately</span>.</span><br><span class="line"><span class="selector-tag">auto_excerpt</span>:</span><br><span class="line">  <span class="selector-tag">enable</span>: <span class="selector-tag">false</span></span><br><span class="line">  <span class="selector-tag">length</span>: 150</span><br></pre></td></tr></table></figure>

<p><code>length</code>表示截止到的字符长度</p>
<p>这一段用于设置自动跳转到<code>阅读全文</code>选项之后的位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Automatically</span> <span class="selector-tag">scroll</span> <span class="selector-tag">page</span> <span class="selector-tag">to</span> <span class="selector-tag">section</span> <span class="selector-tag">which</span> <span class="selector-tag">is</span> <span class="selector-tag">under</span> &lt;!<span class="selector-tag">--</span> <span class="selector-tag">more</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">mark</span>.</span><br><span class="line"><span class="selector-tag">scroll_to_more</span>: <span class="selector-tag">true</span></span><br></pre></td></tr></table></figure>

<p>设置完成后，在文章内加入<code>&lt;!--more--&gt;</code>字段就可以在首页隐去剩下的文字并显示<code>阅读全文</code> 按钮了</p>
<h3 id="代码块复制按钮"><a href="#代码块复制按钮" class="headerlink" title="代码块复制按钮"></a>代码块复制按钮</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">codeblock</span>:</span><br><span class="line">  # <span class="selector-tag">Manual</span> <span class="selector-tag">define</span> <span class="selector-tag">the</span> <span class="selector-tag">border</span> <span class="selector-tag">radius</span> <span class="selector-tag">in</span> <span class="selector-tag">codeblock</span>, <span class="selector-tag">leave</span> <span class="selector-tag">it</span> <span class="selector-tag">blank</span> <span class="selector-tag">for</span> <span class="selector-tag">the</span> <span class="selector-tag">default</span> <span class="selector-tag">value</span>: 1</span><br><span class="line">  <span class="selector-tag">border_radius</span>:</span><br><span class="line">  # <span class="selector-tag">Add</span> <span class="selector-tag">copy</span> <span class="selector-tag">button</span> <span class="selector-tag">on</span> <span class="selector-tag">codeblock</span></span><br><span class="line">  <span class="selector-tag">copy_button</span>:</span><br><span class="line">    <span class="selector-tag">enable</span>: <span class="selector-tag">true</span></span><br><span class="line">    # <span class="selector-tag">Show</span> <span class="selector-tag">text</span> <span class="selector-tag">copy</span> <span class="selector-tag">result</span></span><br><span class="line">    <span class="selector-tag">show_result</span>: <span class="selector-tag">true</span></span><br><span class="line">    # Style: only 'flat' is currently available, leave it blank if you prefer default theme</span><br><span class="line">    <span class="selector-tag">style</span>:</span><br></pre></td></tr></table></figure>

<p><code>enable：</code>用于开启代码块右上角的复制按钮<br><code>show_result:</code>用于设置是否显示复制成功提示</p>
<h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Reward</span> (<span class="selector-tag">Donate</span>)</span><br><span class="line"><span class="selector-tag">reward_settings</span>:</span><br><span class="line">  # <span class="selector-tag">If</span> <span class="selector-tag">true</span>, <span class="selector-tag">reward</span> <span class="selector-tag">would</span> <span class="selector-tag">be</span> <span class="selector-tag">displayed</span> <span class="selector-tag">in</span> <span class="selector-tag">every</span> <span class="selector-tag">article</span> <span class="selector-tag">by</span> <span class="selector-tag">default</span>.</span><br><span class="line">  # You can show or hide reward in a specific article throuth `reward: true | false` in Front Matter.</span><br><span class="line">  <span class="selector-tag">enable</span>: <span class="selector-tag">false</span></span><br><span class="line">  <span class="selector-tag">animation</span>: <span class="selector-tag">false</span></span><br><span class="line">  <span class="selector-id">#comment</span>: <span class="selector-tag">Donate</span> <span class="selector-tag">comment</span> <span class="selector-tag">here</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">reward</span>:</span><br><span class="line">  #wechatpay: /images/wechatpay.png</span><br><span class="line">  #alipay: /images/alipay.png</span><br><span class="line">  #bitcoin: /images/bitcoin.png</span><br></pre></td></tr></table></figure>

<p><code>enable:</code>用于设置是否在文章末尾显示打赏按钮<br><code>animation:</code>用于设置打上按钮是否显示动画<br><code>reward:</code>后面的选项去掉前面的<code>#</code>即可开启对应的打赏，记得替换成自己的图片，路径在<code>\themes\next\source\images</code></p>
<h3 id="代码块高亮主题"><a href="#代码块高亮主题" class="headerlink" title="代码块高亮主题"></a>代码块高亮主题</h3><p>Next主题内置了tomorrow代码高亮主题，一共有五个，可以去<a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="external nofollow noopener noreferrer">Tomorrow</a>查看预览效果，在下面的<code>highlight_theme:</code>中改成自己想要的即可</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Code</span> <span class="selector-tag">Highlight</span> <span class="selector-tag">theme</span></span><br><span class="line"># Available values: normal | night | night eighties | night blue | night bright</span><br><span class="line"># https://github.com/chriskempson/tomorrow-theme</span><br><span class="line"><span class="selector-tag">highlight_theme</span>: <span class="selector-tag">night</span></span><br></pre></td></tr></table></figure>



<h3 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h3><p>在左上角显示一个书签按钮可以跳转到上一次设置书签的位置<br>首先执行命令<code>git clone https://github.com/theme-next/theme-next-bookmark.git source/lib/bookmark</code>安装<a href="https://github.com/theme-next/theme-next-bookmark" target="_blank" rel="external nofollow noopener noreferrer">bookmark</a>插件<br>然后在下面的选项中将<code>enable:</code>设置为<code>true</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Bookmark</span> <span class="selector-tag">Support</span></span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-bookmark</span><br><span class="line"><span class="selector-tag">bookmark</span>:</span><br><span class="line">  <span class="selector-tag">enable</span>: <span class="selector-tag">true</span></span><br><span class="line">  # <span class="selector-tag">If</span> <span class="selector-tag">auto</span>, <span class="selector-tag">save</span> <span class="selector-tag">the</span> <span class="selector-tag">reading</span> <span class="selector-tag">position</span> <span class="selector-tag">when</span> <span class="selector-tag">closing</span> <span class="selector-tag">the</span> <span class="selector-tag">page</span> <span class="selector-tag">or</span> <span class="selector-tag">clicking</span> <span class="selector-tag">the</span> <span class="selector-tag">bookmark-icon</span>.</span><br><span class="line">  # <span class="selector-tag">If</span> <span class="selector-tag">manual</span>, <span class="selector-tag">only</span> <span class="selector-tag">save</span> <span class="selector-tag">it</span> <span class="selector-tag">by</span> <span class="selector-tag">clicking</span> <span class="selector-tag">the</span> <span class="selector-tag">bookmark-icon</span>.</span><br><span class="line">  <span class="selector-tag">save</span>: <span class="selector-tag">auto</span></span><br></pre></td></tr></table></figure>



<h3 id="开启RSS"><a href="#开启RSS" class="headerlink" title="开启RSS"></a>开启RSS</h3><p>话说RSS好像也没什么人用了。。。。。。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在博客根目录执行下面的命令安装RSS插件</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>打开博客根目录的配置文件<code>_config.yml</code>并在末尾添加下列代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">RSS</span>订阅支持</span><br><span class="line"><span class="selector-tag">plugin</span>:</span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">hexo-generator-feed</span></span><br><span class="line"></span><br><span class="line"># <span class="selector-tag">Feed</span> <span class="selector-tag">Atom</span></span><br><span class="line"><span class="selector-tag">feed</span>:</span><br><span class="line"><span class="selector-tag">type</span>: <span class="selector-tag">atom</span></span><br><span class="line"><span class="selector-tag">path</span>: <span class="selector-tag">atom</span><span class="selector-class">.xml</span></span><br><span class="line"><span class="selector-tag">limit</span>: 20</span><br></pre></td></tr></table></figure>

<h3 id="页面搜索功能"><a href="#页面搜索功能" class="headerlink" title="页面搜索功能"></a>页面搜索功能</h3><p>开启站内搜索功能方便快速定位</p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>执行下列命令安装插件</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>打开Next主题的配置文件<code>_config.yml</code>并搜索<code>local_search</code>,修改为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Local</span> <span class="selector-tag">search</span></span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br><span class="line"><span class="selector-tag">local_search</span>:</span><br><span class="line">  <span class="selector-tag">enable</span>: <span class="selector-tag">true</span></span><br><span class="line">  # <span class="selector-tag">If</span> <span class="selector-tag">auto</span>, <span class="selector-tag">trigger</span> <span class="selector-tag">search</span> <span class="selector-tag">by</span> <span class="selector-tag">changing</span> <span class="selector-tag">input</span>.</span><br><span class="line">  # <span class="selector-tag">If</span> <span class="selector-tag">manual</span>, <span class="selector-tag">trigger</span> <span class="selector-tag">search</span> <span class="selector-tag">by</span> <span class="selector-tag">pressing</span> <span class="selector-tag">enter</span> <span class="selector-tag">key</span> <span class="selector-tag">or</span> <span class="selector-tag">search</span> <span class="selector-tag">button</span>.</span><br><span class="line">  <span class="selector-tag">trigger</span>: <span class="selector-tag">auto</span></span><br><span class="line">  # <span class="selector-tag">Show</span> <span class="selector-tag">top</span> <span class="selector-tag">n</span> <span class="selector-tag">results</span> <span class="selector-tag">per</span> <span class="selector-tag">article</span>, <span class="selector-tag">show</span> <span class="selector-tag">all</span> <span class="selector-tag">results</span> <span class="selector-tag">by</span> <span class="selector-tag">setting</span> <span class="selector-tag">to</span> <span class="selector-tag">-1</span></span><br><span class="line">  <span class="selector-tag">top_n_per_article</span>: 1</span><br><span class="line">  # <span class="selector-tag">Unescape</span> <span class="selector-tag">html</span> <span class="selector-tag">strings</span> <span class="selector-tag">to</span> <span class="selector-tag">the</span> <span class="selector-tag">readable</span> <span class="selector-tag">one</span>.</span><br><span class="line">  <span class="selector-tag">unescape</span>: <span class="selector-tag">false</span></span><br></pre></td></tr></table></figure>



<h2 id="Next-主题深度美化"><a href="#Next-主题深度美化" class="headerlink" title="Next 主题深度美化"></a>Next 主题深度美化</h2><h2 id="顶部阅读进度条"><a href="#顶部阅读进度条" class="headerlink" title="顶部阅读进度条"></a>顶部阅读进度条</h2><p>在博文页面顶部添加<a href="https://github.com/theme-next/theme-next-reading-progress" target="_blank" rel="external nofollow noopener noreferrer">Reading Progress</a>进度条，表示阅读进度，Next主题已内置配置文件</p>
<h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>切换到Next主题文件夹</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br></pre></td></tr></table></figure>

<p>安装模块到<code>source/lib</code>文件夹</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-reading-progress source/lib/reading_progress</span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>打开Next主题路径下的配置文件<code>_config.yml</code>，搜索<code>reading_progress</code>定位到如下代码并将<code>enable:</code>设置为<code>true</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Reading</span> <span class="selector-tag">progress</span> <span class="selector-tag">bar</span></span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-reading-progress</span><br><span class="line"><span class="selector-tag">reading_progress</span>:</span><br><span class="line">  <span class="selector-tag">enable</span>: <span class="selector-tag">true</span></span><br><span class="line">  <span class="selector-tag">color</span>: "<span class="selector-id">#ffc0cb</span>" # 调整线条颜色</span><br><span class="line">  <span class="selector-tag">height</span>: 2<span class="selector-tag">px</span> # 调整线条高度</span><br></pre></td></tr></table></figure>

<p>线条颜色可以在<a href="http://www.atool9.com/colorpicker.php" target="_blank" rel="external nofollow noopener noreferrer">ATOOL</a>查询颜色代码直接修改，默认颜色是青色，我修改的是粉色<br>顶部阅读进度条可能会和加载条重合，可以通过修改线条高度覆盖，我的线条高度设置成了<code>3px</code></p>
<h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>切换到安装目录</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next/source/lib/reading_progress</span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>



<h2 id="加载条"><a href="#加载条" class="headerlink" title="加载条"></a>加载条</h2><p>用于在网页加载的过程中显示加载进度，Next主题已支持<a href="https://github.com/theme-next/theme-next-pace" target="_blank" rel="external nofollow noopener noreferrer">PACE</a>功能<br>有多种加载动画可选</p>
<ul>
<li>pace-theme-big-counter</li>
<li>pace-theme-bounce</li>
<li>pace-theme-barber-shop</li>
<li>pace-theme-center-atom</li>
<li>pace-theme-center-circle</li>
<li>pace-theme-center-radar</li>
<li>pace-theme-center-simple</li>
<li>pace-theme-corner-indicator</li>
<li>pace-theme-fill-left</li>
<li>pace-theme-flash</li>
<li>pace-theme-loading-bar</li>
<li>pace-theme-mac-osx</li>
<li>pace-theme-minimal</li>
</ul>
<h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><p>切换到Next主题文件夹</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br></pre></td></tr></table></figure>

<p>安装模块到<code>source/lib</code>文件夹</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-pace source/lib/pace</span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>打开Next主题路径下的配置文件<code>_config.yml</code>，搜索<code>pace</code>定位到如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># Progress bar in the top during page loading.</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-pace</span><br><span class="line">pace: <span class="literal">true</span></span><br><span class="line"># Themes list:</span><br><span class="line"># pace-theme-big-counter | pace-theme-bounce | pace-theme-barber-shop | pace-theme-center-atom</span><br><span class="line"># pace-theme-center-circle | pace-theme-center-radar | pace-theme-center-simple | pace-theme-corner-indicator</span><br><span class="line"># pace-theme-fill-left | pace-theme-flash | pace-theme-loading-bar | pace-theme-mac-osx | pace-theme-minimal</span><br><span class="line">pace_theme: pace-theme-flash</span><br></pre></td></tr></table></figure>

<p>将<code>pace:</code>设置为<code>true</code><br>将<code>pace_theme:</code>设置为上面<code>Themes list:</code>中的一种，主题样式可以在<a href="https://github.hubspot.com/pace/docs/welcome/" target="_blank" rel="external nofollow noopener noreferrer">PACE</a>查看</p>
<h3 id="调整颜色"><a href="#调整颜色" class="headerlink" title="调整颜色"></a>调整颜色</h3><p>为了让进度条和主题背景相匹配，可以在<code>./themes/next/source/lib/pace</code>中找到相应主题的css文件并修改颜色配置<br>下面代码以<code>pace-theme-flash.min.css</code>示例</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pace</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">  <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">  <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace-inactive</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffc0cb</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-progress-inner</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#ffc0cb</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#ffc0cb</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1.0</span>;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">  <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">  <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-activity</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">2px</span> transparent;</span><br><span class="line">  <span class="attribute">border-top-color</span>: <span class="number">#ffc0cb</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#ffc0cb</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">-webkit-animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">  <span class="attribute">-moz-animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">  <span class="attribute">-ms-animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">  <span class="attribute">-o-animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> pace-spinner &#123;</span><br><span class="line">  0% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  100% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> pace-spinner &#123;</span><br><span class="line">  0% &#123; <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  100% &#123; <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-o-keyframes</span> pace-spinner &#123;</span><br><span class="line">  0% &#123; <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  100% &#123; <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-ms-keyframes</span> pace-spinner &#123;</span><br><span class="line">  0% &#123; <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  100% &#123; <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> pace-spinner &#123;</span><br><span class="line">  0% &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  100% &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用搜索功能搜索<code>#</code>,定位到颜色设置，上述代码中一共有5处，颜色替换方法如下</p>
<ul>
<li>在<a href="http://www.atool9.com/colorpicker.php" target="_blank" rel="external nofollow noopener noreferrer">ATOOL</a>查询颜色代码直接修改</li>
<li>使用<code>Visual Studio Code</code>安装css插件直接点击<code>#</code>修改颜色</li>
<li>前往<a href="https://github.hubspot.com/pace/docs/welcome/" target="_blank" rel="external nofollow noopener noreferrer">PACE</a>选择颜色并复制代码直接替换原文件中的代码</li>
</ul>
<p>默认颜色都是蓝色，上述代码修改完后是粉色</p>
<h3 id="升级-1"><a href="#升级-1" class="headerlink" title="升级"></a>升级</h3><p>切换到安装目录</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next/source/lib/pace</span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>



<h2 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h2><p>Next主题默认提供了三种动态背景</p>
<ul>
<li><a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="external nofollow noopener noreferrer">Canvas-nest</a></li>
<li><a href="https://github.com/theme-next/theme-next-three" target="_blank" rel="external nofollow noopener noreferrer">JavaScript 3D library</a></li>
<li><a href="https://github.com/theme-next/theme-next-canvas-ribbon" target="_blank" rel="external nofollow noopener noreferrer">Canvas-ribbon</a></li>
</ul>
<h3 id="Canvas-nest"><a href="#Canvas-nest" class="headerlink" title="Canvas-nest"></a>Canvas-nest</h3><p>我选用的是这个背景，比较好玩</p>
<h4 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h4><p>切换到Next主题文件夹</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br></pre></td></tr></table></figure>

<p>安装模块</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</span><br></pre></td></tr></table></figure>

<h4 id="修改配置文件-2"><a href="#修改配置文件-2" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开Next主题路径下的配置文件<code>_config.yml</code>修改下列代码</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  onmobile: true # 是否在手机上显示</span><br><span class="line">  color: "255,51,51" # RGB颜色设置</span><br><span class="line">  opacity: 0.5 # 线条透明度</span><br><span class="line">  zIndex: -1 # 显示级别</span><br><span class="line">  count: 160 # 线条的数量，越多越卡</span><br></pre></td></tr></table></figure>

<p>如果想使用CDN加速的话需要设置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vendors:</span><br><span class="line">  ...</span><br><span class="line">  canvas_nest: <span class="comment">//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest.min.js</span></span><br><span class="line">  canvas_nest_nomobile: <span class="comment">//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest-nomobile.min.js</span></span><br></pre></td></tr></table></figure>

<h4 id="升级-2"><a href="#升级-2" class="headerlink" title="升级"></a>升级</h4><p>切换到安装目录</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next/source/lib/canvas-nest</span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<h3 id="JavaScript-3D-library"><a href="#JavaScript-3D-library" class="headerlink" title="JavaScript 3D library"></a>JavaScript 3D library</h3><h4 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h4><p>切换到Next主题文件夹</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br></pre></td></tr></table></figure>

<p>安装模块</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-three source/lib/three</span><br></pre></td></tr></table></figure>

<h4 id="修改配置文件-3"><a href="#修改配置文件-3" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开Next主题路径下的配置文件<code>_config.yml</code>修改下列代码，有三种风格可选，将一种设置为<code>true</code>即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># JavaScript 3D library.</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-three</span><br><span class="line"># three_waves</span><br><span class="line">three_waves: <span class="literal">true</span></span><br><span class="line"># canvas_lines</span><br><span class="line">canvas_lines: <span class="literal">false</span></span><br><span class="line"># canvas_sphere</span><br><span class="line">canvas_sphere: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="升级-3"><a href="#升级-3" class="headerlink" title="升级"></a>升级</h4><p>切换到安装目录</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next/source/lib/three</span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<h3 id="Canvas-ribbon"><a href="#Canvas-ribbon" class="headerlink" title="Canvas-ribbon"></a>Canvas-ribbon</h3><h4 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h4><p>切换到Next主题文件夹</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br></pre></td></tr></table></figure>

<p>安装模块</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-canvas-ribbon source/lib/canvas-ribbon</span><br></pre></td></tr></table></figure>

<h4 id="修改配置文件-4"><a href="#修改配置文件-4" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开Next主题路径下的配置文件<code>_config.yml</code>修改下列代码</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># Canvas-ribbon</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-canvas-ribbon</span><br><span class="line"># size: The width of the ribbon.</span><br><span class="line"># alpha: The transparency of the ribbon.</span><br><span class="line"># zIndex: The display level of the ribbon.</span><br><span class="line">canvas_ribbon:</span><br><span class="line">  enable: true # 是否开启</span><br><span class="line">  size: 300 # 宽度</span><br><span class="line">  alpha: 0.6 # 透明度</span><br><span class="line">  zIndex: -1 # 显示级别</span><br></pre></td></tr></table></figure>

<h4 id="升级-4"><a href="#升级-4" class="headerlink" title="升级"></a>升级</h4><p>切换到安装目录</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next/source/lib/canvas-ribbon</span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>



<h2 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h2><p>在网页中加入鼠标点击特效，目前有心形和爆炸两种特效，两者可以叠加，特效对性能较低的设备非常不友好，尤其是爆炸特效，在平板上卡成PPT，慎用……</p>
<h3 id="心形特效"><a href="#心形特效" class="headerlink" title="心形特效"></a>心形特效</h3><h4 id="创建js文件"><a href="#创建js文件" class="headerlink" title="创建js文件"></a>创建js文件</h4><p>在<code>./themes/next/source/js</code>中新建<code>clicklove.js</code>，并将粘贴下列代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<h4 id="修改layout文件"><a href="#修改layout文件" class="headerlink" title="修改layout文件"></a>修改layout文件</h4><p>打开<code>./themes/next/layout/_layout.swig</code>并在末尾添加以下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击心形 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/clicklove.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="爆炸特效"><a href="#爆炸特效" class="headerlink" title="爆炸特效"></a>爆炸特效</h3><h4 id="创建js文件-1"><a href="#创建js文件-1" class="headerlink" title="创建js文件"></a>创建js文件</h4><p>在<code>./themes/next/source/js</code>中新建<code>firework.js</code>，并将粘贴下列代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="修改layout文件-1"><a href="#修改layout文件-1" class="headerlink" title="修改layout文件"></a>修改layout文件</h4><p>打开<code>./themes/next/layout/_layout.swig</code>并在``中间添加以下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;!-- 爆炸效果 --&gt;</span><br><span class="line">&lt;canvas <span class="class"><span class="keyword">class</span></span>=<span class="string">"fireworks"</span> style=<span class="string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> &gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span> </span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> </span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/firework.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="配置主题文件"><a href="#配置主题文件" class="headerlink" title="配置主题文件"></a>配置主题文件</h4><p>打开<code>./themes/next</code>路径下的<code>_config.yml</code>文件并在末尾添加以下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># Fireworks</span><br><span class="line">fireworks: <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h2 id="网易云音乐挂件"><a href="#网易云音乐挂件" class="headerlink" title="网易云音乐挂件"></a>网易云音乐挂件</h2><p>给博客加入背景音乐，支持网易云歌单，步骤如下：</p>
<ol>
<li><p>首先登陆<a href="https://music.163.com/" target="_blank" rel="external nofollow noopener noreferrer">网易云音乐网页版</a></p>
</li>
<li><p>选择自己想要添加的歌单</p>
</li>
<li><p>分享歌单</p>
</li>
<li><p>点击右上角个人头像，进入<code>我的主页</code></p>
</li>
<li><p>点击<code>动态</code></p>
</li>
<li><p>找到自己刚刚分享的歌单</p>
</li>
<li><p>点击<code>生成外链播放器</code></p>
</li>
<li><p>选择<code>iframe</code>界面并调整播放器样式与大小</p>
</li>
<li><p><code>播放模式</code>个人建议不勾选自动播放</p>
</li>
<li><p>复制下方html代码</p>
</li>
<li><p>按照路径<code>Hexo根目录\themes\next\layout\_macro</code>打开<code>sidebar.swig</code></p>
</li>
<li><p>在合适的位置加入以下代码，位置慢慢调整,中间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iframe</span><br></pre></td></tr></table></figure>

<p>是刚刚复制的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"music163player"</span>&gt;</span><br><span class="line">       &lt;iframe frameborder=<span class="string">"no"</span> border=<span class="string">"0"</span> marginwidth=<span class="string">"0"</span> marginheight=<span class="string">"0"</span> width=<span class="number">280</span> height=<span class="number">450</span> src=<span class="string">"//music.163.com/outchain/player?type=0&amp;id=908252389&amp;auto=1&amp;height=430"</span>&gt;</span><br><span class="line">       &lt;<span class="regexp">/iframe&gt;</span></span><br><span class="line"><span class="regexp">       &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>播放器可能由于侧栏宽度不够显示不全，需要在<code>主题配置文件</code>中调整侧栏宽度</p>
</li>
<li><p>打开next主题下的<code>_config.yml</code>文件</p>
</li>
<li><p>搜索width,在下列代码中去掉最后一行width前的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br></pre></td></tr></table></figure>

<p>号使其生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Manual define the sidebar width. If commented, will be default for:</span><br><span class="line"># Muse | Mist: 320</span><br><span class="line"># Pisces | Gemini: 240</span><br><span class="line"># width: 300</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据需要调整侧栏宽度</p>
</li>
</ol>
<h2 id="修改超链接样式"><a href="#修改超链接样式" class="headerlink" title="修改超链接样式"></a>修改超链接样式</h2><p>打开<code>themes\next\source\css\_common\components\post\post.styl</code>并在末尾一串<code>@import</code>上面添加以下代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="在文章结尾添加本文结束标志"><a href="#在文章结尾添加本文结束标志" class="headerlink" title="在文章结尾添加本文结束标志"></a>在文章结尾添加本文结束标志</h2><h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><p>在<code>\themes\next\layout\_macro</code>中新建<code>passage-end-tag.swig</code>文件,并复制下列代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">        &lt;div style=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;-------------本文结束&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-paw"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span>感谢您的阅读-------------<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>打开<code>\themes\next\layout\_macro\post.swig</code>，在<code>post-body</code>之后，<code>post-footer</code>之前添加下列代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">    &#123;% include <span class="string">'passage-end-tag.swig'</span> %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改主题文件"><a href="#修改主题文件" class="headerlink" title="修改主题文件"></a>修改主题文件</h3><p>打开主题配置文件<code>_config.yml</code>,并在末尾添加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line"><span class="selector-tag">passage_end_tag</span>:</span><br><span class="line">  <span class="selector-tag">enabled</span>: <span class="selector-tag">true</span></span><br></pre></td></tr></table></figure>



<h2 id="网站运行时间"><a href="#网站运行时间" class="headerlink" title="网站运行时间"></a>网站运行时间</h2><p>打开<code>.\themes\next\layout\_partials\footer.swig</code>并添加下列代码</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;span id="timeDate"&gt;载入天数...&lt;/span&gt;&lt;span id="times"&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;<span class="selector-tag">script</span>&gt;</span><br><span class="line">    var now = new Date();</span><br><span class="line">    <span class="selector-tag">function</span> <span class="selector-tag">createtime</span>() &#123;</span><br><span class="line">        var grt= new Date("03/31/2019 00:00:00");</span><br><span class="line">        <span class="selector-tag">now</span><span class="selector-class">.setTime</span>(<span class="selector-tag">now</span><span class="selector-class">.getTime</span>()+250);</span><br><span class="line">        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);</span><br><span class="line">        if(String(hnum).length ==1 )&#123;hnum = "0" + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">        mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = "0" + mnum;&#125;</span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">        snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = "0" + snum;&#125;</span><br><span class="line">        document.getElementById("timeDate").innerHTML = "本站已安全运行 "+dnum+" 天 ";</span><br><span class="line">        document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒";</span><br><span class="line">    &#125;</span><br><span class="line"><span class="selector-tag">setInterval</span>("<span class="selector-tag">createtime</span>()",250);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<h2 id="访客统计"><a href="#访客统计" class="headerlink" title="访客统计"></a>访客统计</h2><p>Next主题已经内置了不蒜子统计，在Next主题的配置文件<code>_config.yml</code>中搜索<code>busuanzi_count</code>并将<code>enable</code>设置为<code>true</code>，<code>icon</code>可以自定义设置，下面是我的配置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># Show Views / Visitors of the website / page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span><br><span class="line"><span class="selector-tag">busuanzi_count</span>:</span><br><span class="line">  <span class="selector-tag">enable</span>: <span class="selector-tag">true</span></span><br><span class="line">  <span class="selector-tag">total_visitors</span>: <span class="selector-tag">true</span> # 总访客数量，在页脚显示</span><br><span class="line">  <span class="selector-tag">total_visitors_icon</span>: <span class="selector-tag">user</span></span><br><span class="line">  <span class="selector-tag">total_views</span>: <span class="selector-tag">true</span> # 总阅读数量，在页脚显示</span><br><span class="line">  <span class="selector-tag">total_views_icon</span>: <span class="selector-tag">eye</span></span><br><span class="line">  <span class="selector-tag">post_views</span>: <span class="selector-tag">true</span> # 单篇文章阅读数量，在标题下显示</span><br><span class="line">  <span class="selector-tag">post_views_icon</span>: <span class="selector-tag">eye</span></span><br></pre></td></tr></table></figure>



<h2 id="字数统计和阅读时长统计"><a href="#字数统计和阅读时长统计" class="headerlink" title="字数统计和阅读时长统计"></a>字数统计和阅读时长统计</h2><h3 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h3><p>在博客根目录下执行命令安装统计插件</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-<span class="built_in">time</span> --save</span><br></pre></td></tr></table></figure>

<h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><p>在博客根目录配置文件<code>_config.yaml</code>中加入下列代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">symbols_count_time</span>:</span><br><span class="line">  <span class="selector-tag">symbols</span>: <span class="selector-tag">true</span> # 文章字数</span><br><span class="line">  <span class="selector-tag">time</span>: <span class="selector-tag">true</span> # 阅读时长</span><br><span class="line">  <span class="selector-tag">total_symbols</span>: <span class="selector-tag">true</span> # 所有文章总字数</span><br><span class="line">  <span class="selector-tag">total_time</span>: <span class="selector-tag">true</span> # 所有文章阅读中时长</span><br></pre></td></tr></table></figure>

<p>在Next主题配置文件<code>_config.yaml</code>中搜索<code>symbol_count</code>并修改为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">symbols_count_time</span>:</span><br><span class="line">  <span class="selector-tag">separated_meta</span>: <span class="selector-tag">true</span></span><br><span class="line">  <span class="selector-tag">item_text_post</span>: <span class="selector-tag">true</span></span><br><span class="line">  <span class="selector-tag">item_text_total</span>: <span class="selector-tag">false</span></span><br><span class="line">  <span class="selector-tag">awl</span>: 4</span><br><span class="line">  <span class="selector-tag">wpm</span>: 275</span><br></pre></td></tr></table></figure>



<h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><p>只在需要的时候加载图片，而不是一次性加载完成，加快速度，适用于图片较多的博客（<del>像我一样懒得放图的就不用看了</del>）</p>
<h3 id="安装-8"><a href="#安装-8" class="headerlink" title="安装"></a>安装</h3><p>在博客根目录执行命令安装插件</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload --save</span><br></pre></td></tr></table></figure>

<h3 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h3><p>在博客根目录的配置文件<code>_config.yml</code>中添加下列代码</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">lazyload</span>:</span><br><span class="line">  <span class="selector-tag">enable</span>: <span class="selector-tag">true</span></span><br><span class="line">  <span class="selector-tag">onlypost</span>: <span class="selector-tag">false</span> #是否只在文章中开启懒加载</span><br><span class="line">  # <span class="selector-tag">className</span>: #可选 <span class="selector-tag">e</span><span class="selector-class">.g</span>. <span class="selector-class">.J-lazyload-img</span></span><br><span class="line">  # loadingImg: #可选 eg. ./images/loading.png 作为图片未加载时的替代图片</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next7.6</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 使用入门</title>
    <url>/archives/bbbe9f56.html</url>
    <content><![CDATA[<p><code>.md</code>即 Markdown 文件的基本常用编写语法,是一种快速标记、快速排版语言，现在很多前段项目中的说明文件readme等都是用<code>.md</code>文件编写的，而且很多企业也在在鼓励使用这种编辑方式，特别作为一个前端从业者更要学会使用这种语言。下面就简单和大家分享一些<code>.md</code>基本语法</p>
<h2 id="一、基本符号：-gt"><a href="#一、基本符号：-gt" class="headerlink" title="一、基本符号：* - + _ &gt; `"></a>一、基本符号：* - + _ &gt; `</h2><p>基本上所有的 Markdown 标记都是基于这四个符号或组合，需要注意的是，如果以基本符号开头的标记，注意基本符号后有一个用于分割标记符和内容的空格。</p>
<h2 id="二、标题"><a href="#二、标题" class="headerlink" title="二、标题"></a>二、标题</h2><p>前面带 <code>#</code> 号，后面带文字，分别表示<code>h1-h6</code>,只到<code>h6</code>，而且<code>h1</code>下面会有一条横线。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<h2 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h2><h3 id="a-无序列表"><a href="#a-无序列表" class="headerlink" title="a. 无序列表"></a>a. 无序列表</h3><p>示例一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ a</span><br><span class="line">+ b</span><br><span class="line">+ c</span><br></pre></td></tr></table></figure>
<p>示例二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- d</span><br><span class="line">- e</span><br><span class="line">- f</span><br></pre></td></tr></table></figure>
<p>示例三：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* g</span><br><span class="line">* h</span><br><span class="line">* i</span><br></pre></td></tr></table></figure>

<p> 以上三种书写形式，效果其实都是一样的。</p>
<h3 id="b-有序列表"><a href="#b-有序列表" class="headerlink" title="b. 有序列表"></a>b. 有序列表</h3><p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. abc</span><br><span class="line">2. bcd</span><br><span class="line">3. cde</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意！数字后面的点只能是英文的点，有序列表的序号是根据第一行列表的数字顺序来的。</p>
</blockquote>
<h3 id="c-嵌套列表"><a href="#c-嵌套列表" class="headerlink" title="c. 嵌套列表"></a>c. 嵌套列表</h3><p>无序列表嵌套示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ 123</span><br><span class="line">    + abc</span><br><span class="line">    + bcd</span><br><span class="line">    + cde</span><br><span class="line">+ 465</span><br><span class="line">+ 789</span><br></pre></td></tr></table></figure>
<p>有序列表嵌套示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. abcd</span><br><span class="line">    1. abcde</span><br><span class="line">    2. abcde</span><br><span class="line">    3. abcde</span><br><span class="line">2. bcde</span><br><span class="line">3. cdef</span><br></pre></td></tr></table></figure>
<blockquote>
<p>列表可以嵌套，使用时在嵌套列表前按 <code>tab</code> 或 <code>空格</code> 来缩进,去控制列表的层数</p>
</blockquote>
<h2 id="四、引用说明区块"><a href="#四、引用说明区块" class="headerlink" title="四、引用说明区块"></a>四、引用说明区块</h2><p>对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语法。</p>
<h3 id="a-正常形式"><a href="#a-正常形式" class="headerlink" title="a. 正常形式"></a>a. 正常形式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 引用内容、说明内容。在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格，引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等。</span><br></pre></td></tr></table></figure>

<h3 id="b-嵌套区块"><a href="#b-嵌套区块" class="headerlink" title="b. 嵌套区块"></a>b. 嵌套区块</h3><p>这里我只介绍一下我常用的方法，也是个人认为比较规范的一种方法，就是给区块的下一级区块多加一个右尖括号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line">&gt;&gt; 二级引用</span><br><span class="line">&gt;&gt;&gt; 三级引用</span><br><span class="line">&gt;&gt;&gt;&gt; 四级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; 五级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt; 六级引用</span><br></pre></td></tr></table></figure>

<h2 id="五、代码块"><a href="#五、代码块" class="headerlink" title="五、代码块"></a>五、代码块</h2><p>在发布一些技术文章会涉及显示代码的问题，这时候代码块就显得尤为重要。</p>
<p>a. 少量代码，单行使用，直接用`包裹起来就行了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;echo live &gt; &#x2F;etc&#x2F;hostname &#96;</span><br></pre></td></tr></table></figure>

<p>b. 多行代码，需要多行使用，用```包裹起来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​</span><br></pre></td></tr></table></figure>
<p>print(“Hello”)<br>print(“Hello”)<br>print(“Hello”)<br>​```</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 六、链接</span><br><span class="line"></span><br><span class="line">### a. 行内式</span><br><span class="line"></span><br><span class="line">链接的文字放在[]中，链接地址放在随后的()中，链接也可以带title属性，链接地址后面空一格，然后用引号引起来</span><br></pre></td></tr></table></figure>
<p><a href="https://www.ling218.cn" title="博客地址">LinG218</a>,是我的个人博客地址。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### b. 参数式</span><br><span class="line"></span><br><span class="line">链接的文字放在&#96;[]&#96;中，链接地址放在随后的:后，链接地址后面空一格，然后用引号引起来</span><br></pre></td></tr></table></figure>
<p><a href="https://www.ling218.cn" title="博客地址">LinG218</a>是我的个人博客地址。<br>//参数定义的其他写法<br><a href="https://www.ling218.cn" title="博客地址">LinG218</a>: <a href="https://www.ling218.cn">https://www.ling218.cn</a> “创作你的创作”<br>[我的博客]: <a href="https://www.ling218.cn">https://www.ling218.cn</a> “创作你的创作”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## 七、图片</span><br><span class="line"></span><br><span class="line">### a. 行内式</span><br><span class="line"></span><br><span class="line">和链接的形式差不多，图片的名字放在&#96;[]&#96;中，图片地址放在随后的&#96;()&#96;中，&#96;title&#96;属性（图片地址后面空一格，然后用引号引起来）,注意的是&#96;[]&#96;前要加上&#96;!&#96;号。</span><br></pre></td></tr></table></figure>
<p><img src="https://www.ling218.cn/source/updates/avatar.jpg" alt="PK" title="my-logo"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### b. 参数式</span><br><span class="line"></span><br><span class="line">图片的文字放在&#96;[]&#96;中，图片地址放在随后的&#96;:&#96;后，&#96;title&#96;属性（图片地址后面空一格，然后用引号引起来）,注意引用图片的时候在&#96;[]&#96;前要加上&#96;!&#96;号。</span><br></pre></td></tr></table></figure>
<p><img src="https://www.ling218.cn/source/updates/avatar.jpg" alt="LOGO" title="my-logo"><br>//参数定义的其他写法<br><a href="https://www.ling218.cn/source/updates/avatar.jpg" title="my-logo">LOGO</a>: <a href="https://www.ling218.cn/source/updates/avatar.jpg">https://www.ling218.cn/source/updates/avatar.jpg</a> “my-logo”<br><a href="https://www.ling218.cn/source/updates/avatar.jpg" title="my-logo">LOGO</a>: <a href="https://www.ling218.cn/source/updates/avatar.jpg">https://www.ling218.cn/source/updates/avatar.jpg</a> “my-logo”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> 以上两种方式其效果图都是一样的。</span><br><span class="line"></span><br><span class="line">## 八、分割线</span><br><span class="line"></span><br><span class="line">分割线可以由&#96;* - _&#96;（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以。</span><br></pre></td></tr></table></figure>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 九、其他</span><br><span class="line"></span><br><span class="line">### a. 强调字体</span><br><span class="line"></span><br><span class="line">一个 &#96;*&#96; 号或者是一个 &#96;_&#96; 包起来，会转换为&#96;倾斜&#96;。如果是2个，会转换为&#96;加粗&#96;。</span><br></pre></td></tr></table></figure>
<p><em>md</em>    #倾斜<br><strong>md</strong>  #加粗<br><em>md</em>    #倾斜<br><strong>md</strong>  #加粗</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### b. 转义</span><br><span class="line"></span><br><span class="line">基本上和&#96;js&#96;转义一样,&#96;\&#96; 加需要&#96;转义&#96;的字符。</span><br></pre></td></tr></table></figure>
<p>\<br>*<br>+<br>-<br>`<br>_</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### c. 删除线</span><br><span class="line"></span><br><span class="line">用&#96;~~&#96;符号把需要显示&#96;删除线&#96;的字符包裹起来。</span><br></pre></td></tr></table></figure>
<p><del>删除</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 十、表格</span><br><span class="line"></span><br><span class="line">示例一：</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">123</th>
<th align="center">234</th>
<th align="right">345</th>
</tr>
</thead>
<tbody><tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例二：</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">123</td>
<td align="center">234</td>
<td align="right">345</td>
</tr>
<tr>
<td align="left">:—</td>
<td align="center">:—:</td>
<td align="right">—:</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例三：</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">123</td>
<td align="center">234</td>
<td align="right">345</td>
</tr>
<tr>
<td align="left">:-</td>
<td align="center">:-:</td>
<td align="right">-:</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">```</td>
<td align="center"></td>
<td align="right"></td>
</tr>
</tbody></table>
<blockquote>
<p>上面三个示例的效果是一样的，由此可得：</p>
<blockquote>
<p>a. 表格的格式不一定要对的非常齐，但是为了良好的变成风格，尽量对齐是最好的</p>
</blockquote>
<blockquote>
<p>b. 分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中</p>
</blockquote>
</blockquote>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>学习吸收加自己的总结，跟大家一起分享了。</p>
<p>本文内容在头条号：LinG218 同步更新。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基础语法</title>
    <url>/archives/39415.html</url>
    <content><![CDATA[<h2 id="自动生成文章目录"><a href="#自动生成文章目录" class="headerlink" title="自动生成文章目录"></a>自动生成文章目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[TOC]</span><br></pre></td></tr></table></figure>
<p>效果：<br>[TOC]</p>
<h2 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体*或_斜体_ </span><br><span class="line">**粗体**</span><br><span class="line">***加粗斜体*** </span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure>
<p>效果：<br><em>斜体</em>或<em>斜体</em><br><strong>粗体</strong><br><strong><em>加粗斜体</em></strong><br><del>删除线</del></p>
<h2 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题  </span><br><span class="line">## 二级标题  </span><br><span class="line">### 三级标题  </span><br><span class="line">#### 四级标题  </span><br><span class="line">##### 五级标题  </span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><p><code>[LinG218](https://www.ling218.cn)</code><br>效果：<a href="https://www.ling218.cn">LinG218</a> </p>
<h3 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常用的搜索引擎[Google][1],[Baidu][2],[example][]  </span><br><span class="line">[1]:https:&#x2F;&#x2F;www.google.com</span><br><span class="line">[2]:https:&#x2F;&#x2F;www.baidu.com </span><br><span class="line">[example]:https:&#x2F;&#x2F;www.example.com</span><br></pre></td></tr></table></figure>
<p>效果：<br>常用的搜索引擎[Google][1],[Baidu][2],[example][]<br>[1]:<a href="https://www.google.com" target="_blank" rel="external nofollow noopener noreferrer">https://www.google.com</a><br>[2]:<a href="https://www.baidu.com" target="_blank" rel="external nofollow noopener noreferrer">https://www.baidu.com</a><br>[example]:<a href="https://www.example.com" target="_blank" rel="external nofollow noopener noreferrer">https://www.example.com</a></p>
<h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;http:&#x2F;&#x2F;example.com&gt; </span><br><span class="line">&lt;address@example.com&gt;</span><br></pre></td></tr></table></figure>
<p>效果：<a href="http://example.com" target="_blank" rel="external nofollow noopener noreferrer">http://example.com</a><br>效果：<a href="mailto:&#x61;&#100;&#x64;&#114;&#x65;&#115;&#x73;&#x40;&#x65;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#x6f;&#x6d;">&#x61;&#100;&#x64;&#114;&#x65;&#115;&#x73;&#x40;&#x65;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#x6f;&#x6d;</a></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>使用 <code>*，+，-</code> 表示无序列表 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 无序列表项   </span><br><span class="line">- 无序列表项  </span><br><span class="line">+ 无序列表项</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<ul>
<li>无序列表项 </li>
</ul>
<ul>
<li>无序列表项</li>
</ul>
<ul>
<li>无序列表项</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表则使用数字接着一个英文 <code>.</code> 句点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 有序列表项  </span><br><span class="line">2. 有序列表项  </span><br><span class="line">3. 有序列表项</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<ol>
<li>有序列表项 </li>
<li>有序列表项 </li>
<li>有序列表项 </li>
</ol>
<h3 id="列表缩进"><a href="#列表缩进" class="headerlink" title="列表缩进"></a>列表缩进</h3><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多<code>3</code>个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>
<h3 id="包含段落的列表"><a href="#包含段落的列表" class="headerlink" title="包含段落的列表"></a>包含段落的列表</h3><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 <code>4</code>个空格或是 <code>1</code>个制表符（显示效果与代码一致）。</p>
<h3 id="包含引用的列表"><a href="#包含引用的列表" class="headerlink" title="包含引用的列表"></a>包含引用的列表</h3><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进 。</p>
<h3 id="包含代码区块的引用"><a href="#包含代码区块的引用" class="headerlink" title="包含代码区块的引用"></a>包含代码区块的引用</h3><p>如果要放代码区块的话，该区块就需要缩进两次，也就是 <code>8</code>个空格或是 <code>2</code> 个制表符。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用需要在被引用的文本前加上 <code>&gt;</code> 符号。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 引用项</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<blockquote>
<p>引用项</p>
</blockquote>
<h2 id="插入图像"><a href="#插入图像" class="headerlink" title="插入图像"></a>插入图像</h2><pre><code>![图片alt](图片地址 &quot;图片title&quot;)   
图片alt就是显示在图片下面的文字，相当于对图片内容的解释。    
图片title是图片的标题，当鼠标移动到图片上时显示的内容。title可加可不加。    </code></pre><p><img src="https://www.ling218.cn/updates/avatar.jpg%22%E7%BD%91%E7%BB%9C%E4%B8%8A%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87%22" alt="我的头像">      </p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>不管是哪种方式，<strong>第一行为表头</strong>，<strong>第二行分隔表头和主体部分</strong>，<strong>第三行开始每一行为一个表格行</strong>。 列于列之间用管道符 <code>|</code> 隔开。原生方式的表格每一行的两边也要有管道符。 第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上 <code>:</code> 就右对齐。 </p>
<h3 id="简单方式写表格"><a href="#简单方式写表格" class="headerlink" title="简单方式写表格"></a>简单方式写表格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">学号|姓名|分数 </span><br><span class="line">-|-|- </span><br><span class="line">小明|男|75 </span><br><span class="line">小红|女|79 </span><br><span class="line">小陆|男|92</span><br></pre></td></tr></table></figure>
<p>效果：<br>学号|姓名|分数<br>-|-|-<br>小明|男|75<br>小红|女|79<br>小陆|男|92</p>
<h3 id="原生方式写表格"><a href="#原生方式写表格" class="headerlink" title="原生方式写表格"></a>原生方式写表格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|学号|姓名|分数| </span><br><span class="line">|-|-|-| </span><br><span class="line">|小明|男|75| </span><br><span class="line">|小红|女|79| </span><br><span class="line">|小陆|男|92|</span><br></pre></td></tr></table></figure>
<p>效果：<br>|学号|姓名|分数|<br>|-|-|-|<br>|小明|男|75|<br>|小红|女|79|<br>|小陆|男|92|</p>
<h3 id="为表格第二列指定方向"><a href="#为表格第二列指定方向" class="headerlink" title="为表格第二列指定方向"></a>为表格第二列指定方向</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">产品|价格 </span><br><span class="line">-|-: </span><br><span class="line">Leanote 高级账号|60元&#x2F;年</span><br><span class="line">Leanote 超级账号|120元&#x2F;年</span><br></pre></td></tr></table></figure>
<p>效果：<br>产品|价格<br>-|-:<br>Leanote 高级账号|60元/年<br>Leanote 超级账号|120元/年</p>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用 <code>3</code> 个以上的<strong>星号、减号、底线</strong>来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***  </span><br><span class="line">****  </span><br><span class="line">---  </span><br><span class="line">----</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<hr>
<hr>
<hr>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用”`”符号（一般在ESC键下方）包裹代码。<br>    1. 插入行内代码，即插入一个单词或者一句代码的情况。<br>    2. 插入多行代码，可以使用缩进或者用三个符号包裹代码，具体看示例。<br>注意： 缩进式插入前方必须有空行。</p>
<h3 id="行内式-1"><a href="#行内式-1" class="headerlink" title="行内式"></a>行内式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C语言里的函数 &#96;scanf()&#96; 怎么使用？</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>C语言里的函数 <code>scanf()</code>怎么使用？ </p>
<h3 id="缩进式多行代码"><a href="#缩进式多行代码" class="headerlink" title="缩进式多行代码"></a>缩进式多行代码</h3><p>缩进 4 个空格或是 1 个制表符<br>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&quot;Hello world!&quot;)</span><br><span class="line">print(&quot;Hello world!&quot;)</span><br><span class="line">print(&quot;Hello world!&quot;)</span><br><span class="line">print(&quot;Hello world!&quot;)</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<pre><code>print(&quot;Hello world!&quot;)
print(&quot;Hello world!&quot;)
print(&quot;Hello world!&quot;)
print(&quot;Hello world!&quot;)</code></pre>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
