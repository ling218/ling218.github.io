<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>live build项目收集</title>
    <url>/archives/3311a575.html</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="创建-Ubuntu-live-脚本"><a href="#创建-Ubuntu-live-脚本" class="headerlink" title="创建 Ubuntu live 脚本"></a>创建 Ubuntu live 脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;RTXI&#x2F;live-image</span><br></pre></td></tr></table></figure>

<h3 id="构建-Debain-live-脚本-（基于-debian-live）"><a href="#构建-Debain-live-脚本-（基于-debian-live）" class="headerlink" title="构建 Debain live 脚本 （基于 debian live）"></a>构建 Debain live 脚本 （基于 debian live）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;s-vincent&#x2F;debian-live-image</span><br></pre></td></tr></table></figure>

<h3 id="构建-Debain-live-脚本-分步骤小脚本"><a href="#构建-Debain-live-脚本-分步骤小脚本" class="headerlink" title="构建 Debain live 脚本 (分步骤小脚本)"></a>构建 Debain live 脚本 (分步骤小脚本)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;dinooz&#x2F;devuanos</span><br></pre></td></tr></table></figure>

<h3 id="构建-NIIX-LINUX-中文项目，项目完整度高"><a href="#构建-NIIX-LINUX-中文项目，项目完整度高" class="headerlink" title="构建 NIIX-LINUX (中文项目，项目完整度高)"></a>构建 NIIX-LINUX (中文项目，项目完整度高)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;etony&#x2F;niix-linux</span><br></pre></td></tr></table></figure>

<h3 id="构建-Debian-live-（非常完整的项目，没成功构建过）"><a href="#构建-Debian-live-（非常完整的项目，没成功构建过）" class="headerlink" title="构建 Debian live （非常完整的项目，没成功构建过）"></a>构建 Debian live （非常完整的项目，没成功构建过）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;nodiscc&#x2F;debian-live-config</span><br></pre></td></tr></table></figure>

<h3 id="构建-Debian-live-（非常完整的项目）"><a href="#构建-Debian-live-（非常完整的项目）" class="headerlink" title="构建 Debian live （非常完整的项目）"></a>构建 Debian live （非常完整的项目）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;StamusNetworks&#x2F;SELKS</span><br></pre></td></tr></table></figure>

<h3 id="构建-Debain-live-（日文项目，很好的项目）"><a href="#构建-Debain-live-（日文项目，很好的项目）" class="headerlink" title="构建 Debain live （日文项目，很好的项目）"></a>构建 Debain live （日文项目，很好的项目）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;homelith&#x2F;debian-live-custom</span><br></pre></td></tr></table></figure>
<p>网站详情：<a href="https://qiita.com/homelith/items/f30a1fbac89dc977c1ff" target="_blank" rel="external nofollow noopener noreferrer">https://qiita.com/homelith/items/f30a1fbac89dc977c1ff</a></p>
<h3 id="构建-Debian-live-（非常不错的项目）"><a href="#构建-Debian-live-（非常不错的项目）" class="headerlink" title="构建 Debian live （非常不错的项目）"></a>构建 Debian live （非常不错的项目）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;mafredri&#x2F;debian-my-live-build</span><br></pre></td></tr></table></figure>

<h3 id="构建-Minimal-linux-live-（研究linux系统基础）"><a href="#构建-Minimal-linux-live-（研究linux系统基础）" class="headerlink" title="构建 Minimal linux live （研究linux系统基础）"></a>构建 Minimal linux live （研究linux系统基础）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;ivandavidov&#x2F;minimal-linux-script</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>项目总结</category>
      </categories>
      <tags>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>下载Youtube视频和播放列表</title>
    <url>/archives/17677cc8.html</url>
    <content><![CDATA[<p>youtube-dl是由某大佬开发的专攻YouTube视频下载的python脚本，使用简单、功能齐全、体积小巧。</p>
<a id="more"></a>

<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="普通下载"><a href="#普通下载" class="headerlink" title="普通下载"></a>普通下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">youtube-dl &#39;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;y8CPXkP2CKc&amp;pbjreload&#x3D;10&#39;</span><br></pre></td></tr></table></figure>

<h3 id="下载列表"><a href="#下载列表" class="headerlink" title="下载列表"></a>下载列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">youtube-dl -cit &#39;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;y8CPXkP2CKc&amp;pbjreload&#x3D;10&#39;</span><br></pre></td></tr></table></figure>

<h3 id="使用代理下载"><a href="#使用代理下载" class="headerlink" title="使用代理下载"></a>使用代理下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">youtube-dl --proxy 127.0.0.1:1080 https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;y8CPXkP2CKc&amp;pbjreload&#x3D;10</span><br></pre></td></tr></table></figure>

<h3 id="输出文件的名字"><a href="#输出文件的名字" class="headerlink" title="输出文件的名字"></a>输出文件的名字</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">youtube-dl &#39;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;y8CPXkP2CKc&amp;pbjreload&#x3D;10&#39; -o &#39;%(title)s.%(ext)s&#39;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>youtube-dl</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL Kali linux 默认使用root用户</title>
    <url>/archives/8e1931da.html</url>
    <content><![CDATA[<ul>
<li>一开始会让你创建用户名和密码。注意：用户名最好用小写英文，密码不要忘记。后面要用到。</li>
<li>当然，我们也可以用root用户，这样就可以避免频繁输入sudo，避免因权限而带来的操作问题。</li>
</ul>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>按<code>Ctrl+D</code>退出登录，并打开Windows命令行（WIN+R 输入CMD）输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kali config --default-user root</span><br><span class="line">net stop LxssManager</span><br><span class="line">net start LxssManager</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows子系统(linux)的中文化</title>
    <url>/archives/d02e6c08.html</url>
    <content><![CDATA[<p>中文化和用户环境定制</p>
<a id="more"></a>

<h2 id="中文化操作"><a href="#中文化操作" class="headerlink" title="中文化操作"></a>中文化操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 更新Linux系统</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y upgrade</span><br><span class="line">sudo apt-get -y dist-upgrade</span><br><span class="line"># 安装软件包</span><br><span class="line">sudo apt-get -y install task-chinese-t openssh-server openssh-client curl git </span><br><span class="line"># 中文环境设置</span><br><span class="line">sudo dpkg-reconfigure locales </span><br><span class="line">sudo update-locale --reset</span><br><span class="line">sudo update-locale LANG&#x3D;zh_CN.UTF-8 </span><br><span class="line"># 为Windows共享文件夹创建挂载点</span><br><span class="line">sudo mkdir &#x2F;mnt&#x2F;share</span><br></pre></td></tr></table></figure>

<h2 id="用户环境设置"><a href="#用户环境设置" class="headerlink" title="用户环境设置"></a>用户环境设置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 用户环境设置</span><br><span class="line">echo -e &quot;set number\nset tabstop&#x3D;4\nset list\nset listchars&#x3D;tab:&gt;_&quot; &gt; ~&#x2F;.vimrc</span><br><span class="line">echo -e &quot;location\nprogress-bar\nremote-time\nshow-error&quot; &gt; ~&#x2F;.curlrc</span><br><span class="line"># 启动SSH</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;ssh start</span><br><span class="line"># 挂载Windows共享文件夹</span><br><span class="line">sudo mount -t drvfs &#39;\\server\share&#39; &#x2F;mnt&#x2F;share</span><br><span class="line"># 命令自动补全</span><br><span class="line">sudo apt-get install bash-completion</span><br><span class="line">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;profile</span><br><span class="line">if [ -f &#x2F;etc&#x2F;bash_completion ]; then</span><br><span class="line">. &#x2F;etc&#x2F;bash_completion</span><br><span class="line">fi</span><br><span class="line">EOF</span><br><span class="line">## 使其生效</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL Kali linux安装图形桌面</title>
    <url>/archives/3afb2d97.html</url>
    <content><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>1、在WSL执行以下命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install kali-desktop-xfce</span><br><span class="line">apt-get install xorg</span><br><span class="line">apt-get install xfce4</span><br><span class="line">apt-get isntall xrdp</span><br><span class="line">sudo sed -i &#39;s&#x2F;port&#x3D;3389&#x2F;port&#x3D;3390&#x2F;g&#39; &#x2F;etc&#x2F;xrdp&#x2F;xrdp.ini</span><br><span class="line">sudo echo xfce4-session &gt; ~&#x2F;.xsession</span><br><span class="line">sudo service xrdp restart</span><br></pre></td></tr></table></figure>
<p><strong>2、在Windows10环境，快捷键win+R打开CMD界面</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mstsc - 192.168.1.10:3390</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>制作自己的 Debian livecd</title>
    <url>/archives/fa204dda.html</url>
    <content><![CDATA[<h2 id="安装需要的软件包"><a href="#安装需要的软件包" class="headerlink" title="安装需要的软件包"></a>安装需要的软件包</h2><p><code>注意：</code> <code>#</code>号表示以 <code>root</code> 身份执行，下同。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get install \</span><br><span class="line">	isolinux \</span><br><span class="line">	syslinux \</span><br><span class="line">	xorriso \</span><br><span class="line">	debootstrap \</span><br><span class="line">	squashfs-tools</span><br></pre></td></tr></table></figure>



<h2 id="创建工作目录"><a href="#创建工作目录" class="headerlink" title="创建工作目录"></a>创建工作目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir ～&#x2F;livecd</span><br></pre></td></tr></table></figure>

<p>##下载Debian安装镜像，取得必要的引导及配置文件<br>Debian安装镜像可以从 <a href="http://mirrors.ustc.edu.cn/debian-cd/current/amd64/iso-cd/" target="_blank" rel="external nofollow noopener noreferrer">这儿</a> 下载，得到文件 <code>debian-8.7.1-amd64-CD-1.iso</code> 。然后执行命令，将该文件挂载到系统中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mount debian-8.7.1-amd64-CD-1.iso &#x2F;mnt</span><br></pre></td></tr></table></figure>

<p>然后拷贝其中的 <code>boot</code> 目录和 <code>isolinux</code> 目录到工作目录 <code>~/livecd</code> 中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cp -rv &#x2F;mnt&#x2F;boot ~&#x2F;livecd</span><br><span class="line"># cp -rv &#x2F;mnt&#x2F;isolinux ~&#x2F;livecd</span><br></pre></td></tr></table></figure>

<p>然后修要分别修改配置文件 <code>~/livecd/boot/grub/grub.cfg</code> 和 <code>isolinux/isolinux.cfg</code> 内容如下：</p>
<h3 id="grub-cfg"><a href="#grub-cfg" class="headerlink" title="grub.cfg"></a>grub.cfg</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if loadfont $prefix&#x2F;font.pf2 ; then</span><br><span class="line">  set gfxmode&#x3D;800x600</span><br><span class="line">  insmod efi_gop</span><br><span class="line">  insmod efi_uga</span><br><span class="line">  insmod video_bochs</span><br><span class="line">  insmod video_cirrus</span><br><span class="line">  insmod gfxterm</span><br><span class="line">  insmod png</span><br><span class="line">  terminal_output gfxterm</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if background_image &#x2F;isolinux&#x2F;splash.png; then</span><br><span class="line">  set color_normal&#x3D;light-gray&#x2F;black</span><br><span class="line">  set color_highlight&#x3D;white&#x2F;black</span><br><span class="line">else</span><br><span class="line">  set menu_color_normal&#x3D;cyan&#x2F;blue</span><br><span class="line">  set menu_color_highlight&#x3D;white&#x2F;blue</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">insmod play</span><br><span class="line">play 480 440 1</span><br><span class="line">set timeout&#x3D;0</span><br><span class="line">menuentry --hotkey&#x3D;i &#39;Install&#39; &#123;</span><br><span class="line">    set background_color&#x3D;black</span><br><span class="line">    linux    &#x2F;vmlinuz vga&#x3D;788 boot&#x3D;live quiet</span><br><span class="line">    initrd   &#x2F;initrd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="isolinux-cfg"><a href="#isolinux-cfg" class="headerlink" title="isolinux.cfg"></a>isolinux.cfg</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># D-I config version 2.0</span><br><span class="line"># search path for the c32 support libraries (libcom32, libutil etc.)</span><br><span class="line">path </span><br><span class="line">menu hshift 7</span><br><span class="line">menu width 61</span><br><span class="line"></span><br><span class="line">menu title Debian GNU&#x2F;Linux installer boot menu</span><br><span class="line">menu background splash.png</span><br><span class="line">menu color title	* #FFFFFFFF *</span><br><span class="line">menu color border	* #00000000 #00000000 none</span><br><span class="line">menu color sel		* #ffffffff #76a1d0ff *</span><br><span class="line">menu color hotsel	1;7;37;40 #ffffffff #76a1d0ff *</span><br><span class="line">menu color tabmsg	* #ffffffff #00000000 *</span><br><span class="line">menu color help		37;40 #ffdddd00 #00000000 none</span><br><span class="line"># XXX When adjusting vshift, take care that rows is set to a small</span><br><span class="line"># enough value so any possible menu will fit on the screen,</span><br><span class="line"># rather than falling off the bottom.</span><br><span class="line">menu vshift 12</span><br><span class="line">menu rows 10</span><br><span class="line">menu helpmsgrow 15</span><br><span class="line"># The command line must be at least one line from the bottom.</span><br><span class="line">menu cmdlinerow 16</span><br><span class="line">menu timeoutrow 16</span><br><span class="line">menu tabmsgrow 18</span><br><span class="line">menu tabmsg Press ENTER to boot or TAB to edit a menu entry</span><br><span class="line">default install</span><br><span class="line">label install</span><br><span class="line">	menu label ^Install</span><br><span class="line">	menu default</span><br><span class="line">	kernel &#x2F;vmlinuz</span><br><span class="line">	append vga&#x3D;788 initrd&#x3D;&#x2F;initrd boot&#x3D;live quiet</span><br><span class="line"></span><br><span class="line">#default vesamenu.c32</span><br><span class="line">default install</span><br><span class="line">prompt 0</span><br><span class="line">timeout 0</span><br></pre></td></tr></table></figure>



<h2 id="用debootstrap构建一个最小环境"><a href="#用debootstrap构建一个最小环境" class="headerlink" title="用debootstrap构建一个最小环境"></a>用debootstrap构建一个最小环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd ~&#x2F;livecd &amp;&amp; su -</span><br><span class="line"># debootstrap --include&#x3D;linux-image-amd64,live-boot --component&#x3D;main,contrib,non-free --arch&#x3D;amd64 rootfs sid http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F;</span><br></pre></td></tr></table></figure>

<p>然后 <code>chroot</code> 进入这个最小环境中，做一些定制工作，包括修改root密码，hostname，安装软件，创建用户什么的，这一步我就不展开讲了，根据你自己的需求定制即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chroot rootfs &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>



<h2 id="将linux内核和initrd复制到工作目录的最顶层"><a href="#将linux内核和initrd复制到工作目录的最顶层" class="headerlink" title="将linux内核和initrd复制到工作目录的最顶层"></a>将linux内核和initrd复制到工作目录的最顶层</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd ~&#x2F;livecd</span><br><span class="line"># cp rootfs&#x2F;boot&#x2F;linuz-*-amd64 vmlinuz</span><br><span class="line"># cp rootfs&#x2F;boot&#x2F;initrd.img* initrd</span><br></pre></td></tr></table></figure>



<h2 id="构建squashfs压缩文件"><a href="#构建squashfs压缩文件" class="headerlink" title="构建squashfs压缩文件"></a>构建squashfs压缩文件</h2><p>进入工作目录 <code>~/livecd</code> 创建新目录 <code>live</code> 然后把刚才得到的 <code>rootfs</code> 目录压缩成squashfs格式的文件放在 <code>live</code>目录下，重命名为<code>filesystem.squashfs</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir live</span><br><span class="line"># mksquashfs rootfs live&#x2F;filesystem.squashfs</span><br></pre></td></tr></table></figure>

<p>然后删除 <code>rootfs</code> 目录即可，或者把他移到其他地方，以备多次对 <code>LiveCD</code> 进行修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># rm -rf rootfs</span><br></pre></td></tr></table></figure>



<h2 id="构建iso文件"><a href="#构建iso文件" class="headerlink" title="构建iso文件"></a>构建iso文件</h2><p>最后一步就是构建定制的 <code>LiveCD</code>，这一步我们使用 <code>xorriso</code> 这个工具来进行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd livecd</span><br><span class="line"># xorriso -as mkisofs -r -V &#39;LiveCD&#39; \</span><br><span class="line">    -J -isohybrid-mbr &#x2F;usr&#x2F;lib&#x2F;ISOLINUX&#x2F;isohdpfx.bin \</span><br><span class="line">    -J -joliet-long  \</span><br><span class="line">    -b isolinux&#x2F;isolinux.bin -c isolinux&#x2F;boot.cat -no-emul-boot \</span><br><span class="line">    -boot-load-size 4 -boot-info-table -eltorito-alt-boot \</span><br><span class="line">    -e boot&#x2F;grub&#x2F;efi.img -no-emul-boot -isohybrid-gpt-basdat -isohybrid-apm-hfsplus livecd&#x2F;  \</span><br><span class="line">    -o livecd.iso</span><br></pre></td></tr></table></figure>

<p>完成之后，我们会得到一个 <code>livecd.iso</code> 的文件，这个就是我们制作出的 <code>LiveCD</code> ，可以把它dd到U盘中使用了。</p>
<h2 id="文章地址"><a href="#文章地址" class="headerlink" title="文章地址"></a>文章地址</h2><ul>
<li><a href="https://forums.debiancn.org/t/debian-livecd/582（**Debian" target="_blank" rel="external nofollow noopener noreferrer">https://forums.debiancn.org/t/debian-livecd/582（**Debian</a> 中文论坛**）</li>
</ul>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义 Ubuntu Server 16.04.2 安装 iso</title>
    <url>/archives/cf3baf5f.html</url>
    <content><![CDATA[<h2 id="下载-Ubuntu-Server-16-04-2-ISO"><a href="#下载-Ubuntu-Server-16-04-2-ISO" class="headerlink" title="下载 Ubuntu Server 16.04.2 ISO"></a>下载 Ubuntu Server 16.04.2 ISO</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;debian.linux.org.tw&#x2F;ubuntu-releases&#x2F;16.04.2&#x2F;ubuntu-16.04.2-server-amd64.iso**</span><br></pre></td></tr></table></figure>

<h2 id="挂载光盘"><a href="#挂载光盘" class="headerlink" title="挂载光盘"></a>挂载光盘</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount -o loop ubuntu-16.04.2-server-amd64.iso &#x2F;mnt</span><br></pre></td></tr></table></figure>

<h2 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~&#x2F;Ubuntu16042</span><br><span class="line">cp -a &#x2F;mnt&#x2F;* ~&#x2F;Ubuntu16042</span><br><span class="line">cp -r &#x2F;mnt&#x2F;.disk ~&#x2F;Ubuntu16042</span><br></pre></td></tr></table></figure>

<h2 id="修改-Ubuntu16042-isolinux-txt-cfg"><a href="#修改-Ubuntu16042-isolinux-txt-cfg" class="headerlink" title="修改 ~/Ubuntu16042/isolinux/txt.cfg"></a>修改 ~/Ubuntu16042/isolinux/txt.cfg</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;Ubuntu16042&#x2F;isolinux&#x2F;txt.cfg</span><br><span class="line"></span><br><span class="line">default ainstall</span><br><span class="line">label ainstall</span><br><span class="line"> menu label ^Auto Install Ubuntu Server</span><br><span class="line"> kernel &#x2F;install&#x2F;vmlinuz</span><br><span class="line"> append file&#x3D;&#x2F;cdrom&#x2F;preseed&#x2F;aubuntu-server.seed vga&#x3D;788 initrd&#x3D;&#x2F;install&#x2F;initrd.gz quiet debian-installer&#x2F;language&#x3D;en debian-installer&#x2F;country&#x3D;TW console-setup&#x2F;ask_detect&#x3D;false keyboard-configuration&#x2F;layoutcode&#x3D;us debian-installer&#x2F;locale&#x3D;en_US ---</span><br><span class="line">label install</span><br><span class="line"> menu label ^Install Ubuntu Server</span><br><span class="line"> kernel &#x2F;install&#x2F;vmlinuz</span><br><span class="line"> append file&#x3D;&#x2F;cdrom&#x2F;preseed&#x2F;ubuntu-server.seed vga&#x3D;788 initrd&#x3D;&#x2F;install&#x2F;initrd.gz quiet ---</span><br></pre></td></tr></table></figure>

<h2 id="建立-Ubuntu16042-preseed-aubuntu-server-seed"><a href="#建立-Ubuntu16042-preseed-aubuntu-server-seed" class="headerlink" title="建立 ~/Ubuntu16042/preseed/aubuntu-server.seed"></a>建立 ~/Ubuntu16042/preseed/aubuntu-server.seed</h2><h3 id="准备安装-LAMP-OpenSSH-Server"><a href="#准备安装-LAMP-OpenSSH-Server" class="headerlink" title="准备安装 LAMP / OpenSSH Server"></a>准备安装 LAMP / OpenSSH Server</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;Ubuntu16042&#x2F;preseed&#x2F;aubuntu-server.seed</span><br><span class="line"></span><br><span class="line">d-i debian-installer&#x2F;locale string en_US.UTF-8</span><br><span class="line">d-i debian-installer&#x2F;locale string en_US</span><br><span class="line">d-i console-setup&#x2F;ask_detect boolean false</span><br><span class="line">d-i console-setup&#x2F;layout string USA</span><br><span class="line">d-i debian-installer&#x2F;language string en</span><br><span class="line">d-i debian-installer&#x2F;country string TW</span><br><span class="line">d-i console-setup&#x2F;ask_detect boolean false</span><br><span class="line">d-i keyboard-configuration&#x2F;xkb-keymap select us </span><br><span class="line">Default user, change</span><br><span class="line">d-i passwd&#x2F;root-login boolean true</span><br><span class="line">d-i passwd&#x2F;make-user boolean false</span><br><span class="line">d-i user-setup&#x2F;encrypt-home boolean false</span><br><span class="line">d-i user-setup&#x2F;allow-password-weak boolean true</span><br><span class="line">d-i netcfg&#x2F;choose_interface select auto</span><br><span class="line">d-i netcfg&#x2F;get_hostname string unassigned-hostname</span><br><span class="line">d-i netcfg&#x2F;get_domain string unassigned-domain</span><br><span class="line">d-i mirror&#x2F;country string manual</span><br><span class="line">d-i mirror&#x2F;http&#x2F;hostname string http:&#x2F;&#x2F;tw.archive.ubuntu.com</span><br><span class="line">d-i mirror&#x2F;http&#x2F;hostname string http:&#x2F;&#x2F;free.nchc.org.tw</span><br><span class="line">d-i mirror&#x2F;http&#x2F;directory string &#x2F;ubuntu</span><br><span class="line">d-i apt-setup&#x2F;services-select multiselect security</span><br><span class="line">d-i apt-setup&#x2F;security_host string free.nchc.org.tw</span><br><span class="line">d-i apt-setup&#x2F;security_path string &#x2F;ubuntu</span><br><span class="line">d-i mirror&#x2F;http&#x2F;proxy string</span><br><span class="line">d-i clock-setup&#x2F;utc boolean false</span><br><span class="line">d-i clock-setup&#x2F;ntp boolean true</span><br><span class="line">d-i time&#x2F;zone string Asia&#x2F;Taipei</span><br><span class="line">d-i partman&#x2F;confirm boolean true</span><br><span class="line">d-i partman&#x2F;choose_partition select finish</span><br><span class="line">d-i partman&#x2F;confirm_nooverwrite boolean true</span><br><span class="line">d-i partman-auto&#x2F;disk string &#x2F;dev&#x2F;[sv]da</span><br><span class="line">d-i partman-auto&#x2F;method string lvm</span><br><span class="line">d-i partman-auto&#x2F;choose_recipe select atomic</span><br><span class="line">d-i partman-lvm&#x2F;device_remove_lvm boolean true</span><br><span class="line">d-i partman-lvm&#x2F;confirm boolean true</span><br><span class="line">d-i partman-lvm&#x2F;confirm_nooverwrite boolean true</span><br><span class="line">d-i partman-auto-lvm&#x2F;guided_size string max</span><br><span class="line">d-i partman-partitioning&#x2F;confirm_write_new_label boolean true</span><br><span class="line">d-i grub-installer&#x2F;grub2_instead_of_grub_legacy boolean true</span><br><span class="line">d-i grub-installer&#x2F;only_debian boolean true</span><br><span class="line">d-i grub-installer&#x2F;bootdev string &#x2F;dev&#x2F;[sv]da</span><br><span class="line">d-i pkgsel&#x2F;update-policy select none</span><br><span class="line">d-i pkgsel&#x2F;include string unity ubuntu-desktop openssh-server</span><br><span class="line">tasksel tasksel&#x2F;first multiselect lamp-server, openssh-server</span><br><span class="line">d-i pkgsel&#x2F;include string openssh-server ntp build-essential rsync less vim ethtool curl lsscsi dstat htop strace</span><br><span class="line">d-i finish-install&#x2F;reboot_in_progress note</span><br></pre></td></tr></table></figure>

<h2 id="制作成-ISO-文件"><a href="#制作成-ISO-文件" class="headerlink" title="制作成 ISO 文件"></a>制作成 ISO 文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;Ubuntu16042</span><br><span class="line">mkisofs -r -V &quot;Ubuntu-Server 16.04.2&quot; -J -l -b isolinux&#x2F;isolinux.bin -c isolinux&#x2F;boot.cat -no-emul -boot-load-size 4 -boot-info-table -o ~&#x2F;ubuntu-16.04.2-server-amd6_0501.iso .</span><br></pre></td></tr></table></figure>

<h2 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h2><p>省略</p>
<h2 id="参考网站："><a href="#参考网站：" class="headerlink" title="参考网站："></a>参考网站：</h2><p><a href="https://github.com/express42/ubuntu-autoinstaller/blob/master/txt.cfg" target="_blank" rel="external nofollow noopener noreferrer">ubuntu-autoinstaller/txt.cfg at master · express42/ubuntu-autoinstaller · GitHub</a></p>
<p><a href="https://help.ubuntu.com/community/InstallCDCustomization" target="_blank" rel="external nofollow noopener noreferrer">InstallCDCustomization - Community Help Wiki</a></p>
<p><a href="https://www.hiroom2.com/2016/05/19/ubuntu-16-04-debian-8-run-pxe-boot-server-for-automated-install/" target="_blank" rel="external nofollow noopener noreferrer">Ubuntu 16.04 / Debian 8: Run PXE boot server for automated install - Narrow Escape</a></p>
<p><a href="https://help.ubuntu.com/16.04/installation-guide/i386/apbs04.html" target="_blank" rel="external nofollow noopener noreferrer">B.4. Contents of the preconfiguration file (for xenial)</a><br><a href="https://help.ubuntu.com/16.04/installation-guide/example-preseed.txt" target="_blank" rel="external nofollow noopener noreferrer">https://help.ubuntu.com/16.04/installation-guide/example-preseed.txt</a></p>
<p><a href="https://askubuntu.com/questions/122505/how-do-i-create-a-completely-unattended-install-of-ubuntu" target="_blank" rel="external nofollow noopener noreferrer">system installation - How do I create a completely unattended install of Ubuntu? - Ask Ubuntu</a></p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>专业创建自定义实时 Debian Live CD</title>
    <url>/archives/3be04a71.html</url>
    <content><![CDATA[<h2 id="安装创建环境软件"><a href="#安装创建环境软件" class="headerlink" title="安装创建环境软件"></a>安装创建环境软件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt install live-build</span><br></pre></td></tr></table></figure>



<h2 id="加快-DebianLiveCD-创建速度"><a href="#加快-DebianLiveCD-创建速度" class="headerlink" title="加快 DebianLiveCD 创建速度"></a>加快 DebianLiveCD 创建速度</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir -p &#x2F;etc&#x2F;live</span><br><span class="line"># vim &#x2F;etc&#x2F;live&#x2F;build.conf</span><br><span class="line">LB_MIRROR_BOOTSTRAP&#x3D;&quot;http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F;&quot;</span><br><span class="line">LB_MIRROR_CHROOT_SECURITY&#x3D;&quot;http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F;&quot;</span><br><span class="line">LB_MIRROR_CHROOT_BACKPORTS&#x3D;&quot;http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F;&quot;</span><br></pre></td></tr></table></figure>



<h2 id="创建-DebianLiveCD"><a href="#创建-DebianLiveCD" class="headerlink" title="创建 DebianLiveCD"></a>创建 DebianLiveCD</h2><p>创建构建的过程如下：</p>
<ol>
<li>我们<code>lb config</code> 在空白目录中执行，生成一堆文件，这些文件代表了我们将来的ISO的文件结构。我们将参数传递给 <em>lb config</em>来个性化这些文件的生成。</li>
<li>我们通过手动修改文件结构来进一步个性化这些文件结构：添加要在ISO生成的不同步骤或ISO引导时执行的脚本，将文件添加到ISO的用户文件夹等。</li>
<li>我们执行<code>lb build</code>，读取这些文件和脚本并神奇地构建ISO，从而生成预期的 <em>.iso</em>文件。</li>
</ol>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir live</span><br><span class="line"># cd live</span><br><span class="line"># cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;live-build&#x2F;examples&#x2F;auto&#x2F;* auto&#x2F;</span><br><span class="line"># cat auto&#x2F;config</span><br><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">lb config noauto \</span><br><span class="line">        &quot;$&#123;@&#125;&quot;</span><br></pre></td></tr></table></figure>



<h3 id="添加个性化配置"><a href="#添加个性化配置" class="headerlink" title="添加个性化配置"></a>添加个性化配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim auto&#x2F;config</span><br><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">lb config noauto \</span><br><span class="line">    --mode debian \</span><br><span class="line">    --architectures i386 \</span><br><span class="line">    --debian-installer false \</span><br><span class="line">    --archive-areas &quot;main contrib non-free&quot; \</span><br><span class="line">    --apt-indices false \</span><br><span class="line">    --memtest none \</span><br><span class="line">    &quot;$&#123;@&#125;&quot;</span><br></pre></td></tr></table></figure>



<h3 id="为LiveCD安装软件"><a href="#为LiveCD安装软件" class="headerlink" title="为LiveCD安装软件"></a>为LiveCD安装软件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># echo vlc &gt;&gt; config&#x2F;package-lists&#x2F;my.list.chroot</span><br></pre></td></tr></table></figure>



<h3 id="开始创建"><a href="#开始创建" class="headerlink" title="开始创建"></a>开始创建</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># lb clean</span><br><span class="line"># lb build</span><br></pre></td></tr></table></figure>



<h2 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h2><ul>
<li><a href="https://www.bustawin.com/create-a-custom-live-debian-9-the-pro-way/#Speed-up_the_building_optional" target="_blank" rel="external nofollow noopener noreferrer">https://www.bustawin.com/create-a-custom-live-debian-9-the-pro-way/#Speed-up_the_building_optional</a></li>
<li><a href="https://github.com/ereuse/workbench-live" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/ereuse/workbench-live</a></li>
</ul>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>项目：创建自定义Kali Linux ISO</title>
    <url>/archives/8feaf38e.html</url>
    <content><![CDATA[<p>该存储库将允许您构建自定义的Kali ISO。主要好处是可以将其用作<a href="https://docs.kali.org/downloading/kali-linux-live-usb-install" target="_blank" rel="external nofollow noopener noreferrer">可启动USB驱动器</a>。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>理想情况下，您应该<strong>在现有的Kali环境中</strong>构建自定义的Kali ISO <strong>。</strong>建议使用<a href="https://www.kali.org/downloads/" target="_blank" rel="external nofollow noopener noreferrer">轻量级</a>或虚拟化（<a href="https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-hyperv-image-download/" target="_blank" rel="external nofollow noopener noreferrer">VMware / VirtualBox</a>）映像。</p>
<p>作为<code>root</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install curl git live-build cdebootstrap</span><br></pre></td></tr></table></figure>

<h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><p>我在<a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom" target="_blank" rel="external nofollow noopener noreferrer">kali-config / variant-custom</a>目录下使用了一个自定义变量。这包括：</p>
<ul>
<li><a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/package-lists/kali.list.chroot" target="_blank" rel="external nofollow noopener noreferrer">来自默认变体</a>（<code>kali-config/variant-custom/package-lists/kali.list.chroot</code>）的<a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/package-lists/kali.list.chroot" target="_blank" rel="external nofollow noopener noreferrer">所有软件包</a></li>
<li><a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/package-lists/custom.list.chroot" target="_blank" rel="external nofollow noopener noreferrer">根据我的喜好附加包</a>（<code>kali-config/variant-custom/package-lists/custom.list.chroot</code>）</li>
<li><a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/hooks/live/customise.chroot" target="_blank" rel="external nofollow noopener noreferrer">自定义脚本</a>（<code>kali-config/variant-custom/hooks/live/customise.chroot</code>）<ul>
<li>克隆<a href="https://github.com/prateepb/dotfiles" target="_blank" rel="external nofollow noopener noreferrer">我的个人点文件</a></li>
<li><a href="https://unix.stackexchange.com/questions/387843/how-can-i-resize-the-applications-menu-item-in-gnome" target="_blank" rel="external nofollow noopener noreferrer">调整gnome菜单的大小</a></li>
</ul>
</li>
</ul>
<p>我还在以下位置自定义了时区，键盘布局和语言环境：</p>
<ul>
<li><a href="https://github.com/prateepb/kali-live-build/blob/master/auto/config" target="_blank" rel="external nofollow noopener noreferrer"><code>auto/config</code></a></li>
<li><a href="https://github.com/prateepb/kali-live-build/blob/master/kali-config/variant-custom/hooks/live/persistence-menu.binary" target="_blank" rel="external nofollow noopener noreferrer"><code>kali-config/variant-custom/hooks/live/persistence-menu.binary</code></a></li>
</ul>
<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>要构建和使用自定义变体：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd kali-live-build</span><br><span class="line">.&#x2F;build.sh --verbose --variant自定义</span><br></pre></td></tr></table></figure>

<p>完成后，可以在以下位置找到生成的ISO映像： <code>images/kali-linux-custom-rolling-amd64.iso</code></p>
<h2 id="代理构建"><a href="#代理构建" class="headerlink" title="代理构建"></a>代理构建</h2><p>如果您可能要运行多个构建，那么通过缓存代理（例如<a href="http://www.squid-cache.org/" target="_blank" rel="external nofollow noopener noreferrer">Squid）</a>路由所有内容很有用。这将显着加快后续运行。</p>
<p>例子<a href="https://github.com/prateepb/kali-live-build/blob/master/squid.conf" target="_blank" rel="external nofollow noopener noreferrer">squid.conf</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd kali-live-build</span><br><span class="line">apt-get install squid</span><br><span class="line">cp squid.conf &#x2F;etc&#x2F;squid&#x2F;squid.conf</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;squid开始</span><br></pre></td></tr></table></figure>

<p>现在，您可以<code>build.sh</code>使用<code>--apt-http-proxy</code>参数运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">出口http_proxy &#x3D; http：&#x2F;&#x2F; localhost：3128 &#x2F;</span><br><span class="line">.&#x2F;build.sh --verbose --variant自定义-\</span><br><span class="line">--apt-http-proxy &#x3D; $ &#123;http_proxy&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul>
<li><code>https://github.com/prateepb/kali-live-build</code></li>
</ul>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>项目：bash 脚本轻松生成实时 Linux ISO 镜像</title>
    <url>/archives/b73d248a.html</url>
    <content><![CDATA[<p>一个脚本可以轻松生成功能齐全的实时Linux ISO映像。这是基于<a href="http://github.com/ivandavidov/minimal" target="_blank" rel="external nofollow noopener noreferrer">Minimal Linux Live</a>的第一个发布版本，并在下一版本中进行了一些改进。已删除所有空行和注释，并且已修改脚本以减少总长度。</p>
<p>下面的脚本使用<strong>Linux内核4.19.12</strong>，<strong>BusyBox 1.29.3</strong>和<strong>Syslinux 6.03</strong>。源包将自动下载和编译。如果您使用的是Ubuntu或Linux Mint，则应该能够通过执行以下命令来解决所有构建依赖项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo apt install wget make gawk gcc bc bison flex xorriso libelf-dev libssl-dev</span><br></pre></td></tr></table></figure>

<p>之后，只需运行以下脚本。它不需要 <strong>root</strong> 权限。最后，生成<strong>minimal_linux_live.iso</strong>文件，在执行脚本的同一目录中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kernel.org&#x2F;linux&#x2F;kernel&#x2F;v4.x&#x2F;linux-4.19.12.tar.xz</span><br><span class="line">wget http:&#x2F;&#x2F;busybox.net&#x2F;downloads&#x2F;busybox-1.29.3.tar.bz2</span><br><span class="line">wget http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kernel.org&#x2F;linux&#x2F;utils&#x2F;boot&#x2F;syslinux&#x2F;syslinux-6.03.tar.xz</span><br><span class="line">mkdir isoimage</span><br><span class="line">tar -xvf linux-4.19.12.tar.xz</span><br><span class="line">tar -xvf busybox-1.29.3.tar.bz2</span><br><span class="line">tar -xvf syslinux-6.03.tar.xz</span><br><span class="line">cd busybox-1.29.3</span><br><span class="line">make distclean defconfig</span><br><span class="line">sed -i &quot;s|.*CONFIG_STATIC.*|CONFIG_STATIC&#x3D;y|&quot; .config</span><br><span class="line">make busybox install</span><br><span class="line">cd _install</span><br><span class="line">rm -f linuxrc</span><br><span class="line">mkdir dev proc sys</span><br><span class="line">echo &#39;#!&#x2F;bin&#x2F;sh&#39; &gt; init</span><br><span class="line">echo &#39;dmesg -n 1&#39; &gt;&gt; init</span><br><span class="line">echo &#39;mount -t devtmpfs none &#x2F;dev&#39; &gt;&gt; init</span><br><span class="line">echo &#39;mount -t proc none &#x2F;proc&#39; &gt;&gt; init</span><br><span class="line">echo &#39;mount -t sysfs none &#x2F;sys&#39; &gt;&gt; init</span><br><span class="line">echo &#39;setsid cttyhack &#x2F;bin&#x2F;sh&#39; &gt;&gt; init</span><br><span class="line">chmod +x init</span><br><span class="line">find . | cpio -R root:root -H newc -o | gzip &gt; ..&#x2F;..&#x2F;isoimage&#x2F;rootfs.gz</span><br><span class="line">cd ..&#x2F;..&#x2F;linux-4.19.12</span><br><span class="line">make mrproper defconfig bzImage</span><br><span class="line">cp arch&#x2F;x86&#x2F;boot&#x2F;bzImage ..&#x2F;isoimage&#x2F;kernel.gz</span><br><span class="line">cd ..&#x2F;isoimage</span><br><span class="line">cp ..&#x2F;syslinux-6.03&#x2F;bios&#x2F;core&#x2F;isolinux.bin .</span><br><span class="line">cp ..&#x2F;syslinux-6.03&#x2F;bios&#x2F;com32&#x2F;elflink&#x2F;ldlinux&#x2F;ldlinux.c32 .</span><br><span class="line">echo &#39;default kernel.gz initrd&#x3D;rootfs.gz&#39; &gt; .&#x2F;isolinux.cfg</span><br><span class="line">xorriso \</span><br><span class="line">  -as mkisofs \</span><br><span class="line">  -o ..&#x2F;minimal_linux_live.iso \</span><br><span class="line">  -b isolinux.bin \</span><br><span class="line">  -c boot.cat \</span><br><span class="line">  -no-emul-boot \</span><br><span class="line">  -boot-load-size 4 \</span><br><span class="line">  -boot-info-table \</span><br><span class="line">  .&#x2F;</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>

<p>请注意，此脚本生成非常小的实时Linux操作系统，仅支持shell，不支持网络。网络功能已在<a href="http://github.com/ivandavidov/minimal" target="_blank" rel="external nofollow noopener noreferrer">Minimal Linux Live</a>项目中正确实现，该项目具有广泛的文档记录和更丰富的功能，但仍然可以生成非常小的实时Linux ISO映像。</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Debian-Live 创建小型 Debain/Ubuntu LiveCD</title>
    <url>/archives/c2eb39f.html</url>
    <content><![CDATA[<h2 id="安装构建环境的应用程序"><a href="#安装构建环境的应用程序" class="headerlink" title="安装构建环境的应用程序"></a>安装构建环境的应用程序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt install \</span><br><span class="line">	live-build \</span><br><span class="line">	debootstrap \</span><br><span class="line">	xorriso \</span><br><span class="line">	squashfs-tools \</span><br><span class="line">	live-boot</span><br></pre></td></tr></table></figure>



<h2 id="创建最小化UbuntuLiveCD"><a href="#创建最小化UbuntuLiveCD" class="headerlink" title="创建最小化UbuntuLiveCD"></a>创建最小化UbuntuLiveCD</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir ubuntu-livecd</span><br><span class="line"># cd ubuntu-livecd</span><br><span class="line"># lb config --mode &quot;ubuntu&quot;</span><br><span class="line"># lb config -d &quot;eoan&quot;</span><br><span class="line"># lb config -p minimal</span><br><span class="line"># lb config --parent-distribution &quot;eoan&quot;</span><br><span class="line"># lb config --parent-archive-areas &quot;main universe&quot;</span><br><span class="line"># lb config --mirror-bootstrap &quot;http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F;&quot;</span><br><span class="line"># lb config --mirror-chroot &quot;http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F;&quot;</span><br><span class="line"># lb config --mirror-binary &quot;http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F;&quot;</span><br><span class="line"># lb build</span><br></pre></td></tr></table></figure>



<h2 id="创建DebianLiveCD"><a href="#创建DebianLiveCD" class="headerlink" title="创建DebianLiveCD"></a>创建DebianLiveCD</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkidr debian-livecd</span><br><span class="line"># cd debian-livecd</span><br><span class="line"># lb config --mode &quot;debian&quot;</span><br><span class="line"># lb config -d &quot;stretch&quot;</span><br><span class="line"># lb config -p minimal</span><br><span class="line"># lb config --parent-distribution &quot;stretch&quot;</span><br><span class="line"># lb config --username future</span><br><span class="line"># lb config --parent-archive-areas &quot;main non-free contrib&quot;</span><br><span class="line"># lb config --mirror-bootstrap &quot;http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F;&quot;</span><br><span class="line"># lb config --mirror-chroot &quot;http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F;&quot;</span><br><span class="line"># lb config --mirror-binary &quot;http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F;&quot;</span><br><span class="line"># lb config --mirror-chroot-security &quot;http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F;&quot;</span><br><span class="line"># lb config --mirror-binary-security &quot;http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F;&quot;</span><br><span class="line"># lb config --mirror-chroot-volatile &quot;http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F;&quot;</span><br><span class="line"># lb config --mirror-debian-installer &quot;http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F;&quot;</span><br></pre></td></tr></table></figure>

<p>为DebianLiveCD添加软件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &lt;&lt; EOF &gt; config&#x2F;package-lists&#x2F;custom.list.chroot</span><br><span class="line">byobu</span><br><span class="line">bzip2</span><br><span class="line">ca-certificates</span><br><span class="line">curl</span><br><span class="line">dnsutils</span><br><span class="line">dstat</span><br><span class="line">ftp</span><br><span class="line">isc-dhcp-client</span><br><span class="line">less</span><br><span class="line">lftp</span><br><span class="line">lsb-release</span><br><span class="line">lsof</span><br><span class="line">lsscsi</span><br><span class="line">net-tools</span><br><span class="line">nmap</span><br><span class="line">ntfs-3g</span><br><span class="line">ntpdate</span><br><span class="line">openssh-client</span><br><span class="line">openssl</span><br><span class="line">parted</span><br><span class="line">patch</span><br><span class="line">procps</span><br><span class="line">psmisc</span><br><span class="line">stress</span><br><span class="line">tcpdump</span><br><span class="line">tree</span><br><span class="line">unzip</span><br><span class="line">vim</span><br><span class="line">wget</span><br><span class="line">whois</span><br><span class="line">zsh</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="开始构建DebainLiveCD"><a href="#开始构建DebainLiveCD" class="headerlink" title="开始构建DebainLiveCD"></a>开始构建DebainLiveCD</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># lb build</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Debian-Live 创建 LiveCD</title>
    <url>/archives/9169e7b2.html</url>
    <content><![CDATA[<h2 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h2><ul>
<li><strong>Debian10 (Buster)</strong></li>
</ul>
<h2 id="添加中文源"><a href="#添加中文源" class="headerlink" title="添加中文源"></a>添加中文源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &lt;&lt; EOF &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F; buster main contrib non-free</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debain&#x2F; buster main contrib non-free</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; buster main contrib non-free</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>



<h2 id="安装构建环境的应用程序"><a href="#安装构建环境的应用程序" class="headerlink" title="安装构建环境的应用程序"></a>安装构建环境的应用程序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt update</span><br><span class="line"># apt install \</span><br><span class="line">	live-build \</span><br><span class="line">	debootstrap \</span><br><span class="line">	xorriso \</span><br><span class="line">	squashfs-tools</span><br></pre></td></tr></table></figure>



<h2 id="创建最小化的LiveCD"><a href="#创建最小化的LiveCD" class="headerlink" title="创建最小化的LiveCD"></a>创建最小化的LiveCD</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir livecd &amp;&amp; cd livecd</span><br><span class="line"># lb clean</span><br><span class="line"># lb build</span><br></pre></td></tr></table></figure>



<h2 id="创建带有救援工具的LiveCD"><a href="#创建带有救援工具的LiveCD" class="headerlink" title="创建带有救援工具的LiveCD"></a>创建带有救援工具的LiveCD</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir livecd &amp;&amp; cd livecd</span><br><span class="line"># lb clean</span><br><span class="line"># lb config --bootappend-live &quot;boot&#x3D;live components locales&#x3D;zh_CN.UTF-8 keyboard-layouts&#x3D;zh&quot;</span><br><span class="line"># echo &quot;aptitude gdebi mc less testdisk ntfs-3g exfat-fuse exfat-utils parted parted-doc links2 gddrescue memtester nullmailer smartmontools lm-sensors&quot; &gt;&gt; config&#x2F;package-lists&#x2F;terminal-rescue.list.chroot</span><br><span class="line"># lb build</span><br></pre></td></tr></table></figure>



<h2 id="创建带有XFCE桌面的LiveCD"><a href="#创建带有XFCE桌面的LiveCD" class="headerlink" title="创建带有XFCE桌面的LiveCD"></a>创建带有XFCE桌面的LiveCD</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># lb clean</span><br><span class="line"># lb config --bootappend-live &quot;boot&#x3D;live components locales&#x3D;zh_CN.UTF-8 keyboard-layouts&#x3D;zh&quot;</span><br><span class="line"># echo &quot;task-german-desktop task-xfce-desktop aptitude bleachbit bluez bluez-hcidump bluez-tools python-bluez bluez hwinfo hwloc libhwloc-plugins libhwloc-doc linux-cpupower gdebi hdparm hotswap hotswap-gui hotswap-text parted parted-doc gparted safecopy testdisk virt-manager wammu distro-info osinfo-db-tools emacs jedit libreoffice libreoffice-l10n-de libreoffice-help-de libreoffice-pdfimport lyx childsplay childsplay-alphabet-sounds-de pysolfc pysolfc-cardsets etherape simple-scan nautilus rhythmbox digikam digikam-doc gtkam gtkam-gimp gimp gimp-data-extras gimp-dds gimp-gap gimp-gluas gimp-gmic gimp-gutenprint gimp-lensfun gimp-plugin-registry gimp-texturize gimp-ufraw gimp-help-de gimp-help-en gwenview inkscape krita krita-l10n okular okular-backend-odp okular-backend-odt okular-extra-backends kdiff3 kdiff3-doc konsole nullmailer icedove icedove-l10n-de hwdata isenkram inxi undistract-me ethstats ethstatus ethtool gftp hashcat macchanger qbittorrent rsync grsync pidgin uget wicd wicd-gtk wifi-radar dosbox dvdisaster dvdisaster-doc exfat-fuse exfat-utils isomaster ntfs-3g screen screenie alsa-tools alsa-tools-gui kile kile-doc kile-l10n less clamav clamdscan clamtk doublecmd-gtk doublecmd-plugins gddrescue ddrescueview locate mbw mc memtester gscan2pdf hddtemp lm-sensors smartmontools smart-notifier gsmartcontrol ultracopier unison-gtk handbrake handbrake-cli recordmydesktop gtk-recordmydesktop vlc vlc-l10n chromium chromium-l10n firefox-esr firefox-esr-l10n-de firefox-esr-ublock-origin firefox-esr-toggle-proxy firefox-esr-useragentswitcher firefox-esr-webdeveloper firefox-esr-noscript firefox-esr-https-everywhere firefox-esr-downthemall links2 privoxy wireless-tools wireshark guake mesa-utils mesa-utils-extra terminator totem kdenlive openshot simplescreenrecorder smplayer nload iftop iptraf-ng nethogs bmon slurm tcptrack vnstat bwm-ng cbm speedometer pktstat ifstat&quot; &gt;&gt; config&#x2F;package-lists&#x2F;xfce-desktop.list.chroot</span><br><span class="line"># lb build</span><br></pre></td></tr></table></figure>



<h2 id="创建带有XFCE桌面的LiveCD-1"><a href="#创建带有XFCE桌面的LiveCD-1" class="headerlink" title="创建带有XFCE桌面的LiveCD"></a>创建带有XFCE桌面的LiveCD</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># lb clean</span><br><span class="line"># lb config --bootappend-live &quot;boot&#x3D;live components locales&#x3D;zh_CN.UTF-8 keyboard-layouts&#x3D;zh&quot;</span><br><span class="line"># echo &quot;task-german-desktop task-xfce-desktop games-finest-light&quot; &gt;&gt; config&#x2F;package-lists&#x2F;xfce-desktop-games-finest-light.list.chroot</span><br><span class="line"># lb build</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 bash 脚本创建自定义的 Debian Live ISO</title>
    <url>/archives/e7b274ff.html</url>
    <content><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul>
<li><a href="https://gitlab.com/ling218" target="_blank" rel="external nofollow noopener noreferrer">https://gitlab.com/ling218</a></li>
</ul>
<h2 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h2><ul>
<li>Debian 10 Buster</li>
</ul>
<h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><ul>
<li>user: root</li>
<li>passwd：toor</li>
<li>hostname: live</li>
<li>mirror: <a href="http://mirrors.ustc.edu.cn/debian/" target="_blank" rel="external nofollow noopener noreferrer">http://mirrors.ustc.edu.cn/debian/</a></li>
</ul>
<h2 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h2><ul>
<li><code>nano build.sh</code> #把下列脚本的内容复制到该脚本</li>
<li><code>chmod u+x build.sh</code></li>
<li><code>./build.sh</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#</span><br><span class="line"># Debian Live Image Custom</span><br><span class="line">#</span><br><span class="line"># Author: Mathias Fredriksson</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">IN_CHROOT&#x3D;0</span><br><span class="line">if [[ $1 &#x3D;&#x3D; chroot ]]; then</span><br><span class="line">	IN_CHROOT&#x3D;1</span><br><span class="line">	shift</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">SCRIPT&#x3D;&quot;$0&quot;</span><br><span class="line">MIRROR&#x3D;&quot;http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F;&quot;</span><br><span class="line">#WORK&#x3D;$(mktemp -d -t live-image.XXXX)</span><br><span class="line">WORK&#x3D;$HOME&#x2F;build</span><br><span class="line">CHROOT&#x3D;&quot;$WORK&#x2F;chroot&quot;</span><br><span class="line">mkdir -p &quot;$WORK&quot;</span><br><span class="line"></span><br><span class="line">prepare() &#123;</span><br><span class="line">	apt-get -y install \</span><br><span class="line">		debootstrap \</span><br><span class="line">		squashfs-tools \</span><br><span class="line">		xorriso \</span><br><span class="line">		grub-pc-bin \</span><br><span class="line">		grub-efi-amd64-bin \</span><br><span class="line">		mtools</span><br><span class="line"></span><br><span class="line">	debootstrap \</span><br><span class="line">		--arch&#x3D;amd64 \</span><br><span class="line">		--variant&#x3D;minbase \</span><br><span class="line">		stretch \</span><br><span class="line">		&quot;$CHROOT&quot; \</span><br><span class="line">		$MIRROR</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cont_in_chroot() &#123;</span><br><span class="line">	local name</span><br><span class="line"></span><br><span class="line">	name&#x3D;&quot;$(basename &quot;$SCRIPT&quot;)&quot;</span><br><span class="line">	cp -a &quot;$SCRIPT&quot; &quot;$CHROOT&quot;</span><br><span class="line"></span><br><span class="line">	mount --rbind &#x2F;dev &quot;$CHROOT&quot;&#x2F;dev</span><br><span class="line">	mount --make-rslave &quot;$CHROOT&quot;&#x2F;dev</span><br><span class="line">	mount --rbind &#x2F;proc &quot;$CHROOT&quot;&#x2F;proc</span><br><span class="line">	mount --make-rslave &quot;$CHROOT&quot;&#x2F;proc</span><br><span class="line">	mount --rbind &#x2F;sys &quot;$CHROOT&quot;&#x2F;sys</span><br><span class="line">	mount --make-rslave &quot;$CHROOT&quot;&#x2F;sys</span><br><span class="line"></span><br><span class="line">	chroot &quot;$CHROOT&quot; &#x2F;bin&#x2F;bash .&#x2F;&quot;$name&quot; chroot &quot;$@&quot;</span><br><span class="line"></span><br><span class="line">	# Try to unmount a few times since this doesn&#39;t alway work on the first try...</span><br><span class="line">	grep &quot;$CHROOT&quot; &#x2F;proc&#x2F;mounts | cut -f2 -d&quot; &quot; | sort -r | xargs umount -n || \</span><br><span class="line">		grep &quot;$CHROOT&quot; &#x2F;proc&#x2F;mounts | cut -f2 -d&quot; &quot; | sort -r | xargs umount -n || \</span><br><span class="line">		grep &quot;$CHROOT&quot; &#x2F;proc&#x2F;mounts | cut -f2 -d&quot; &quot; | sort -r | xargs umount -n</span><br><span class="line"></span><br><span class="line">	rm &quot;$CHROOT&#x2F;$name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chroot_prepare() &#123;</span><br><span class="line">	echo live &gt; &#x2F;etc&#x2F;hostname</span><br><span class="line"></span><br><span class="line">	# Set root password to &#39;live&#39;.</span><br><span class="line">	echo $&#39;toor\ntoor&#39; | passwd root</span><br><span class="line"></span><br><span class="line">	apt-get update</span><br><span class="line">	apt-get -y install --no-install-recommends \</span><br><span class="line">		linux-image-amd64 \</span><br><span class="line">		live-boot \</span><br><span class="line">		systemd-sysv</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chroot_install_tools() &#123;</span><br><span class="line">	cat &lt;&lt;-EOS &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;contrib-non-free.list</span><br><span class="line">	deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F; stretch main contrib non-free</span><br><span class="line">	EOS</span><br><span class="line"></span><br><span class="line">	apt update</span><br><span class="line">	apt-get -y install --no-install-recommends \</span><br><span class="line">		grub-pc-bin \</span><br><span class="line">		grub-efi-amd64-bin \</span><br><span class="line">		sudo \</span><br><span class="line">		curl \</span><br><span class="line">		hdparm \</span><br><span class="line">		sdparm \</span><br><span class="line">		pciutils \</span><br><span class="line">		usbutils \</span><br><span class="line">		dnsutils \</span><br><span class="line">		moreutils \</span><br><span class="line">		net-tools \</span><br><span class="line">		dosfstools \</span><br><span class="line">		openssh-server \</span><br><span class="line">		openssh-client \</span><br><span class="line">		nano \</span><br><span class="line">		vim \</span><br><span class="line">		zsh \</span><br><span class="line">		lsof \</span><br><span class="line">		lshw \</span><br><span class="line">		less \</span><br><span class="line">		rsync \</span><br><span class="line">		smartmontools \</span><br><span class="line">		intel-microcode \</span><br><span class="line">		cryptsetup \</span><br><span class="line">		lvm2 \</span><br><span class="line">		mdadm</span><br><span class="line"></span><br><span class="line">	chsh -s &#x2F;bin&#x2F;zsh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chroot_install_zfs() &#123;</span><br><span class="line">	cat &lt;&lt;-EOS &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;zfs.list</span><br><span class="line">	deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; stretch-backports main contrib non-free</span><br><span class="line">	EOS</span><br><span class="line"></span><br><span class="line">	apt-get update</span><br><span class="line">	apt-get -y install dpkg-dev linux-headers-amd64</span><br><span class="line">	apt-get -y install -t stretch-backports zfs-dkms</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chroot_finalize() &#123;</span><br><span class="line">	apt-get clean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">finalize() &#123;</span><br><span class="line">	mkdir -p &quot;$WORK&quot;&#x2F;&#123;scratch,image&#x2F;live&#125;</span><br><span class="line"></span><br><span class="line">	mksquashfs \</span><br><span class="line">		&quot;$CHROOT&quot; \</span><br><span class="line">		&quot;$WORK&quot;&#x2F;image&#x2F;live&#x2F;filesystem.squashfs \</span><br><span class="line">		-e boot</span><br><span class="line"></span><br><span class="line">	cp &quot;$CHROOT&quot;&#x2F;boot&#x2F;vmlinuz-* &quot;$CHROOT&quot;&#x2F;boot&#x2F;initrd.img-* \</span><br><span class="line">		&quot;$WORK&quot;&#x2F;image&#x2F;live</span><br><span class="line"></span><br><span class="line">	cat &lt;&lt;EOF &gt; &quot;$WORK&quot;&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line">insmod all_video</span><br><span class="line">insmod play</span><br><span class="line">play 960 440 1 0 4 440 1</span><br><span class="line">if [ \$&#123;iso_path&#125; ] ; then</span><br><span class="line">  set loopback&#x3D;&quot;findiso&#x3D;\$&#123;iso_path&#125;&quot;</span><br><span class="line">fi</span><br><span class="line">search --set&#x3D;root --file &#x2F;DEBIAN_LIVE</span><br><span class="line">set default&#x3D;&quot;0&quot;</span><br><span class="line">set timeout&#x3D;5</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">	(cd &quot;$CHROOT&quot;&#x2F;boot || exit 1</span><br><span class="line">		for kernel in vmlinuz-*; do</span><br><span class="line">			version&#x3D;$&#123;kernel#vmlinuz-&#125;</span><br><span class="line">			cat &lt;&lt;EOF &gt;&gt; &quot;$WORK&quot;&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line">menuentry &quot;Debian GNU&#x2F;Linux Live (kernel $version)&quot; &#123;</span><br><span class="line">  linux  &#x2F;live&#x2F;vmlinuz-$version boot&#x3D;live components &quot;\$&#123;loopback&#125;&quot;</span><br><span class="line">  initrd &#x2F;live&#x2F;initrd.img-$version</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">		done</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	# Create file used by grub to search for boot device.</span><br><span class="line">	touch &quot;$WORK&quot;&#x2F;image&#x2F;DEBIAN_LIVE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create_iso() &#123;</span><br><span class="line">	grub-mkstandalone \</span><br><span class="line">		--format&#x3D;x86_64-efi \</span><br><span class="line">		--output&#x3D;&quot;$WORK&quot;&#x2F;scratch&#x2F;bootx64.efi \</span><br><span class="line">		--locales&#x3D;&quot;&quot; \</span><br><span class="line">		--fonts&#x3D;&quot;&quot; \</span><br><span class="line">		&quot;boot&#x2F;grub&#x2F;grub.cfg&#x3D;$WORK&#x2F;scratch&#x2F;grub.cfg&quot;</span><br><span class="line"></span><br><span class="line">	(cd &quot;$WORK&quot;&#x2F;scratch</span><br><span class="line">		dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;efiboot.img bs&#x3D;1M count&#x3D;10</span><br><span class="line">		mkfs.vfat efiboot.img</span><br><span class="line">		mmd -i efiboot.img efi efi&#x2F;boot</span><br><span class="line">		mcopy -i efiboot.img .&#x2F;bootx64.efi ::efi&#x2F;boot&#x2F;</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	grub-mkstandalone \</span><br><span class="line">		--format&#x3D;i386-pc \</span><br><span class="line">		--output&#x3D;&quot;$WORK&quot;&#x2F;scratch&#x2F;core.img \</span><br><span class="line">		--install-modules&#x3D;&quot;linux normal iso9660 biosdisk memdisk search tar ls&quot; \</span><br><span class="line">		--modules&#x3D;&quot;linux normal iso9660 biosdisk search&quot; \</span><br><span class="line">		--locales&#x3D;&quot;&quot; \</span><br><span class="line">		--fonts&#x3D;&quot;&quot; \</span><br><span class="line">		&quot;boot&#x2F;grub&#x2F;grub.cfg&#x3D;$WORK&#x2F;scratch&#x2F;grub.cfg&quot;</span><br><span class="line"></span><br><span class="line">	cat &#x2F;usr&#x2F;lib&#x2F;grub&#x2F;i386-pc&#x2F;cdboot.img &quot;$WORK&quot;&#x2F;scratch&#x2F;core.img \</span><br><span class="line">		&gt; &quot;$WORK&quot;&#x2F;scratch&#x2F;bios.img</span><br><span class="line"></span><br><span class="line">	xorriso \</span><br><span class="line">		-as mkisofs \</span><br><span class="line">		-iso-level 3 \</span><br><span class="line">		-full-iso9660-filenames \</span><br><span class="line">		-volid &quot;DEBIAN_LIVE&quot; \</span><br><span class="line">		-eltorito-boot boot&#x2F;grub&#x2F;bios.img \</span><br><span class="line">		-no-emul-boot \</span><br><span class="line">		-boot-load-size 4 \</span><br><span class="line">		-boot-info-table \</span><br><span class="line">		--eltorito-catalog boot&#x2F;grub&#x2F;boot.cat \</span><br><span class="line">		--grub2-boot-info \</span><br><span class="line">		--grub2-mbr &#x2F;usr&#x2F;lib&#x2F;grub&#x2F;i386-pc&#x2F;boot_hybrid.img \</span><br><span class="line">		-eltorito-alt-boot \</span><br><span class="line">		-e EFI&#x2F;efiboot.img \</span><br><span class="line">		-no-emul-boot \</span><br><span class="line">		-append_partition 2 0xef &quot;$WORK&quot;&#x2F;scratch&#x2F;efiboot.img \</span><br><span class="line">		-output &quot;$WORK&#x2F;ling218_linux.iso&quot; \</span><br><span class="line">		-graft-points \</span><br><span class="line">		&quot;$WORK&#x2F;image&quot; \</span><br><span class="line">		&#x2F;boot&#x2F;grub&#x2F;bios.img&#x3D;&quot;$WORK&quot;&#x2F;scratch&#x2F;bios.img \</span><br><span class="line">		&#x2F;EFI&#x2F;efiboot.img&#x3D;&quot;$WORK&quot;&#x2F;scratch&#x2F;efiboot.img</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (( IN_CHROOT )); then</span><br><span class="line">	chroot_prepare</span><br><span class="line">	chroot_install_tools</span><br><span class="line">	chroot_install_zfs</span><br><span class="line">	chroot_finalize</span><br><span class="line">	exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">prepare</span><br><span class="line">cont_in_chroot &quot;$@&quot;</span><br><span class="line">finalize</span><br><span class="line">create_iso</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>如何构建可安装的 DEBIAN LIVE CD</title>
    <url>/archives/fa8c066e.html</url>
    <content><![CDATA[<h2 id="它是什么？"><a href="#它是什么？" class="headerlink" title="它是什么？"></a>它是什么？</h2><p>Live-build（以前称为live-helper）是一个命令行工具，其中包含用于从配置目录构建实时系统的组件。它是一组脚本，用于完全自动化地构建debian live系统映像，并自定义构建Live映像的各个方面。安装时，Live-build会使用三个命令：lb clean清理chroot环境，lb config指定构建选项以及lb build开始构建。显然lb config，这将是唯一困难的命令。</p>
<p>让我们从您最喜欢的终端仿真器开始，并在您想要的任何目录下工作（我从mate-terminal转储我的位置开始/home/user）。</p>
<h2 id="安装实时构建工具"><a href="#安装实时构建工具" class="headerlink" title="安装实时构建工具"></a>安装实时构建工具</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su -</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install live-build</span><br></pre></td></tr></table></figure>

<h2 id="使用实时构建"><a href="#使用实时构建" class="headerlink" title="使用实时构建"></a>使用实时构建</h2><p>现在，我们为现场CD项目创建一个文件夹，以使所有内容都保持良好状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir live</span><br><span class="line">cd live</span><br><span class="line">lb clean</span><br></pre></td></tr></table></figure>

<p>现在，我们为lb config创建脚本。<br>使用除config之外的任何名称保存此脚本，否则lb config将无法创建/usr/lib/live/build/config/common（我称为tempy）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">lb config \</span><br><span class="line">--mode debian \</span><br><span class="line">--system live \</span><br><span class="line">--interactive shell \</span><br><span class="line">--distribution jessie \</span><br><span class="line">--debian-installer live \</span><br><span class="line">--architecture i386 \</span><br><span class="line">--archive-areas &quot;main contrib non-free&quot; \</span><br><span class="line">--security true \</span><br><span class="line">--updates true \</span><br><span class="line">--binary-images iso-hybrid \</span><br><span class="line">--memtest memtest86+ \</span><br></pre></td></tr></table></figure>
<p>特殊考虑：<br>该脚本主要是自我解释。当然，它指定的是debian，jessie，debian的实时安装程序，32位（如果您想要64位构建，请更改–architecture i386为–architecture amd64，存储库的所有区域，所有更新，isohybrid（在具有持久性的闪存驱动器上工作）和memtest86 +。奇怪的是–interactive shell；作为构建过程的一部分，您将被转储到chroot环境中以配置新的发行版。您将需要这样做，以便可以在将系统压缩到最小容量之前安装软件包并进行其他配置。 iso。</p>
<p>通过lb config对手册中其他选项的大量故障排除，我发现诸如–checksums和的其他选项–grub-splash不起作用。它们是需要固定的选项（我想还有很多其他选项），但是确实可以轻松解决，例如…</p>
<p>构建完iso之后，用于md5sum生成md5校验和。对于–grub-splash，请转到/usr/share/live/build/bootloaders，您将看到一堆用于引导加载程序配置的文件夹。进入每个文件夹并删除splash.svg，并用所需的任何图像替换，只要它被调用即可splash.png。</p>
<p>回到它。<br>config需要成为可执行文件。<br><code>chmod 700 tempy</code><br>然后我们执行。<br><code>./tempy</code><br>让我们开始吧。<br>lb build<br>不要忘记我们–interactive shell在执行的脚本中指定了。输入该命令lb build将开始构建过程，下载所需的一切并将它们放在一起，最终将您转储到chroot环境中进行更多配置。<br>我们现在要安装软件包。我将为此使用分发包列表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install task-ssh-server task-laptop task-print-server xorg alsa-base laptop-mode-tools cryptsetup live-config-systemd tor firmware-linux-nonfree firmware-ralink firmware-realtek firmware-atheros firmware-iwlwifi firmware-brcm80211 firmware-b43-installer flashplugin-nonfree lightdm mate-desktop-environment-core caja ufw dconf-editor caja-gksu caja-open-terminal mate-user-share mate-applets mate-settings-daemon mate-utils mate-control-center mate-notification-daemon mate-system-tools mate-screensaver mate-power-manager mate-system-monitor openvpn network-manager-gnome samba hardinfo pavucontrol leafpad iceweasel libreoffice-calc libreoffice-writer vlc gimp atril pidgin deluge gparted gdebi brasero engrampa galculator gpicview gksu synaptic xsane system-config-printer grub2-common frozen-bubble chromium-bsu quadrapassel gweled remmina xrdp extlinux florence</span><br></pre></td></tr></table></figure>
<p>特别注意事项：请<br>密切注意，您将看到包装grub2-common。这是为了节省时间，无需找出偶数–bootloader选项是否lb config有效。如果我们现在不在软件包中包含引导加载程序，您将看到生成的构建中的debian安装程序无法安装引导加载程序。这就是为什么我们现在在此包括此软件包的原因。</p>
<p>是的，我们要安装这些软件包。<br>其他配置。<br>一旦安装了所需的所有软件包，我们就可以在这里完成构建。但是，您可能还不想。我推荐三件事。首先在内部/etc/Network-manager/Network-manager.conf并将其更改为managed=false，managed=true以便网络管理员可以管理网络接口。</p>
<p>第二，我还建议配置构建的默认用户参数。为此，您可以将用户主目录的全部内容复制到/live/chroot/etc/skel（隐藏的文件夹和所有文件夹）中。我要做的是在系统上创建一个新用户，然后进行配置。屏幕保护程序，电源设置，程序规范，主题等。然后，我收获新用户主目录的内容（隐藏的文件夹和所有内容；请不要提供个人文档），然后将它们全部放入/live/chroot/etc/skel。现在，您在构建中已为每个将来的用户指定了查看桌面的方式。</p>
<p>第三是安装在debian仓库中找不到的软件包。再次，如前所述；我们可以将文档复制到chroot环境。一旦安装了这些额外的软件包，请删除软件包文件，因为它们将显示在最终产品的文件结构中，这对将来的用户或您自己忘记的情况都没有意义。</p>
<p>如果需要，您可以继续配置其他内容。例如更名（我不在这里，因此我不在此关注）。但是，如果您对事情的现状感到满意，请继续执行下一步。</p>
<p>完成构建。 这样，您将退出chroot环境，并通过下载所需的任何内容完成其工作，并最终将构建压缩到文件系统中，然后将其包含在iso文件中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br><span class="line">lb build</span><br></pre></td></tr></table></figure>
<p>命名您的iso，创建md5校验和文件，然后仔细检查md5校验和。 我们已经重命名了iso，创建了一个md5校验和文件，并将md5校验和与iso（通过了它）进行了比较。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv live-image-i386.hybrid.iso mybuild.iso</span><br><span class="line">md5sum mybuild.iso &gt; mybuild.md5</span><br><span class="line">md5sum -c mybuild.md5</span><br></pre></td></tr></table></figure>

<p><strong>原文地址：</strong></p>
<ul>
<li><a href="https://terkeyberger.wordpress.com/2016/05/14/live-build-how-to-build-an-installable-debian-live-cd/" target="_blank" rel="external nofollow noopener noreferrer">https://terkeyberger.wordpress.com/2016/05/14/live-build-how-to-build-an-installable-debian-live-cd/</a></li>
</ul>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>如何：自定义您的 Ubuntu Live CD</title>
    <url>/archives/7138f05c.html</url>
    <content><![CDATA[<p>Live CD 非常棒，它们使您无需安装即可试用发行版。它们使您可以在任何计算机上运行自己喜欢的发行版，除此之外，它们还可以方便地恢复系统。</p>
<p>Ubuntu live CD已经打包了一些漂亮的软件，可以让您使用Live CD进行几乎所有的事情，但是仍然，它们可能是一些您不需要的软件，或者其中包含一些软件，不见了。</p>
<p>另一个为此的专业人士是，通过自定义图像，您将能够安装</p>
<p>本教程将显示一些步骤，以通过删除一些组件并添加一些其他组件来根据需要自定义Ubuntu Live CD。</p>
<p>在本教程中，我们将按照以下规范重新制作Ubuntu Gutsy Gibbon 7.10 Live CD：</p>
<ul>
<li>删除非英语语言包</li>
<li>更新实时CD中随附的软件版本</li>
<li>启用Universe和Multiverse存储库</li>
<li>包括divx，mp3支持，realplayer…。</li>
<li>包括ndiswrapper支持</li>
<li>添加Firefox Flash-nonfree插件，添加Skype。</li>
<li>添加一些网络故障排除工具：traceroute，wireshark，kismet…</li>
</ul>
<p>生成的图像将大于800M，因此它不适合CD，但可以适合DVD。</p>
<h2 id="准备主机"><a href="#准备主机" class="headerlink" title="准备主机"></a>准备主机</h2><p>首先，我们需要获取当前的Gutsy Gibbon Live CD映像并将其存储在〜/ Desktop上，而且，我们将需要安装额外的软件来重建我们的gutsy live CD squashfs：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install squashfs-tools chroot</span><br></pre></td></tr></table></figure>

<p>现在让我们开始设置工作环境。首先，我们将iso安装在/ tmp / livecd下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir &#x2F;tmp&#x2F;livecd</span><br><span class="line">$ sudo mount -o loop ~&#x2F;Desktop&#x2F;ubuntu-7.10-desktop-i386.iso &#x2F;tmp&#x2F;livecd</span><br></pre></td></tr></table></figure>

<p>然后在工作目录（<em>〜/ livecd</em>）中创建一个包含未来CD映像（<em>cd</em>）的目录，并将所有CD内容（但<em>casper / filesystem.squashfs</em>）复制到我们的〜/ livecd / cd目录中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir ~&#x2F;livecd</span><br><span class="line">$ mkdir ~&#x2F;livecd&#x2F;cd</span><br><span class="line">$ rsync --exclude&#x3D;&#x2F;casper&#x2F;filesystem.squashfs -a &#x2F;tmp&#x2F;livecd&#x2F; ~&#x2F;livecd&#x2F;cd</span><br></pre></td></tr></table></figure>

<p>这将复制squashfs文件以外的所有文件，该文件是包含我们实时CD文件系统的压缩文件。</p>
<p>现在，我们需要将casper / filesystem.squashfs挂载到名为〜/ livecd / squashfs的目录中，以便将其内容复制到要编辑实时CD文件系统的目录中：<em>〜/ livecd / custom</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir ~&#x2F;livecd&#x2F;squashfs</span><br><span class="line">$ mkdir ~&#x2F;livecd&#x2F;custom</span><br><span class="line">$ sudo modprobe squashfs</span><br><span class="line">$ sudo mount -t squashfs -o loop &#x2F;tmp&#x2F;livecd&#x2F;casper&#x2F;filesystem.squashfs ~&#x2F;livecd&#x2F;squashfs&#x2F;</span><br><span class="line">$ sudo cp -a ~&#x2F;livecd&#x2F;squashfs&#x2F;* ~&#x2F;livecd&#x2F;custom</span><br></pre></td></tr></table></figure>

<p>最后，让/etc/resolv.conf和/ etc / hosts复制到我们的〜/ livecd / custom / etc中，这样我们就可以从要定制的映像中访问网络（通过chroot）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo cp &#x2F;etc&#x2F;resolv.conf &#x2F;etc&#x2F;hosts ~&#x2F;livecd&#x2F;custom&#x2F;etc&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="进入我们的未来形象："><a href="#进入我们的未来形象：" class="headerlink" title="进入我们的未来形象："></a>进入我们的未来形象：</h2><p>为了自定义映像，我们将<em>chroot</em>更改为〜/ livecd / custom目录，并安装一些必要的伪文件系统（/ proc和/ sys）。从那里，我们将能够自定义Live CD。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo chroot ~&#x2F;livecd&#x2F;custom</span><br><span class="line"># mount -t proc none &#x2F;proc&#x2F;</span><br><span class="line"># mount -t sysfs none &#x2F;sys&#x2F;</span><br><span class="line"># export HOME&#x3D;&#x2F;root</span><br></pre></td></tr></table></figure>

<h2 id="定制我们未来的现场CD"><a href="#定制我们未来的现场CD" class="headerlink" title="定制我们未来的现场CD"></a>定制我们未来的现场CD</h2><h3 id="移除包装"><a href="#移除包装" class="headerlink" title="移除包装"></a>移除包装</h3><p>首先，我们将删除非英语语言包，并且为了释放更多空间，我们将删除gnome-games包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get remove --purge gnome-games*</span><br><span class="line"> # apt-get remove --purge &#96;dpkg-query -W --showformat&#x3D;&#39;$&#123;Package&#125;\n&#39; | grep language-pack | egrep -v &#39;\-en&#39;&#96;</span><br></pre></td></tr></table></figure>

<p>请注意，您可能想删除其他一些软件。为了查看已安装的软件，您可以运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dpkg-query -W --showformat&#x3D;&#39;$&#123;Package&#125;\n&#39; | less</span><br></pre></td></tr></table></figure>

<h3 id="更新现有图像"><a href="#更新现有图像" class="headerlink" title="更新现有图像"></a>更新现有图像</h3><p>现在我们已经删除了不需要的软件，我们可以更新<em>/etc/apt/sources.list</em>以便启用<em>gutsy-updates</em>，<em>gutsy-security</em>和<em>合作伙伴</em>存储库以及<em>Universe</em>和<em>Multiverse</em>存储库，以便我们可以安装vmware-服务器。</p>
<p>打开并编辑<em>/etc/apt/sources.list</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<p>并使它看起来像：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu gutsy main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu gutsy main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu gutsy-updates main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu gutsy-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;security.ubuntu.com&#x2F;ubuntu gutsy-security main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;security.ubuntu.com&#x2F;ubuntu gutsy-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;archive.canonical.com&#x2F;ubuntu gutsy partner</span><br><span class="line">deb-src http:&#x2F;&#x2F;archive.canonical.com&#x2F;ubuntu gutsy partner</span><br></pre></td></tr></table></figure>

<p>现在，我们可以通过运行以下命令更新映像：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get update</span><br><span class="line"># apt-get dist-upgrade</span><br></pre></td></tr></table></figure>

<h3 id="安装新软件包"><a href="#安装新软件包" class="headerlink" title="安装新软件包"></a>安装新软件包</h3><p>让我们安装可能需要的所有多媒体包。按照<a href="https://www.debuntu.org/how-to-play-dvd-under-ubuntu/" target="_blank" rel="external nofollow noopener noreferrer">在Ubuntu下播放DVD</a>，我们需要安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get install gstreamer0.10-ffmpeg gstreamer0.10-plugins-ugly gstreamer0.10-plugins-ugly-multiverse gstreamer0.10-plugins-bad gstreamer0.10-plugins-bad-multiverse vlc mplayer mplayer-fonts</span><br><span class="line"># &#x2F;usr&#x2F;share&#x2F;doc&#x2F;libdvdread3&#x2F;install-css.sh</span><br></pre></td></tr></table></figure>

<p>然后，安装<strong>RealPlayer</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wget http:&#x2F;&#x2F;www.debian-multimedia.org&#x2F;pool&#x2F;main&#x2F;r&#x2F;realplay&#x2F;realplayer_10.0.9-0.1_i386.deb -O &#x2F;tmp&#x2F;realplay.deb</span><br><span class="line"># dpkg -i &#x2F;tmp&#x2F;realplay.deb</span><br></pre></td></tr></table></figure>

<p>现在，让我们安装一些未在Ubuntu live cd上默认包含的utils，但在大多数情况下它们都非常方便：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get install rar unrar unace-nonfree</span><br></pre></td></tr></table></figure>

<p>另外，让我们安装一些无线网络实用程序，以便我们可以通过实时CD来实现无线功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get install ndiswrapper-common ndiswrapper-utils-1.9 cabextract unshield \</span><br><span class="line"> bcm43xx-fwcutter \</span><br><span class="line"> kismet aircrack-ng</span><br></pre></td></tr></table></figure>

<p>让我们添加其他一些网络网络实用工具：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get install wireshark nmap ettercap traceroute</span><br></pre></td></tr></table></figure>

<p>另外，我们将添加一些Firefox插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get install flashplugin-nonfree mozilla-plugin-vlc</span><br></pre></td></tr></table></figure>

<p>在此之上，我希望能够使用skype和vmware-server：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get install libqt4-core libqt4-gui</span><br><span class="line"># wget http:&#x2F;&#x2F;skype.com&#x2F;go&#x2F;getskype-linux-ubuntu -O &#x2F;tmp&#x2F;skype.deb</span><br><span class="line"># dpkg -i &#x2F;tmp&#x2F;skype.deb</span><br><span class="line"># apt-get install vmware-server</span><br></pre></td></tr></table></figure>

<p>好了，就是这样，我们现在拥有使用实时CD时需要的任何软件。</p>
<p>现在是时候进行一些清理了。</p>
<h2 id="清理chroot"><a href="#清理chroot" class="headerlink" title="清理chroot"></a>清理chroot</h2><p>当我们安装软件包时，<em>apt</em>缓存软件包，我们将需要删除它们以节省一些空间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get clean</span><br></pre></td></tr></table></figure>

<p>另外，/ tmp中有一些文件需要删除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># rm -rf &#x2F;tmp&#x2F;*</span><br></pre></td></tr></table></figure>

<p>在chroot之前，我们添加了2个文件：/ etc / hosts和/etc/resolv.conf，让我们删除它们：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># rm -f &#x2F;etc&#x2F;hosts &#x2F;etc&#x2F;resolv.conf</span><br></pre></td></tr></table></figure>

<p>最后，我们准备退出chroot并重新打包CD。我们首先需要卸载/ proc和/ sys：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># umount &#x2F;proc&#x2F;</span><br><span class="line"># umount &#x2F;sys&#x2F;</span><br><span class="line"># exit</span><br></pre></td></tr></table></figure>

<p>最后，回到主机，修改了一些软件包，我们需要重建一些清单文件，重新创建squashfs和重新创建ISO。</p>
<h2 id="重新创建ISO"><a href="#重新创建ISO" class="headerlink" title="重新创建ISO"></a>重新创建ISO</h2><p>Fisrt，让我们重新创建清单文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ chmod +w ~&#x2F;livecd&#x2F;cd&#x2F;casper&#x2F;filesystem.manifest</span><br><span class="line">$ sudo chroot ~&#x2F;livecd&#x2F;custom dpkg-query -W --showformat&#x3D;&#39;$&#123;Package&#125; $&#123;Version&#125;\n&#39; &gt; ~&#x2F;livecd&#x2F;cd&#x2F;casper&#x2F;filesystem.manifest</span><br><span class="line">sudo cp ~&#x2F;livecd&#x2F;cd&#x2F;casper&#x2F;filesystem.manifest ~&#x2F;livecd&#x2F;cd&#x2F;casper&#x2F;filesystem.manifest-desktop</span><br></pre></td></tr></table></figure>

<p>并重新生成squashfs文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo mksquashfs ~&#x2F;livecd&#x2F;custom ~&#x2F;livecd&#x2F;cd&#x2F;casper&#x2F;filesystem.squashfs</span><br><span class="line">Parallel mksquashfs: Using 2 processors</span><br><span class="line">Creating little endian 3.0 filesystem on ~&#x2F;livecd&#x2F;cd&#x2F;casper&#x2F;filesystem.squashfs, block size 65536.</span><br><span class="line">....</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>现在，或者，您可能想要自定义文件：〜/ livecd / cd / README.diskdefines</p>
<p>最后，更新〜/ livecd / cd / md5sum.txt，其中包含〜/ livecd / cd md5和中的文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo rm ~&#x2F;livecd&#x2F;cd&#x2F;md5sum.txt</span><br><span class="line"> $ sudo -s</span><br><span class="line"> # (cd ~&#x2F;livecd&#x2F;cd &amp;&amp; find . -type f -print0 | xargs -0 md5sum &gt; md5sum.txt)</span><br></pre></td></tr></table></figure>

<p>现在我们差不多完成了，剩下的最后一件事就是也可以使用以下命令创建ISO：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;livecd&#x2F;cd</span><br><span class="line">$ sudo mkisofs -r -V &quot;Ubuntu-Live-Custom&quot; -b isolinux&#x2F;isolinux.bin -c isolinux&#x2F;boot.cat -cache-inodes -J -l -no-emul-boot -boot-load-size 4 -boot-info-table -o ~&#x2F;Desktop&#x2F;Ubuntu-Live-7.10-custom.iso .</span><br></pre></td></tr></table></figure>

<p>在这里，您现在可以通过使用或使用虚拟化/仿真软件（例如qemu，kvm，vmware…）启动计算机来测试映像。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>只需做一些工作，就可以自定义Ubuntu Live CD，以删除/包含某些软件，确保该Live CD是最新的，并且最重要的是，允许管理员部署预先定制的Ubuntu发行版。 </p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>如何：创建完全无人值守的 Ubuntu 安装</title>
    <url>/archives/9e84e35.html</url>
    <content><![CDATA[<p>把Ubuntu镜像文件刻录到CD或U盘存储介质中，插入计算机上，引导起动，无需手动操作，自动安装Ubuntu。</p>
<a id="more"></a>



<h2 id="完整的解决方案是："><a href="#完整的解决方案是：" class="headerlink" title="完整的解决方案是："></a>完整的解决方案是：</h2><p>重新制作CD，即下载非图形Ubuntu安装ISO镜像文件，并挂载。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo su -</span><br><span class="line"># mkdir -p &#x2F;mnt&#x2F;iso</span><br><span class="line"># mount -o loop ubuntu.iso &#x2F;mnt&#x2F;iso</span><br></pre></td></tr></table></figure>

<p>将相关文件复制到其他目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir -p &#x2F;opt&#x2F;ubuntuiso</span><br><span class="line"># cp -rT &#x2F;mnt&#x2F;iso &#x2F;opt&#x2F;ubuntuiso</span><br></pre></td></tr></table></figure>

<p>防止出现语言选择菜单。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;ubuntuiso</span><br><span class="line"># echo en &gt; isolinux&#x2F;lang</span><br></pre></td></tr></table></figure>

<p>使用GUI程序添加名为的kickstart文件 <code>ks.cfg</code> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get install system-config-kickstart</span><br><span class="line"># system-config-kickstart # save file to ks.cfg</span><br></pre></td></tr></table></figure>

<p>要为安装添加软件包，请在kickstart文件中添加一个<code>%package</code>部分，然后在<code>ks.cfg</code>文件末尾附加<code>ks.cfg</code>类似内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%packages</span><br><span class="line">@ ubuntu-server</span><br><span class="line">openssh-server</span><br><span class="line">ftp</span><br><span class="line">build-essential</span><br></pre></td></tr></table></figure>

<p>这将安装Ubuntu的服务器“捆绑”，并会增加的<code>openssh-server</code>，<code>ftp</code>和<code>build-essential</code>包。</p>
<p>添加预置文件，以消除其他问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># echo &#39;d-i partman&#x2F;confirm_write_new_label boolean true</span><br><span class="line">d-i partman&#x2F;choose_partition \</span><br><span class="line">select Finish partitioning and write changes to disk</span><br><span class="line">d-i partman&#x2F;confirm boolean true&#39; &gt; ks.preseed</span><br></pre></td></tr></table></figure>

<p>设置启动命令行以使用kickstart和预置文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vi isolinux&#x2F;txt.cfg</span><br></pre></td></tr></table></figure>

<p>搜索：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">label install</span><br><span class="line">  menu label ^Install Ubuntu Server</span><br><span class="line">  kernel &#x2F;install&#x2F;vmlinuz</span><br><span class="line">  append  file&#x3D;&#x2F;cdrom&#x2F;preseed&#x2F;ubuntu-server.seed vga&#x3D;788 initrd&#x3D;&#x2F;install&#x2F;initrd.gz quiet --</span><br></pre></td></tr></table></figure>

<p>添加<code>ks=cdrom:/ks.cfg</code>并添加<code>preseed/file=/cdrom/ks.preseed</code>到附加行。您可以删除<code>quiet</code>和<code>vga=788</code>词。它看起来像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">append file&#x3D;&#x2F;cdrom&#x2F;preseed&#x2F;ubuntu-server.seed \</span><br><span class="line">   initrd&#x3D;&#x2F;install&#x2F;initrd.gz \</span><br><span class="line">   ks&#x3D;cdrom:&#x2F;ks.cfg preseed&#x2F;file&#x3D;&#x2F;cdrom&#x2F;ks.preseed --</span><br></pre></td></tr></table></figure>

<p>现在创建一个新的ISO。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkisofs -D -r -V &quot;ATTENDLESS_UBUNTU&quot; \</span><br><span class="line">     -cache-inodes -J -l -b isolinux&#x2F;isolinux.bin \</span><br><span class="line">     -c isolinux&#x2F;boot.cat -no-emul-boot -boot-load-size 4 \</span><br><span class="line">     -boot-info-table -o &#x2F;opt&#x2F;autoinstall.iso &#x2F;opt&#x2F;ubuntuiso</span><br></pre></td></tr></table></figure>

<p>现在，您将拥有一张CD。该CD可在从Ubuntu系统引导时安装，而无需一次击键。</p>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>将自定义 Debian 安装到硬盘</title>
    <url>/archives/df9fb8e4.html</url>
    <content><![CDATA[<p>Debian提供的库存Debian安装程序非常棒。它直观，简单。但是，如果出于某种原因（特定配置，计算机部署，最小映像）想要自定义安装，则可以使用以下步骤来完成。</p>
<p>为此，我们将需要任何基于Debian的实时CD。您可以使用我的指南来<a href="https://willhaley.com/blog/custom-debian-live-environment/" target="_blank" rel="external nofollow noopener noreferrer">创建自定义的Debian Live CD或USB</a>来生成该文件，也可以仅使用Ubuntu或Debian Live CD或USB。</p>
<p>使用自定义实时环境的优势在于您可以将所需工具打包在实时环境中，以便它们始终可用。如果您使用库存的Ubuntu或Debian Live CD，则可能需要网络连接才能安装所需的工具。</p>
<p><strong>警告</strong>：我已<strong>突出显示</strong>您应该在目标安装chroot中的所有位置。</p>
<ol>
<li><p>使用实时CD或USB引导计算机并安装必要的工具（假设它们尚不可用）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install debootstrap</span><br></pre></td></tr></table></figure>
</li>
<li><p>确定要在其中安装自定义Debian的设备。</p>
<p>我假设您打算使用的硬盘位于<code>/dev/sdz</code>，您只希望该磁盘上有一个分区，并且希望将MBR与grub2一起使用。</p>
<p>您<strong>必须</strong>替换的任何实例<code>/dev/sdz</code>与同位置在这些步骤中<strong>您的</strong>硬盘驱动器或会不小心丢失数据。</p>
</li>
<li><p>用一个可引导的Linux分区创建一个MBR表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo -e &quot;o\nn\np\n1\n\n\nw&quot; | sudo fdisk &#x2F;dev&#x2F;sdz</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo -e &quot;a\nw\n&quot; | sudo fdisk &#x2F;dev&#x2F;sdz</span><br></pre></td></tr></table></figure>
</li>
<li><p>格式化分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext4 &#x2F;dev&#x2F;sdz1</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果安装点尚不存在，请创建一个。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt</span><br></pre></td></tr></table></figure>
</li>
<li><p>挂载分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount &#x2F;dev&#x2F;sdz1 &#x2F;mnt</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置基本的Debian安装。我在我的发行版中使用Stretch，在架构上使用i386。如果您不在美国，或者您知道更近的镜子，请更换镜子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo debootstrap \</span><br><span class="line">    --arch&#x3D;i386 \</span><br><span class="line">    --variant&#x3D;minbase \</span><br><span class="line">    stretch &#x2F;mnt http:&#x2F;&#x2F;ftp.us.debian.org&#x2F;debian&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>绑定<code>/dev</code>并<code>/proc</code>从主机到chroot。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount -o bind &#x2F;dev &#x2F;mnt&#x2F;dev</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount -t proc &#x2F;proc &#x2F;mnt&#x2F;proc</span><br></pre></td></tr></table></figure>
</li>
<li><p>Chroot到我们的Debian安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chroot &#x2F;mnt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>chroot</strong></p>
<p>找出要在安装中使用的Linux内核。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-cache search linux-image</span><br></pre></td></tr></table></figure>

<p>我选择了图像<code>linux-image-586</code>。<code>systemd-sys</code>（或等效项）是必须提供的<code>init</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    linux-image-586 systemd-sysv</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>chroot</strong></p>
<p>安装您选择的程序。我使用<code>--no-install-recommends</code>以避免多余的程序包。您应该确定安装所需的内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    network-manager net-tools wireless-tools wpagui \</span><br><span class="line">    tcpdump wget openssh-client \</span><br><span class="line">    blackbox xserver-xorg-core xserver-xorg x11-xserver-utils \</span><br><span class="line">    xinit xterm \</span><br><span class="line">    pciutils usbutils gparted nano</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>chroot</strong></p>
<p>创建<code>/etc/fstab</code>用于安装的文件。</p>
<p>我们可以使用类似的脚本来生成它。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UUID&#x3D;&#96;blkid -s UUID -o value &#x2F;dev&#x2F;sdz1&#96;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;UUID&#x3D;$&#123;UUID&#125; &#x2F; ext4 defaults 1 1&quot; &gt; &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>chroot</strong></p>
<p>安装grub引导加载程序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install grub2</span><br></pre></td></tr></table></figure>

<p>出现提示时，请确保选择<code>/dev/sdz</code>（<strong>不是</strong> <code>/dev/sdz1</code>）作为<code>Grub install device</code>。</p>
</li>
<li><p><strong>chroot</strong></p>
<p>设置root密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>chroot</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动您的Debian安装！</p>
</li>
</ol>
<h2 id="原文地址："><a href="#原文地址：" class="headerlink" title="原文地址："></a>原文地址：</h2><ul>
<li><a href="https://willhaley.com/blog/custom-debian-hard-drive-install/" target="_blank" rel="external nofollow noopener noreferrer">https://willhaley.com/blog/custom-debian-hard-drive-install/</a></li>
</ul>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>将自定义 Debian Live 安装到USB驱动器 (img格式)</title>
    <url>/archives/93f8863.html</url>
    <content><![CDATA[<p>这些说明<strong>不是</strong>用于实时安装，而是用于将Debian安装到USB闪存介质。</p>
<p>这里的一个额外好处是，我们将首先在<code>img</code>作为环回设备安装的文件中准备Debian chroot 。</p>
<p>然后，我们可以将该<code>img</code>文件用作通用基础映像，然后将其部署到大量USB驱动器中。</p>
<p>你为什么想做这个？好吧，一方面，该<code>img</code>文件有助于减少混乱，并为您提供易于管理的文件，该文件可以一次又一次地重新部署。这对于创建将在多台计算机上重用的通用映像也是理想的。就像您在网吧中所做的那样，每次启动时都会重新安装Debian，或者在教室中。</p>
<p><strong>警告</strong>：我已<strong>突出显示</strong>您应该在chroot环境中的所有位置。小心！在本地环境而不是chroot中运行其中一些命令可能会导致问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    debootstrap</span><br></pre></td></tr></table></figure>

<p>创建图像文件并将其格式化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fallocate -l 2G debian.img</span><br><span class="line">echo -e &quot;o\nn\np\n1\n\n\nw&quot; | sudo fdisk debian.img</span><br><span class="line">echo -e &quot;a\nw\n&quot; | sudo fdisk debian.img</span><br></pre></td></tr></table></figure>

<p><strong>请注意以下命令返回的内容。</strong>对我来说，回送设备是<code>/dev/loop0</code>，但它可能因您而异。如果您的回送设备地址不同，请相应地更新以下说明。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo losetup --partscan --show --find debian.img</span><br></pre></td></tr></table></figure>

<p>格式化回送设备的linux分区，就像我们对真实物理设备所做的一样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext4 &#x2F;dev&#x2F;loop0p1</span><br></pre></td></tr></table></figure>

<p>挂载分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt&#x2F;debian</span><br><span class="line">sudo mount &#x2F;dev&#x2F;loop0p1 &#x2F;mnt&#x2F;debian</span><br></pre></td></tr></table></figure>

<p>引导chroot。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo debootstrap \</span><br><span class="line">    --arch&#x3D;i386 \</span><br><span class="line">    --variant&#x3D;minbase \</span><br><span class="line">    stretch &#x2F;mnt&#x2F;debian http:&#x2F;&#x2F;ftp.us.debian.org&#x2F;debian&#x2F;</span><br></pre></td></tr></table></figure>

<p>将特殊设备安装到chroot。这对于以后安装grub非常重要。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount -t proc &#x2F;proc &#x2F;mnt&#x2F;debian&#x2F;proc</span><br><span class="line">sudo mount -t sysfs &#x2F;sys &#x2F;mnt&#x2F;debian&#x2F;sys</span><br><span class="line">sudo mount -o bind &#x2F;dev &#x2F;mnt&#x2F;debian&#x2F;dev</span><br></pre></td></tr></table></figure>

<p>将root更改为chroot环境。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chroot &#x2F;mnt&#x2F;debian</span><br></pre></td></tr></table></figure>

<p><strong>chroot</strong></p>
<p>至少需要这些软件包，但根据需要添加更多。</p>
<p><strong>当提示您将grub安装到设备上时，请勿安装它。只需单击“ Enter”，然后选择不将其安装到任何设备。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    linux-image-586 systemd-sysv \</span><br><span class="line">	grub2-common grub-pc</span><br></pre></td></tr></table></figure>

<p><strong>chroot</strong></p>
<p>我们要基于磁盘标签而不是UUID或类似的命名磁盘<code>fstab</code>进行装载。这是因为，根据计算机的不同，USB驱动器<em>可能不是/ dev / sda</em>，而且因为UUID会根据文件的部署位置而有所不同。<code>/``/dev/sda``img</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;LABEL&#x3D;DEBUSB &#x2F; ext4 defaults 0 1&quot; &gt; &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure>

<p><strong>chroot</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>

<p><strong>chroot</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grub-install \</span><br><span class="line">    --target&#x3D;i386-pc \</span><br><span class="line">    --boot-directory&#x3D;&#x2F;boot \</span><br><span class="line">    --force-file-id \</span><br><span class="line">    --skip-fs-probe \</span><br><span class="line">    --recheck &#x2F;dev&#x2F;loop0</span><br></pre></td></tr></table></figure>

<p><strong>chroot</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>在中编辑<code>grub.cfg</code>文件<code>img</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nano &#x2F;mnt&#x2F;debian&#x2F;boot&#x2F;grub&#x2F;grub.cfg</span><br></pre></td></tr></table></figure>

<p>将此内容粘贴到<code>grub.cfg</code>文件中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># grub.cfg</span><br><span class="line">set default&#x3D;&quot;0&quot;</span><br><span class="line">set timeout&#x3D;10</span><br><span class="line"></span><br><span class="line">menuentry &quot;Debian&quot; &#123;</span><br><span class="line">    linux &#x2F;vmlinuz root&#x3D;&#x2F;dev&#x2F;disk&#x2F;by-label&#x2F;DEBUSB quiet</span><br><span class="line">    initrd &#x2F;initrd.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用与我们<code>fstab</code>上面相同的名称标记映像分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo e2label &#x2F;dev&#x2F;loop0p1 DEBUSB</span><br></pre></td></tr></table></figure>

<p>设置的主机名<code>img</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;debian-usb&quot; | sudo tee &#x2F;mnt&#x2F;debian&#x2F;etc&#x2F;hostname</span><br></pre></td></tr></table></figure>

<p>清理特殊设备。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umount &#x2F;mnt&#x2F;debian&#x2F;&#123;dev,sys,proc&#125;</span><br></pre></td></tr></table></figure>

<p>卸载回路设备。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umount &#x2F;mnt&#x2F;debian</span><br></pre></td></tr></table></figure>

<p>卸下<code>img</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo losetup -d &#x2F;dev&#x2F;loop0</span><br></pre></td></tr></table></figure>

<p>现在，您具有通用的Debian安装，可以像这样将其部署到多个设备。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd if&#x3D;debian.img of&#x3D;&#x2F;dev&#x2F;sdz</span><br></pre></td></tr></table></figure>

<h1 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h1><ul>
<li><a href="https://wiki.archlinux.org/index.php/Installing_Arch_Linux_on_a_USB_key" target="_blank" rel="external nofollow noopener noreferrer">在USB密钥上安装Arch Linux</a></li>
<li><a href="http://www.wyae.de/docs/boot-usb3/" target="_blank" rel="external nofollow noopener noreferrer">从USB 3启动</a></li>
<li><a href="https://www.cyberciti.biz/faq/linux-partition-howto-set-labels/" target="_blank" rel="external nofollow noopener noreferrer">标记Linux分区</a></li>
<li><a href="https://ubuntuforums.org/showthread.php?t=1529777" target="_blank" rel="external nofollow noopener noreferrer">如何生成使用LABEL而不是UUID的grub.cfg？</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GRUB" target="_blank" rel="external nofollow noopener noreferrer">格鲁布</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/html_node/Multi_002dboot-manual-config.html" target="_blank" rel="external nofollow noopener noreferrer">6.3多引导手动配置</a></li>
<li><a href="https://unix.stackexchange.com/questions/10010/safe-to-delete-system-map-files-in-boot" target="_blank" rel="external nofollow noopener noreferrer">可以安全删除/ boot中的System.map- *文件吗？</a></li>
<li><a href="https://ubuntuforums.org/showthread.php?t=1530532" target="_blank" rel="external nofollow noopener noreferrer">使用标签引导GRUB2（无UUID）</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/grub.html#search" target="_blank" rel="external nofollow noopener noreferrer">16.3.64搜索</a></li>
<li><a href="https://ubuntuforums.org/showthread.php?t=1854142" target="_blank" rel="external nofollow noopener noreferrer">错误：没有这样的设备：grub抢救&gt;</a></li>
<li><a href="https://askubuntu.com/questions/491604/grub-rescue-no-such-partition" target="_blank" rel="external nofollow noopener noreferrer">grub救援-&gt;没有这样的分区[重复]</a></li>
<li><a href="https://superuser.com/questions/130955/how-to-install-grub-into-an-img-file" target="_blank" rel="external nofollow noopener noreferrer">如何将grub安装到.img文件中？</a></li>
<li><a href="https://unix.stackexchange.com/questions/120198/how-to-fix-boot-into-initramfs-prompt-and-mount-cant-read-etc-fstab-no-su" target="_blank" rel="external nofollow noopener noreferrer">如何解决引导进入initramfs提示符和“装载：无法读取’/ etc / fstab’：无此文件或目录”和“找不到init”的问题？</a></li>
<li><a href="https://serverfault.com/questions/540492/sudo-echo-bla-etc-sysctl-conf-permission-denied" target="_blank" rel="external nofollow noopener noreferrer"><code>sudo echo “bla” &gt;&gt; /etc/sysctl.conf</code> 没有权限</a></li>
<li><a href="https://superuser.com/questions/165116/mount-dev-proc-sys-in-a-chroot-environment" target="_blank" rel="external nofollow noopener noreferrer">在chroot环境中挂载dev，proc，sys？</a></li>
</ul>
<h2 id="原文地址："><a href="#原文地址：" class="headerlink" title="原文地址："></a>原文地址：</h2><ul>
<li><a href="https://willhaley.com/blog/install-debian-usb/" target="_blank" rel="external nofollow noopener noreferrer">https://willhaley.com/blog/install-debian-usb/</a></li>
</ul>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>官方：在基于 Debian 的系统上构建 Kali ISO</title>
    <url>/archives/9308cb62.html</url>
    <content><![CDATA[<p>您可以在Kali以外的基于Debian的系统上轻松运行实时构建。以下说明已经过测试，可以与Debian和Ubuntu一起使用。</p>
<p>首先，我们通过确保已完全更新来准备系统，然后继续下载Kali存档密钥环和实时构建软件包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">cd &#x2F;root&#x2F;</span><br><span class="line"></span><br><span class="line">wget http:&#x2F;&#x2F;http.kali.org&#x2F;pool&#x2F;main&#x2F;k&#x2F;kali-archive-keyring&#x2F;kali-archive-keyring_2018.2_all.deb</span><br><span class="line">wget https:&#x2F;&#x2F;archive.kali.org&#x2F;kali&#x2F;pool&#x2F;main&#x2F;l&#x2F;live-build&#x2F;live-build_20190311_all.deb</span><br></pre></td></tr></table></figure>

<p>完成后，我们将安装一些其他依赖项和以前下载的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install -y git live-build cdebootstrap debootstrap curl</span><br><span class="line">sudo dpkg -i kali-archive-keyring_2018.2_all.deb</span><br><span class="line">sudo dpkg -i live-build_20190311_all.deb</span><br></pre></td></tr></table></figure>

<p>准备好所有环境后，我们通过设置构建脚本并签出构建配置来开始实时构建过程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;share&#x2F;debootstrap&#x2F;scripts&#x2F;</span><br><span class="line">echo &quot;default_mirror http:&#x2F;&#x2F;http.kali.org&#x2F;kali&quot;; sed -e &quot;s&#x2F;debian-archive-keyring.gpg&#x2F;kali-archive-keyring.gpg&#x2F;g&quot; sid &gt; &#x2F;tmp&#x2F;kali</span><br><span class="line">sudo mv &#x2F;tmp&#x2F;kali .</span><br><span class="line">sudo ln -s kali kali-rolling</span><br><span class="line"></span><br><span class="line">cd ~</span><br><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;build-scripts&#x2F;live-build-config.git</span><br><span class="line"></span><br><span class="line">cd live-build-config&#x2F;</span><br></pre></td></tr></table></figure>

<p>此时，我们必须编辑<code>build.sh</code>脚本以绕过版本检查。为此，我们注释掉下面的“出口1”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Check we have a good debootstrap</span><br><span class="line">ver_debootstrap&#x3D;$(dpkg-query -f &#39;$&#123;Version&#125;&#39; -W debootstrap)</span><br><span class="line">if dpkg --compare-versions &quot;$ver_debootstrap&quot; lt &quot;1.0.97&quot;; then</span><br><span class="line">if ! echo &quot;$ver_debootstrap&quot; | grep -q kali; then</span><br><span class="line">echo &quot;ERROR: You need debootstrap &gt;&#x3D; 1.0.97 (or a Kali patched debootstrap). Your current version: $ver_debootstrap&quot; &gt;&amp;2</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>进行更改后，脚本应如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Check we have a good debootstrap</span><br><span class="line">ver_debootstrap&#x3D;$(dpkg-query -f &#39;$&#123;Version&#125;&#39; -W debootstrap)</span><br><span class="line">if dpkg --compare-versions &quot;$ver_debootstrap&quot; lt &quot;1.0.97&quot;; then</span><br><span class="line">if ! echo &quot;$ver_debootstrap&quot; | grep -q kali; then</span><br><span class="line">echo &quot;ERROR: You need debootstrap &gt;&#x3D; 1.0.97 (or a Kali patched debootstrap). Your current version: $ver_debootstrap&quot; &gt;&amp;2</span><br><span class="line"># exit 1</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>此时，我们可以正常建立ISO</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo .&#x2F;build.sh --variant light --verbose</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>实时构建自定义的 Kali ISO</title>
    <url>/archives/fb169ff8.html</url>
    <content><![CDATA[<h2 id="建立自己的Kali-ISO简介"><a href="#建立自己的Kali-ISO简介" class="headerlink" title="建立自己的Kali ISO简介"></a>建立自己的Kali ISO简介</h2><p>构建自定义的Kali ISO既简单，有趣又有意义。您几乎可以使用Debian动态<a href="https://live-team.pages.debian.net/live-manual/html/live-manual/index.en.html" target="_blank" rel="external nofollow noopener noreferrer">构建</a>脚本来配置Kali ISO构建的任何方面。这些脚本使开发人员可以通过提供一个框架来轻松构建实时系统映像，该框架使用配置集来自动化和自定义构建映像的所有方面。Kali Linux开发团队已经采用了这些脚本，它们被用来制作Kali ISO正式发行版。</p>
<h2 id="您应该在哪里建立ISO？"><a href="#您应该在哪里建立ISO？" class="headerlink" title="您应该在哪里建立ISO？"></a>您应该在哪里建立ISO？</h2><p>理想情况下，您应该<strong>在现有的Kali环境中</strong>构建自定义的Kali ISO 。</p>
<h2 id="准备就绪-设置实时构建系统"><a href="#准备就绪-设置实时构建系统" class="headerlink" title="准备就绪-设置实时构建系统"></a>准备就绪-设置实时构建系统</h2><p>我们首先需要使用以下命令通过安装和设置实时构建及其要求来准备Kali ISO构建环境：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install -y curl git live-build cdebootstrap</span><br><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;build-scripts&#x2F;live-build-config.git</span><br></pre></td></tr></table></figure>

<p>现在，您只需输入“ live-build-config”目录并运行我们的<strong>build.sh</strong>包装器脚本，即可简单地构建更新的Kali ISO ，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd live-build-config&#x2F;</span><br><span class="line">.&#x2F;build.sh --verbose</span><br></pre></td></tr></table></figure>

<p>“ build.sh”脚本需要一段时间才能完成，因为它会下载创建ISO所需的所有必需软件包。喝咖啡的好时机。</p>
<h2 id="配置Kali-ISO构建（可选）"><a href="#配置Kali-ISO构建（可选）" class="headerlink" title="配置Kali ISO构建（可选）"></a>配置Kali ISO构建（可选）</h2><p>如果您想自定义您的Kali Linux ISO，本节将解释一些细节。通过<strong>kali-config</strong>目录，Kali Linux live build支持各种自定义选项，这些选项在Debian <a href="https://live-team.pages.debian.net/live-manual/html/live-manual/customization-overview.en.html" target="_blank" rel="external nofollow noopener noreferrer">live build 4.x</a>页面上有详细记录。但是，对于不耐烦的人，这里是一些重点。</p>
<h3 id="使用不同的桌面环境构建Kali"><a href="#使用不同的桌面环境构建Kali" class="headerlink" title="使用不同的桌面环境构建Kali"></a>使用不同的桌面环境构建Kali</h3><p>从Kali 2.0开始，我们现在支持各种桌面环境的内置配置，包括KDE，Gnome，E17，I3WM，LXDE，MATE和XFCE。要构建其中的任何一个，您将使用类似于以下内容的语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># These are the different Desktop Environment build options:</span><br><span class="line">#.&#x2F;build.sh --variant &#123;gnome,kde,xfce,mate,e17,lxde,i3wm&#125; --verbose</span><br><span class="line"></span><br><span class="line"># To build a KDE ISO:</span><br><span class="line">.&#x2F;build.sh --variant kde --verbose</span><br><span class="line"># To build a MATE ISO:</span><br><span class="line">.&#x2F;build.sh --variant mate --verbose</span><br><span class="line"></span><br><span class="line">#...and so on.</span><br></pre></td></tr></table></figure>

<h3 id="控制构建中包含的软件包"><a href="#控制构建中包含的软件包" class="headerlink" title="控制构建中包含的软件包"></a>控制构建中包含的软件包</h3><p>您的构建中包含的软件包列表将出现在相应的kali- $ variant目录中。例如，如果要构建默认的Gnome ISO，则应使用以下软件包列表文件<strong>-kali-config / variant-gnome / package-lists / kali.list.chroot</strong>。默认情况下，此列表包括“ kali-linux-full”元软件包以及其他一些软件包。可以将它们注释掉，并用手册的手动列表替换，以将其包括在ISO中以获得更大的粒度。</p>
<h3 id="构建钩子，二进制文件和chroot"><a href="#构建钩子，二进制文件和chroot" class="headerlink" title="构建钩子，二进制文件和chroot"></a>构建钩子，二进制文件和chroot</h3><p>实时构建挂钩允许我们在Kali ISO实时构建的各个阶段中钩挂脚本。有关钩子及其使用方法的更多详细信息，请参阅<a href="https://live-team.pages.debian.net/live-manual/html/live-manual/customizing-contents.en.html#507" target="_blank" rel="external nofollow noopener noreferrer">实时构建手册</a>。例如，我们建议您在<strong>kali-config / common / hooks /中</strong>检出现有的挂钩。</p>
<h3 id="覆盖构建中的文件"><a href="#覆盖构建中的文件" class="headerlink" title="覆盖构建中的文件"></a>覆盖构建中的文件</h3><p>您可以通过将其他文件或脚本分别覆盖在现有文件系统上的<strong>include。{chroot，binary，installer}</strong>目录中，来选择将其他文件或脚本包含在构建中。例如，如果我们想将自己的自定义脚本包括在ISO 的<strong>/ root /</strong>目录中（这将对应于“ chroot”阶段），则可以将该脚本文件放入<strong>kali-config / common / includes中。 chroot /</strong>目录，然后再建立ISO。</p>
<h2 id="为较早的i386架构构建Kali-Linux-ISO"><a href="#为较早的i386架构构建Kali-Linux-ISO" class="headerlink" title="为较早的i386架构构建Kali Linux ISO"></a>为较早的i386架构构建Kali Linux ISO</h2><p>Kali Linux i386 ISO已启用PAE。如果您需要禁用PAE的旧硬件的默认内核，则需要重建Kali Linux ISO。重建过程与上述过程基本相同，除了需要按如下所示在<strong>auto / config</strong>中将<strong>686-pae</strong>参数更改为<strong>586</strong>。首先，安装先决条件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install -y git live-build cdebootstrap debootstrap</span><br><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;build-scripts&#x2F;live-build-config.git</span><br></pre></td></tr></table></figure>

<p>接下来，对auto / config进行更改以适合相应的体系结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd live-build-config&#x2F;</span><br><span class="line">sed -i &#39;s&#x2F;686-pae&#x2F;686&#x2F;g&#39; auto&#x2F;config</span><br></pre></td></tr></table></figure>

<p>最后，运行您的构建。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;build.sh --arch i386 --verbose</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>官方：建立自定义的 Kali Linux ISO</title>
    <url>/archives/796c51f8.html</url>
    <content><![CDATA[<p>Kali Linux最强大的功能之一就是能够创建自己的包含自定义工具，桌面管理器和服务的发行版本。该研讨会将向您展示如何创建自己的个性化Kali Linux ISO，如何使用实时构建实用程序自定义各个方面，以及如何有效利用Kali中提供的各种元数据包。</p>
<a id="more"></a>



<h2 id="现场制作的出色"><a href="#现场制作的出色" class="headerlink" title="现场制作的出色"></a>现场制作的出色</h2><p><strong>0x00-首先更新存储库，安装必备组件，</strong>然后从Kali Git存储库中签出live-build-config的新版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install git live-build cdebootstrap devscripts -y</span><br><span class="line">git clone git:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;build-scripts&#x2F;live-build-config.git</span><br><span class="line">cd live-build-config</span><br></pre></td></tr></table></figure>

<p><strong>0x01-覆盖默认的Kali软件包列表</strong>，仅包括所需的软件包。在视频中，我们仅编辑了列表并更改了一些软件包名称。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; kali-config&#x2F;variant-default&#x2F;package-lists&#x2F;kali.list.chroot</span><br><span class="line">kali-root-login</span><br><span class="line">kali-defaults</span><br><span class="line">kali-menu</span><br><span class="line">kali-debtags</span><br><span class="line">kali-archive-keyring</span><br><span class="line">debian-installer-launcher</span><br><span class="line">alsa-tools</span><br><span class="line">locales-all</span><br><span class="line">dconf-tools</span><br><span class="line">openssh-server</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><strong>0x02-添加定制的syslinux引导条目</strong>，其中包括用于定制预置文件的引导参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; kali-config&#x2F;common&#x2F;includes.binary&#x2F;isolinux&#x2F;install.cfg</span><br><span class="line">label install</span><br><span class="line">    menu label ^Install Automated</span><br><span class="line">    linux &#x2F;install&#x2F;vmlinuz</span><br><span class="line">    initrd &#x2F;install&#x2F;initrd.gz</span><br><span class="line">    append vga&#x3D;788 -- quiet file&#x3D;&#x2F;cdrom&#x2F;install&#x2F;preseed.cfg locale&#x3D;en_US keymap&#x3D;us hostname&#x3D;kali domain&#x3D;local.lan</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><strong>0x03-自定义ISO版本。</strong>在此示例中，默认情况下我们将启动SSH服务。为此，我们可以使用chroot钩子脚本，该脚本位于“ hooks”目录中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;systemctl enable ssh&#39; &gt;&gt;  kali-config&#x2F;common&#x2F;hooks&#x2F;01-start-ssh.chroot</span><br><span class="line">chmod +x kali-config&#x2F;common&#x2F;hooks&#x2F;01-start-ssh.chroot</span><br></pre></td></tr></table></figure>

<p><strong>0x04-接下来，我们下载壁纸</strong>并将其覆盖。通知chroot的重叠文件是如何放置在<em>includes.chroot</em>目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p kali-config&#x2F;common&#x2F;includes.chroot&#x2F;usr&#x2F;share&#x2F;wallpapers&#x2F;kali&#x2F;contents&#x2F;images</span><br><span class="line">wget https:&#x2F;&#x2F;www.kali.org&#x2F;dojo&#x2F;blackhat-2015&#x2F;wp-blue.png</span><br><span class="line">mv wp-blue.png kali-config&#x2F;common&#x2F;includes.chroot&#x2F;usr&#x2F;share&#x2F;wallpapers&#x2F;kali&#x2F;contents&#x2F;images</span><br></pre></td></tr></table></figure>

<p><strong>0x05-添加一个预置文件</strong>，该<strong>文件</strong>将通过默认的Kali安装运行，无输入（无人值守）。我们可以包括现成的预置配置，并根据需要进行更改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p kali-config&#x2F;common&#x2F;debian-installer</span><br><span class="line">wget https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;recipes&#x2F;kali-preseed-examples&#x2F;blob&#x2F;master&#x2F;kali-linux-full-unattended.preseed -O kali-config&#x2F;common&#x2F;debian-installer&#x2F;preseed.cfg</span><br></pre></td></tr></table></figure>

<p><strong>0x06-让我们将Nessus Debian软件包</strong>包含在<em>packages</em>目录中，以包含在我们的最终版本中。由于我们使用的是64位版本，因此包含了64位Nessus Debian软件包。<a href="http://www.tenable.com/products/nessus/select-your-operating-system" target="_blank" rel="external nofollow noopener noreferrer">下载</a> Nessus .deb文件并将其放置在packages.chroot目录中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir kali-config&#x2F;common&#x2F;packages.chroot</span><br><span class="line">mv Nessus-*amd64.deb kali-config&#x2F;common&#x2F;packages.chroot&#x2F;</span><br></pre></td></tr></table></figure>

<p><strong>0x07-现在您可以继续构建ISO了</strong>，此过程可能需要一段时间，具体取决于您的硬件和Internet速度。完成后，可以在实时构建的根目录中找到您的ISO。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;build.sh -v</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>创建一个自定义 UEFI 启动的 Debian Live 环境 （CD或USB）</title>
    <url>/archives/1a14b41f.html</url>
    <content><![CDATA[<p>这些是我在<strong>Ubuntu 18.04 LTS（Bionic Beaver）</strong> 64位系统上使用的步骤，用于构建可以从CD或USB引导的<strong>x86 Debian 9（Stretch）</strong>实时环境。</p>
<p>这些步骤可用于创建可启动BIOS（MBR），可启动UEFI（GPT）或可启动UEFI和BIOS的组合的实时环境。本指南的独特之处在于<strong>未使用Syslinux / Isolinux。只有Grub引导设备。</strong>这样做是为了保持一致性，并避免两者混淆（仅Syslinux / Isolinux不能完成本文中介绍的所有内容，但是Grub可以做到）。</p>
<p>以下是我的指南的替代方法，对于那些阅读本文的人来说，它们可能是更好的解决方案：<a href="https://manpages.debian.org/jessie/live-build/live-build.7.en.html" target="_blank" rel="external nofollow noopener noreferrer">live-build</a>，<a href="https://help.ubuntu.com/community/mkusb" target="_blank" rel="external nofollow noopener noreferrer">mkusb</a>，<a href="https://unetbootin.github.io/" target="_blank" rel="external nofollow noopener noreferrer">UNetbootin</a>，<a href="https://github.com/jnalley/xixer" target="_blank" rel="external nofollow noopener noreferrer">xixer</a>，<a href="https://rufus.akeo.ie/" target="_blank" rel="external nofollow noopener noreferrer">rufus</a>，<a href="https://www.pendrivelinux.com/yumi-multiboot-usb-creator/" target="_blank" rel="external nofollow noopener noreferrer">YUMI</a>，<a href="https://wiki.debian.org/Simple-CDD" target="_blank" rel="external nofollow noopener noreferrer">Simple-cdd</a>。您还应该查看<a href="https://wiki.debian.org/DebianCustomCD" target="_blank" rel="external nofollow noopener noreferrer">Debian DebianCustomCD文档，</a>因为它将比本文提供的信息多得多。</p>
<p>我写这本指南的目的更多是出于教育目的。它不一定是满足您需求的最快指南或最佳指南。希望对您有所帮助。</p>
<p><strong>警告</strong>：我已<strong>突出显示</strong>您应该在 <strong>[chroot]</strong>环境中的所有位置。小心！在本地环境而不是<a href="https://en.wikipedia.org/wiki/Chroot" target="_blank" rel="external nofollow noopener noreferrer"> chroot中</a>运行其中一些命令可能会损坏系统。</p>
<h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h1><p>安装我们需要构建环境的应用程序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    debootstrap \</span><br><span class="line">    squashfs-tools \</span><br><span class="line">    xorriso \</span><br><span class="line">    grub-pc-bin \</span><br><span class="line">    grub-efi-amd64-bin \</span><br><span class="line">    mtools</span><br></pre></td></tr></table></figure>

<p>创建一个目录，我们将在其中存储在本指南中创建的所有文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;LIVE_BOOT</span><br></pre></td></tr></table></figure>

<h1 id="引导和配置Debian"><a href="#引导和配置Debian" class="headerlink" title="引导和配置Debian"></a>引导和配置Debian</h1><p>设置基本的Debian环境。我正在使用<code>stretch</code>我的发行版和<code>i386</code>体系结构。请查阅<a href="https://www.debian.org/mirror/list" target="_blank" rel="external nofollow noopener noreferrer">debian镜像</a>列表。</p>
<p><em>如果附近有镜子，请在此命令中更改URL。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo debootstrap \</span><br><span class="line">    --arch&#x3D;i386 \</span><br><span class="line">    --variant&#x3D;minbase \</span><br><span class="line">    stretch \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;chroot \</span><br><span class="line">    http:&#x2F;&#x2F;ftp.us.debian.org&#x2F;debian&#x2F;</span><br></pre></td></tr></table></figure>

<p>Chroot到我们刚刚引导的Debian环境。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chroot $HOME&#x2F;LIVE_BOOT&#x2F;chroot</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>为您的Debian环境设置自定义主机名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;debian-live&quot; &gt; &#x2F;etc&#x2F;hostname</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>确定实时环境中需要哪个Linux内核。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-cache search linux-image</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>我选择了图像<code>linux-image-686</code>。我也认为这<code>live-boot</code>是必要的。<code>systemd-sys</code>（或等效项）也是提供init所必需的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    linux-image-686 \</span><br><span class="line">    live-boot \</span><br><span class="line">    systemd-sysv</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>安装您选择的程序，然后运行<code>apt-get clean</code>以节省一些空间。我使用<code>--no-install-recommends</code>以避免多余的程序包。您应该确定环境所需的内容。</p>
<p>阅读Debian的<a href="https://wiki.debian.org/ReduceDebian" target="_blank" rel="external nofollow noopener noreferrer">ReduceDebian文章，</a>以获取有关减小Debian环境大小的技巧（如果大小很重要并且您需要最小和紧凑的安装）。请注意，某些实时环境（如<a href="https://en.wikipedia.org/wiki/Tiny_Core_Linux" target="_blank" rel="external nofollow noopener noreferrer">Tiny Core Linux</a>或<a href="https://en.wikipedia.org/wiki/Puppy_Linux" target="_blank" rel="external nofollow noopener noreferrer">Puppy Linux）</a>经过专门优化，仅占很小的空间。尽管本文提供了一个相对较小的实时环境，但生成仅几十MB大小的环境仍需要付出额外的精力，而本文并未涉及。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    network-manager net-tools wireless-tools wpagui \</span><br><span class="line">    curl openssh-client \</span><br><span class="line">    blackbox xserver-xorg-core xserver-xorg xinit xterm \</span><br><span class="line">    nano &amp;&amp; \</span><br><span class="line">apt-get clean</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>设置root密码。<code>root</code>将默认为该实时环境中的唯一用户，但是您可以根据需要添加其他用户。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>退出chroot。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>创建目录，其中将包含我们的实时环境文件和暂存文件的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;LIVE_BOOT&#x2F;&#123;scratch,image&#x2F;live&#125;</span><br></pre></td></tr></table></figure>

<p>将chroot环境压缩到一个Squash文件系统中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mksquashfs \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;chroot \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;live&#x2F;filesystem.squashfs \</span><br><span class="line">    -e boot</span><br></pre></td></tr></table></figure>

<p>将内核和initramfs从中复制<code>chroot</code>到<code>live</code>目录中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp $HOME&#x2F;LIVE_BOOT&#x2F;chroot&#x2F;boot&#x2F;vmlinuz-* \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;vmlinuz &amp;&amp; \</span><br><span class="line">cp $HOME&#x2F;LIVE_BOOT&#x2F;chroot&#x2F;boot&#x2F;initrd.img-* \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;initrd</span><br></pre></td></tr></table></figure>

<p>为grub创建菜单配置文件。请注意，<code>insmod all_video</code>在我的测试中需要该行来处理我的一台计算机的<a href="https://askubuntu.com/a/857008/413290" target="_blank" rel="external nofollow noopener noreferrer">UEFI引导中的错误</a>。也许不是每个人都需要那条线，但我确实需要。</p>
<p>此配置指示Grub使用该<code>search</code>命令来推断哪个设备包含我们的实时环境。考虑到我们可以将实时环境写入可启动媒体的各种方式，这似乎是最可移植的解决方案。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;&#39;EOF&#39; &gt;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line"></span><br><span class="line">insmod all_video</span><br><span class="line"></span><br><span class="line">search --set&#x3D;root --file &#x2F;DEBIAN_CUSTOM</span><br><span class="line"></span><br><span class="line">set default&#x3D;&quot;0&quot;</span><br><span class="line">set timeout&#x3D;30</span><br><span class="line"></span><br><span class="line">menuentry &quot;Debian Live&quot; &#123;</span><br><span class="line">    linux &#x2F;vmlinuz boot&#x3D;live quiet nomodeset</span><br><span class="line">    initrd &#x2F;initrd</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>在<code>image</code>named中创建一个特殊文件<code>DEBIAN_CUSTOM</code>。该文件将用于帮助<code>Grub</code>确定哪个设备包含我们的实时文件系统。该文件名必须唯一，并且必须与我们的<code>grub.cfg</code>配置中的文件名匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;DEBIAN_CUSTOM</span><br></pre></td></tr></table></figure>

<p>您的<code>LIVE_BOOT</code>目录现在应该大致如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LIVE_BOOT&#x2F;chroot&#x2F;*tons of chroot files*</span><br><span class="line">LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;DEBIAN_CUSTOM</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;initrd</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;vmlinuz</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;live&#x2F;filesystem.squashfs</span><br></pre></td></tr></table></figure>

<h1 id="创建可启动媒体"><a href="#创建可启动媒体" class="headerlink" title="创建可启动媒体"></a>创建可启动媒体</h1><p>请注意，下面有两组<strong>单独</strong>的说明，用于为实时环境创建可启动媒体。一个进程名为<a href="https://willhaley.com/blog/custom-debian-live-environment/#create-bootable-isocd" target="_blank" rel="external nofollow noopener noreferrer">Create Bootable ISO / CD</a>，<strong>另一个进程</strong>名为<a href="https://willhaley.com/blog/custom-debian-live-environment/#create-bootable-usb" target="_blank" rel="external nofollow noopener noreferrer">Create Bootable USB</a>。</p>
<ul>
<li>在<strong>创建可启动ISO / CD</strong>指令将导致<code>.iso</code>包含我们的生活环境中的图像文件。</li>
<li>“ <strong>创建可启动USB”</strong>说明将导致我们的实时环境直接安装到USB设备上。</li>
</ul>
<p><code>.iso</code>我们使用<strong>创建可启动ISO / CD</strong>指令<strong>创建</strong>的文件可以刻录到CD-ROM（光学介质），或通过写入USB设备<code>dd</code>。允许我们<code>.iso</code>文件中这种“应收帐款”行为的功能<em>并非</em>免费提供。这个过程有点复杂，但是在许多现代的实时环境（例如Ubuntu安装<code>.iso</code>文件）中，这种行为是很常见的。</p>
<p><em>请注意，将<code>.iso</code>文件写入USB设备与将实时环境直接安装到USB设备并不相同。在我的<a href="https://willhaley.com/blog/custom-debian-live-environment/#notes" target="_blank" rel="external nofollow noopener noreferrer">笔记</a>中详细了解我的发现。</em></p>
<h2 id="创建可启动的ISO-CD"><a href="#创建可启动的ISO-CD" class="headerlink" title="创建可启动的ISO / CD"></a>创建可启动的ISO / CD</h2><p>将实时环境安装到<code>.iso</code>可以刻录到光学介质的文件中。</p>
<p>如上所述，<code>.iso</code>通过这些步骤生成的文件<strong>可以</strong>使用写入到USB设备<code>dd</code>。</p>
<p>创建一个grub UEFI映像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grub-mkstandalone \</span><br><span class="line">    --format&#x3D;x86_64-efi \</span><br><span class="line">    --output&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;bootx64.efi \</span><br><span class="line">    --locales&#x3D;&quot;&quot; \</span><br><span class="line">    --fonts&#x3D;&quot;&quot; \</span><br><span class="line">    &quot;boot&#x2F;grub&#x2F;grub.cfg&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg&quot;</span><br></pre></td></tr></table></figure>

<p>创建包含EFI引导加载程序的FAT16 UEFI引导磁盘映像。请注意，使用<code>mmd</code>和<code>mcopy</code>命令来复制名为的UEFI引导加载程序<code>bootx64.efi</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(cd $HOME&#x2F;LIVE_BOOT&#x2F;scratch &amp;&amp; \</span><br><span class="line">    dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;efiboot.img bs&#x3D;1M count&#x3D;10 &amp;&amp; \</span><br><span class="line">    mkfs.vfat efiboot.img &amp;&amp; \</span><br><span class="line">    mmd -i efiboot.img efi efi&#x2F;boot &amp;&amp; \</span><br><span class="line">    mcopy -i efiboot.img .&#x2F;bootx64.efi ::efi&#x2F;boot&#x2F;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>生成ISO文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xorriso \</span><br><span class="line">    -as mkisofs \</span><br><span class="line">    -iso-level 3 \</span><br><span class="line">    -full-iso9660-filenames \</span><br><span class="line">    -volid &quot;DEBIAN_CUSTOM&quot; \</span><br><span class="line">    -eltorito-alt-boot \</span><br><span class="line">        -e EFI&#x2F;efiboot.img \</span><br><span class="line">        -no-emul-boot \</span><br><span class="line">    -append_partition 2 0xef $&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;efiboot.img \</span><br><span class="line">    -output &quot;$&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;debian-custom.iso&quot; \</span><br><span class="line">    -graft-points \</span><br><span class="line">        &quot;$&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;image&quot; \</span><br><span class="line">        &#x2F;EFI&#x2F;efiboot.img&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;efiboot.img</span><br></pre></td></tr></table></figure>

<p>现在将ISO刻录到CD，您应该可以使用UEFI系统从CD引导了。</p>
<h2 id="创建可启动USB"><a href="#创建可启动USB" class="headerlink" title="创建可启动USB"></a>创建可启动USB</h2><p>将实时环境安装到USB设备。</p>
<p>如上所述，在安装现场环境到USB设备是<strong>不</strong>一样的书面<code>.iso</code>文件到USB设备。在这两种情况下，最终结果在大多数情况下都是相同的，但是存在一些细微的差异值得理解，并且有正当的理由，有人可能希望将实时环境直接安装到USB设备，而不是将<code>.iso</code>文件写入USB设备。 </p>
<p>我假设您在<strong>/ dev /</strong> sdz上有一个已挂载的<strong>空白</strong> USB驱动器。为了在实际的块设备中轻松进行交换，我在这些命令中使用了一个变量。<code>$disk</code></p>
<p>导出<code>disk</code>变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export disk&#x3D;&#x2F;dev&#x2F;sdz</span><br></pre></td></tr></table></figure>

<p>为USB驱动器创建一些安装点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt&#x2F;&#123;usb,efi&#125;</span><br></pre></td></tr></table></figure>

<p>使用分割USB驱动器<code>parted</code>。此命令在GPT（Guid分区表）布局中创建2个分区。一个分区用于UEFI，另一个分区用于我们的Debian OS和其他实时数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo parted --script $disk \</span><br><span class="line">    mklabel gpt \</span><br><span class="line">    mkpart ESP fat32 1MiB 200MiB \</span><br><span class="line">        name 1 EFI \</span><br><span class="line">        set 1 esp on \</span><br><span class="line">    mkpart primary fat32 200MiB 100% \</span><br><span class="line">        name 2 LINUX \</span><br><span class="line">        set 2 msftdata on</span><br></pre></td></tr></table></figure>

<p>格式化UEFI和数据分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.vfat -F32 $&#123;disk&#125;1 &amp;&amp; \</span><br><span class="line">sudo mkfs.vfat -F32 $&#123;disk&#125;2</span><br></pre></td></tr></table></figure>

<p>挂载分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount $&#123;disk&#125;1 &#x2F;mnt&#x2F;efi &amp;&amp; \</span><br><span class="line">sudo mount $&#123;disk&#125;2 &#x2F;mnt&#x2F;usb</span><br></pre></td></tr></table></figure>

<p>安装用于x86_64 UEFI引导的Grub。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo grub-install \</span><br><span class="line">    --target&#x3D;x86_64-efi \</span><br><span class="line">    --efi-directory&#x3D;&#x2F;mnt&#x2F;efi \</span><br><span class="line">    --boot-directory&#x3D;&#x2F;mnt&#x2F;usb&#x2F;boot \</span><br><span class="line">    --removable \</span><br><span class="line">    --recheck</span><br></pre></td></tr></table></figure>

<p><code>live</code>在USB设备上创建目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt&#x2F;usb&#x2F;&#123;boot&#x2F;grub,live&#125;</span><br></pre></td></tr></table></figure>

<p>将我们先前生成的Debian实时环境文件复制到USB磁盘。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp -r $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;* &#x2F;mnt&#x2F;usb&#x2F;</span><br></pre></td></tr></table></figure>

<p>将<code>grub.cfg</code>启动配置复制到USB设备。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg \</span><br><span class="line">    &#x2F;mnt&#x2F;usb&#x2F;boot&#x2F;grub&#x2F;grub.cfg</span><br></pre></td></tr></table></figure>

<p>现在卸载磁盘，您应该已经准备好在UEFI系统上从磁盘启动。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umount &#x2F;mnt&#x2F;&#123;usb,efi&#125;</span><br></pre></td></tr></table></figure>

<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项 +"></a>注意事项 +</h1><h1 id="注释（Rufus支持）"><a href="#注释（Rufus支持）" class="headerlink" title="注释（Rufus支持） +"></a>注释（Rufus支持） +</h1><h1 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h1><ul>
<li><a href="https://linux.die.net/man/8/sgdisk" target="_blank" rel="external nofollow noopener noreferrer">sgdisk（8）-Linux手册页</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Multiboot_USB_drive#Hybrid_UEFI_GPT_.2B_BIOS_GPT.2FMBR_boot" target="_blank" rel="external nofollow noopener noreferrer">混合UEFI GPT + BIOS GPT / MBR引导</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GRUB#.22No_suitable_mode_found.22_error" target="_blank" rel="external nofollow noopener noreferrer">“找不到合适的模式”错误</a></li>
<li><a href="https://askubuntu.com/questions/258991/where-is-the-memtest-option-on-the-ubuntu-64-bit-live-cd" target="_blank" rel="external nofollow noopener noreferrer">Ubuntu 64位实时CD上的memtest选项在哪里？</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Remastering_the_Install_ISO" target="_blank" rel="external nofollow noopener noreferrer">重新掌握安装ISO</a></li>
<li><a href="https://help.ubuntu.com/community/UEFIBooting#Install_GRUB2_in_.28U.29EFI_systems" target="_blank" rel="external nofollow noopener noreferrer">在（U）EFI系统中安装GRUB2</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/grub/html_node/Embedded-configuration.html" target="_blank" rel="external nofollow noopener noreferrer">6.4将配置文件嵌入GRUB</a></li>
<li><a href="https://askubuntu.com/questions/643938/standalone-grub2-efi-installation-grub-cfg-placement" target="_blank" rel="external nofollow noopener noreferrer">独立的Grub2 EFI安装-grub.cfg放置？</a></li>
<li><a href="https://unix.stackexchange.com/questions/253657/actual-usage-of-grub-mkimage-config" target="_blank" rel="external nofollow noopener noreferrer">“ grub-mkimage –config =”的实际用法</a></li>
<li><a href="http://lukeluo.blogspot.com/2013/06/grub-how-to-4-memdisk-and-loopback.html" target="_blank" rel="external nofollow noopener noreferrer">GRUB2使用方法（4）：内存磁盘和回送设备</a></li>
<li><a href="https://unix.stackexchange.com/questions/267765/how-does-the-grub-efi-loader-find-the-correct-grub-cfg-and-boot-directory" target="_blank" rel="external nofollow noopener noreferrer">grub efi加载程序如何找到正确的grub.cfg和引导目录？</a></li>
<li><a href="https://www.linux.com/learn/how-rescue-non-booting-grub-2-Linux" target="_blank" rel="external nofollow noopener noreferrer">如何在Linux上救援非引导式GRUB 2</a></li>
<li><a href="https://help.ubuntu.com/community/BootFromUSB#Using_a_CD" target="_blank" rel="external nofollow noopener noreferrer">使用光盘</a></li>
<li><a href="https://superuser.com/questions/746553/boot-linux-with-extlinux-from-efi-gpt" target="_blank" rel="external nofollow noopener noreferrer">从EFI和GPT用extlinux引导Linux</a></li>
<li><a href="https://blog.fpmurphy.com/2010/06/grub2-modules.html" target="_blank" rel="external nofollow noopener noreferrer">GRUB2模块</a></li>
<li><a href="https://github.com/coreos/grub/blob/master/util/grub-install.c" target="_blank" rel="external nofollow noopener noreferrer">grub-install.c</a></li>
<li><a href="https://help.ubuntu.com/community/Grub2/Troubleshooting" target="_blank" rel="external nofollow noopener noreferrer">Grub2 /问题排查</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Secure_Boot#Set_up_PreLoader" target="_blank" rel="external nofollow noopener noreferrer">设置预加载器</a></li>
<li><a href="https://wiki.archlinux.org/index.php/REFInd#Using_PreLoader" target="_blank" rel="external nofollow noopener noreferrer">使用PreLoader</a></li>
<li><a href="https://github.com/Mic92/archlive/blob/master/build.sh#L138" target="_blank" rel="external nofollow noopener noreferrer">build.sh</a></li>
<li><a href="https://wiki.archlinux.org/index.php/archiso#Installing_packages_from_multilib" target="_blank" rel="external nofollow noopener noreferrer">阿奇索</a></li>
<li><a href="https://www.syslinux.org/wiki/index.php?title=Menu#The_simple_menu_system" target="_blank" rel="external nofollow noopener noreferrer">简单的菜单系统</a></li>
<li><a href="https://www.syslinux.org/wiki/index.php?title=Isohybrid#UEFI" target="_blank" rel="external nofollow noopener noreferrer">UEFI</a></li>
<li><a href="https://www.linuxquestions.org/questions/linux-general-1/make-uefi-bootable-live-cd-926021/" target="_blank" rel="external nofollow noopener noreferrer">制作UEFI可启动实时CD</a></li>
<li><a href="https://unix.stackexchange.com/questions/285193/what-is-the-proper-way-to-use-isolinux-with-uefi" target="_blank" rel="external nofollow noopener noreferrer">将ISOLINUX与UEFI一起使用的正确方法是什么？</a></li>
<li><a href="https://wiki.debian.org/UEFI#Booting_from_removable_media" target="_blank" rel="external nofollow noopener noreferrer">从可移动媒体引导</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GRUB#UEFI_systems" target="_blank" rel="external nofollow noopener noreferrer">UEFI系统</a></li>
<li><a href="https://www.rodsbooks.com/efi-bootloaders/installation.html" target="_blank" rel="external nofollow noopener noreferrer">管理Linux的EFI引导加载程序：EFI引导加载程序安装</a></li>
<li><a href="https://wiki.archlinux.org/index.php/syslinux#Boot_prompt" target="_blank" rel="external nofollow noopener noreferrer">例子</a></li>
<li><a href="https://forum.osdev.org/viewtopic.php?t=22169&p=178135" target="_blank" rel="external nofollow noopener noreferrer">Grub2 El-Torito CD</a></li>
<li><a href="https://forum.osdev.org/viewtopic.php?f=1&t=23766" target="_blank" rel="external nofollow noopener noreferrer">使用GRUB2创建ISO映像</a></li>
<li><a href="https://wiki.debian.org/DebianLive/MultibootISO" target="_blank" rel="external nofollow noopener noreferrer">DebianLive MultibootISO</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/grub/html_node/Images.html" target="_blank" rel="external nofollow noopener noreferrer">11个GRUB图像文件</a></li>
<li><a href="https://www.linuxquestions.org/questions/linux-software-2/stage2_eltorito-missing-884944/" target="_blank" rel="external nofollow noopener noreferrer">stage2_eltorito遗失</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/legacy/Making-a-GRUB-bootable-CD_002dROM.html" target="_blank" rel="external nofollow noopener noreferrer">3.4制作GRUB可引导CD-ROM</a></li>
<li><a href="https://unix.stackexchange.com/questions/283994/why-is-grub2-ignoring-kernel-options-when-boot-from-el-torito-on-cd" target="_blank" rel="external nofollow noopener noreferrer">从CD上的el torito引导时，grub2为什么会忽略内核选项？</a></li>
<li><a href="https://communities.vmware.com/message/2228281#2228281" target="_blank" rel="external nofollow noopener noreferrer">从CD / DVD引导UEFI无效</a></li>
<li><a href="https://communities.vmware.com/message/2583742#2583742" target="_blank" rel="external nofollow noopener noreferrer">升级到VMWS Player 12后的UEFI问题</a></li>
<li><a href="https://github.com/linuxkit/linuxkit/blob/master/tools/mkimage-iso-efi/make-efi" target="_blank" rel="external nofollow noopener noreferrer">品牌</a></li>
<li><a href="https://unix.stackexchange.com/questions/382817/uefi-bios-bootable-live-debian-stretch-amd64-with-persistence" target="_blank" rel="external nofollow noopener noreferrer">UEFI + BIOS可启动实时Debian Stretch amd64持久化</a></li>
<li><a href="https://www.syslinux.org/archives/2015-April/023381.html" target="_blank" rel="external nofollow noopener noreferrer">[syslinux] Isohybrid Wiki页面和UEFI</a></li>
</ul>
<h2 id="原文地址："><a href="#原文地址：" class="headerlink" title="原文地址："></a>原文地址：</h2><ul>
<li><a href="https://willhaley.com/blog/custom-debian-live-environment/" target="_blank" rel="external nofollow noopener noreferrer">https://willhaley.com/blog/custom-debian-live-environment/</a></li>
</ul>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>创建一个自定义 BISO+UEFI 启动的 Debian Live 环境（CD或USB）</title>
    <url>/archives/be9d9b4a.html</url>
    <content><![CDATA[<h1 id="创建一个自定义BISO-UEFI启动的Debian-Live环境（CD或USB）"><a href="#创建一个自定义BISO-UEFI启动的Debian-Live环境（CD或USB）" class="headerlink" title="创建一个自定义BISO+UEFI启动的Debian Live环境（CD或USB）"></a>创建一个自定义BISO+UEFI启动的Debian Live环境（CD或USB）</h1><p>这些是我在<strong>Ubuntu 18.04 LTS（Bionic Beaver）</strong> 64位系统上使用的步骤，用于构建可以从CD或USB引导的<strong>x86 Debian 9（Stretch）</strong>实时环境。</p>
<p>这些步骤可用于创建可启动BIOS（MBR），可启动UEFI（GPT）或可启动UEFI和BIOS的组合的实时环境。本指南的独特之处在于<strong>未使用Syslinux / Isolinux。只有Grub引导设备。</strong>这样做是为了保持一致性，并避免两者混淆（仅Syslinux / Isolinux不能完成本文中介绍的所有内容，但是Grub可以做到）。</p>
<p>以下是我的指南的替代方法，对于那些阅读本文的人来说，它们可能是更好的解决方案：<a href="https://manpages.debian.org/jessie/live-build/live-build.7.en.html" target="_blank" rel="external nofollow noopener noreferrer">live-build</a>，<a href="https://help.ubuntu.com/community/mkusb" target="_blank" rel="external nofollow noopener noreferrer">mkusb</a>，<a href="https://unetbootin.github.io/" target="_blank" rel="external nofollow noopener noreferrer">UNetbootin</a>，<a href="https://github.com/jnalley/xixer" target="_blank" rel="external nofollow noopener noreferrer">xixer</a>，<a href="https://rufus.akeo.ie/" target="_blank" rel="external nofollow noopener noreferrer">rufus</a>，<a href="https://www.pendrivelinux.com/yumi-multiboot-usb-creator/" target="_blank" rel="external nofollow noopener noreferrer">YUMI</a>，<a href="https://wiki.debian.org/Simple-CDD" target="_blank" rel="external nofollow noopener noreferrer">Simple-cdd</a>。您还应该查看<a href="https://wiki.debian.org/DebianCustomCD" target="_blank" rel="external nofollow noopener noreferrer">Debian DebianCustomCD文档，</a>因为它将比本文提供的信息多得多。</p>
<p>我写这本指南的目的更多是出于教育目的。它不一定是满足您需求的最快指南或最佳指南。希望对您有所帮助。</p>
<p><strong>警告</strong>：我已<strong>突出显示</strong>您应该在 <strong>[chroot]</strong>环境中的所有位置。小心！在本地环境而不是<a href="https://en.wikipedia.org/wiki/Chroot" target="_blank" rel="external nofollow noopener noreferrer"> chroot中</a>运行其中一些命令可能会损坏系统。</p>
<h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h1><p>安装我们需要构建环境的应用程序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    debootstrap \</span><br><span class="line">    squashfs-tools \</span><br><span class="line">    xorriso \</span><br><span class="line">    grub-pc-bin \</span><br><span class="line">    grub-efi-amd64-bin \</span><br><span class="line">    mtools</span><br></pre></td></tr></table></figure>

<p>创建一个目录，我们将在其中存储在本指南中创建的所有文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;LIVE_BOOT</span><br></pre></td></tr></table></figure>

<h1 id="引导和配置Debian"><a href="#引导和配置Debian" class="headerlink" title="引导和配置Debian"></a>引导和配置Debian</h1><p>设置基本的Debian环境。我正在使用<code>stretch</code>我的发行版和<code>i386</code>体系结构。请查阅<a href="https://www.debian.org/mirror/list" target="_blank" rel="external nofollow noopener noreferrer">debian镜像</a>列表。</p>
<p><em>如果附近有镜子，请在此命令中更改URL。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo debootstrap \</span><br><span class="line">    --arch&#x3D;i386 \</span><br><span class="line">    --variant&#x3D;minbase \</span><br><span class="line">    stretch \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;chroot \</span><br><span class="line">    http:&#x2F;&#x2F;ftp.us.debian.org&#x2F;debian&#x2F;</span><br></pre></td></tr></table></figure>

<p>Chroot到我们刚刚引导的Debian环境。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chroot $HOME&#x2F;LIVE_BOOT&#x2F;chroot</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>为您的Debian环境设置自定义主机名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;ling&quot; &gt; &#x2F;etc&#x2F;hostname</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>确定实时环境中需要哪个Linux内核。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-cache search linux-image</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>我选择了图像<code>linux-image-686</code>。我也认为这<code>live-boot</code>是必要的。<code>systemd-sys</code>（或等效项）也是提供init所必需的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    linux-image-686 \</span><br><span class="line">    live-boot \</span><br><span class="line">    systemd-sysv</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>安装您选择的程序，然后运行<code>apt-get clean</code>以节省一些空间。我使用<code>--no-install-recommends</code>以避免多余的程序包。您应该确定环境所需的内容。</p>
<p>阅读Debian的<a href="https://wiki.debian.org/ReduceDebian" target="_blank" rel="external nofollow noopener noreferrer">ReduceDebian文章，</a>以获取有关减小Debian环境大小的技巧（如果大小很重要并且您需要最小和紧凑的安装）。请注意，某些实时环境（如<a href="https://en.wikipedia.org/wiki/Tiny_Core_Linux" target="_blank" rel="external nofollow noopener noreferrer">Tiny Core Linux</a>或<a href="https://en.wikipedia.org/wiki/Puppy_Linux" target="_blank" rel="external nofollow noopener noreferrer">Puppy Linux）</a>经过专门优化，仅占很小的空间。尽管本文提供了一个相对较小的实时环境，但生成仅几十MB大小的环境仍需要付出额外的精力，而本文并未涉及。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    network-manager net-tools wireless-tools wpagui \</span><br><span class="line">    curl openssh-client \</span><br><span class="line">    blackbox xserver-xorg-core xserver-xorg xinit xterm \</span><br><span class="line">    nano &amp;&amp; \</span><br><span class="line">apt-get clean</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>设置root密码。<code>root</code>将默认为该实时环境中的唯一用户，但是您可以根据需要添加其他用户。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>退出chroot。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>创建目录，其中将包含我们的实时环境文件和暂存文件的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;LIVE_BOOT&#x2F;&#123;scratch,image&#x2F;live&#125;</span><br></pre></td></tr></table></figure>

<p>将chroot环境压缩到一个Squash文件系统中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mksquashfs \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;chroot \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;live&#x2F;filesystem.squashfs \</span><br><span class="line">    -e boot</span><br></pre></td></tr></table></figure>

<p>将内核和initramfs从中复制<code>chroot</code>到<code>live</code>目录中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp $HOME&#x2F;LIVE_BOOT&#x2F;chroot&#x2F;boot&#x2F;vmlinuz-* \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;vmlinuz &amp;&amp; \</span><br><span class="line">cp $HOME&#x2F;LIVE_BOOT&#x2F;chroot&#x2F;boot&#x2F;initrd.img-* \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;initrd</span><br></pre></td></tr></table></figure>

<p>为grub创建菜单配置文件。请注意，<code>insmod all_video</code>在我的测试中需要该行来处理我的一台计算机的<a href="https://askubuntu.com/a/857008/413290" target="_blank" rel="external nofollow noopener noreferrer">UEFI引导中的错误</a>。也许不是每个人都需要那条线，但我确实需要。</p>
<p>此配置指示Grub使用该<code>search</code>命令来推断哪个设备包含我们的实时环境。考虑到我们可以将实时环境写入可启动媒体的各种方式，这似乎是最可移植的解决方案。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;&#39;EOF&#39; &gt;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line"></span><br><span class="line">insmod all_video</span><br><span class="line"></span><br><span class="line">search --set&#x3D;root --file &#x2F;DEBIAN_CUSTOM</span><br><span class="line"></span><br><span class="line">set default&#x3D;&quot;0&quot;</span><br><span class="line">set timeout&#x3D;30</span><br><span class="line"></span><br><span class="line">menuentry &quot;Debian Live&quot; &#123;</span><br><span class="line">    linux &#x2F;vmlinuz boot&#x3D;live quiet nomodeset</span><br><span class="line">    initrd &#x2F;initrd</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>在<code>image</code>named中创建一个特殊文件<code>DEBIAN_CUSTOM</code>。该文件将用于帮助<code>Grub</code>确定哪个设备包含我们的实时文件系统。该文件名必须唯一，并且必须与我们的<code>grub.cfg</code>配置中的文件名匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;DEBIAN_CUSTOM</span><br></pre></td></tr></table></figure>

<p>您的<code>LIVE_BOOT</code>目录现在应该大致如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LIVE_BOOT&#x2F;chroot&#x2F;*tons of chroot files*</span><br><span class="line">LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;DEBIAN_CUSTOM</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;initrd</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;vmlinuz</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;live&#x2F;filesystem.squashfs</span><br></pre></td></tr></table></figure>

<h1 id="创建可启动媒体"><a href="#创建可启动媒体" class="headerlink" title="创建可启动媒体"></a>创建可启动媒体</h1><p>请注意，下面有两组<strong>单独</strong>的说明，用于为实时环境创建可启动媒体。一个进程名为<a href="https://willhaley.com/blog/custom-debian-live-environment/#create-bootable-isocd" target="_blank" rel="external nofollow noopener noreferrer">Create Bootable ISO / CD</a>，<strong>另一个进程</strong>名为<a href="https://willhaley.com/blog/custom-debian-live-environment/#create-bootable-usb" target="_blank" rel="external nofollow noopener noreferrer">Create Bootable USB</a>。</p>
<ul>
<li>在<strong>创建可启动ISO / CD</strong>指令将导致<code>.iso</code>包含我们的生活环境中的图像文件。</li>
<li>“ <strong>创建可启动USB”</strong>说明将导致我们的实时环境直接安装到USB设备上。</li>
</ul>
<p><code>.iso</code>我们使用<strong>创建可启动ISO / CD</strong>指令<strong>创建</strong>的文件可以刻录到CD-ROM（光学介质），或通过写入USB设备<code>dd</code>。允许我们<code>.iso</code>文件中这种“应收帐款”行为的功能<em>并非</em>免费提供。这个过程有点复杂，但是在许多现代的实时环境（例如Ubuntu安装<code>.iso</code>文件）中，这种行为是很常见的。</p>
<p><em>请注意，将<code>.iso</code>文件写入USB设备与将实时环境直接安装到USB设备并不相同。在我的<a href="https://willhaley.com/blog/custom-debian-live-environment/#notes" target="_blank" rel="external nofollow noopener noreferrer">笔记</a>中详细了解我的发现。</em></p>
<h2 id="创建可启动的ISO-CD"><a href="#创建可启动的ISO-CD" class="headerlink" title="创建可启动的ISO / CD"></a>创建可启动的ISO / CD</h2><p>将实时环境安装到<code>.iso</code>可以刻录到光学介质的文件中。</p>
<p>如上所述，<code>.iso</code>通过这些步骤生成的文件<strong>可以</strong>使用写入到USB设备<code>dd</code>。</p>
<p>创建一个grub UEFI映像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grub-mkstandalone \</span><br><span class="line">    --format&#x3D;x86_64-efi \</span><br><span class="line">    --output&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;bootx64.efi \</span><br><span class="line">    --locales&#x3D;&quot;&quot; \</span><br><span class="line">    --fonts&#x3D;&quot;&quot; \</span><br><span class="line">    &quot;boot&#x2F;grub&#x2F;grub.cfg&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg&quot;</span><br></pre></td></tr></table></figure>

<p>创建包含EFI引导加载程序的FAT16 UEFI引导磁盘映像。请注意，使用<code>mmd</code>和<code>mcopy</code>命令来复制名为的UEFI引导加载程序<code>bootx64.efi</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(cd $HOME&#x2F;LIVE_BOOT&#x2F;scratch &amp;&amp; \</span><br><span class="line">    dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;efiboot.img bs&#x3D;1M count&#x3D;10 &amp;&amp; \</span><br><span class="line">    mkfs.vfat efiboot.img &amp;&amp; \</span><br><span class="line">    mmd -i efiboot.img efi efi&#x2F;boot &amp;&amp; \</span><br><span class="line">    mcopy -i efiboot.img .&#x2F;bootx64.efi ::efi&#x2F;boot&#x2F;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>创建一个grub BIOS映像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grub-mkstandalone \</span><br><span class="line">    --format&#x3D;i386-pc \</span><br><span class="line">    --output&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;core.img \</span><br><span class="line">    --install-modules&#x3D;&quot;linux normal iso9660 biosdisk memdisk search tar ls&quot; \</span><br><span class="line">    --modules&#x3D;&quot;linux normal iso9660 biosdisk search&quot; \</span><br><span class="line">    --locales&#x3D;&quot;&quot; \</span><br><span class="line">    --fonts&#x3D;&quot;&quot; \</span><br><span class="line">    &quot;boot&#x2F;grub&#x2F;grub.cfg&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg&quot;</span><br></pre></td></tr></table></figure>

<p><code>cat</code>用于将可引导的Grub <code>cdboot.img</code>引导加载程序与我们的引导映像结合使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat \</span><br><span class="line">    &#x2F;usr&#x2F;lib&#x2F;grub&#x2F;i386-pc&#x2F;cdboot.img \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;core.img \</span><br><span class="line">&gt; $HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;bios.img</span><br></pre></td></tr></table></figure>

<p>生成ISO文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xorriso \</span><br><span class="line">    -as mkisofs \</span><br><span class="line">    -iso-level 3 \</span><br><span class="line">    -full-iso9660-filenames \</span><br><span class="line">    -volid &quot;DEBIAN_CUSTOM&quot; \</span><br><span class="line">    -eltorito-boot \</span><br><span class="line">        boot&#x2F;grub&#x2F;bios.img \</span><br><span class="line">        -no-emul-boot \</span><br><span class="line">        -boot-load-size 4 \</span><br><span class="line">        -boot-info-table \</span><br><span class="line">        --eltorito-catalog boot&#x2F;grub&#x2F;boot.cat \</span><br><span class="line">    --grub2-boot-info \</span><br><span class="line">    --grub2-mbr &#x2F;usr&#x2F;lib&#x2F;grub&#x2F;i386-pc&#x2F;boot_hybrid.img \</span><br><span class="line">    -eltorito-alt-boot \</span><br><span class="line">        -e EFI&#x2F;efiboot.img \</span><br><span class="line">        -no-emul-boot \</span><br><span class="line">    -append_partition 2 0xef $&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;efiboot.img \</span><br><span class="line">    -output &quot;$&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;debian-custom.iso&quot; \</span><br><span class="line">    -graft-points \</span><br><span class="line">        &quot;$&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;image&quot; \</span><br><span class="line">        &#x2F;boot&#x2F;grub&#x2F;bios.img&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;bios.img \</span><br><span class="line">        &#x2F;EFI&#x2F;efiboot.img&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;efiboot.img</span><br></pre></td></tr></table></figure>

<p>现在将ISO刻录到CD，您应该准备使用UEFI或BIOS系统从CD引导。</p>
<h2 id="创建可启动USB"><a href="#创建可启动USB" class="headerlink" title="创建可启动USB"></a>创建可启动USB</h2><p>将实时环境安装到USB设备。</p>
<p>如上所述，在安装现场环境到USB设备是<strong>不</strong>一样的书面<code>.iso</code>文件到USB设备。在这两种情况下，最终结果在大多数情况下都是相同的，但是存在一些细微的差异值得理解，并且有正当的理由，有人可能希望将实时环境直接安装到USB设备，而不是将<code>.iso</code>文件写入USB设备。 </p>
<p>我假设您在<strong>/ dev /</strong> sdz上有一个已挂载的<strong>空白</strong> USB驱动器。为了在实际的块设备中轻松进行交换，我在这些命令中使用了一个变量。<code>$disk</code></p>
<p>导出<code>disk</code>变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export disk&#x3D;&#x2F;dev&#x2F;sdz</span><br></pre></td></tr></table></figure>

<p>为USB驱动器创建一些安装点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt&#x2F;&#123;usb,efi&#125;</span><br></pre></td></tr></table></figure>

<p>使用分割USB驱动器<code>parted</code>。此命令在GPT（Guid分区表）布局中创建3个分区。一个分区用于BIOS引导记录，一个分区用于UEFI，另一个分区用于我们的Debian OS和其他实时数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo parted --script $disk \</span><br><span class="line">    mklabel gpt \</span><br><span class="line">    mkpart primary fat32 2048s 4095s \</span><br><span class="line">        name 1 BIOS \</span><br><span class="line">        set 1 bios_grub on \</span><br><span class="line">    mkpart ESP fat32 4096s 413695s \</span><br><span class="line">        name 2 EFI \</span><br><span class="line">        set 2 esp on \</span><br><span class="line">    mkpart primary fat32 413696s 100% \</span><br><span class="line">        name 3 LINUX \</span><br><span class="line">        set 3 msftdata on</span><br></pre></td></tr></table></figure>

<p>为USB设备生成一个混合MBR。注意，这是非标准的，因此可能不适用于所有系统。<a href="https://wiki.archlinux.org/index.php/Multiboot_USB_drive#Hybrid_UEFI_GPT_.2B_BIOS_GPT.2FMBR_boot" target="_blank" rel="external nofollow noopener noreferrer">我</a>在混合MBR上发现的<a href="https://tails.boum.org/blueprint/usb_install_and_upgrade/gpt/" target="_blank" rel="external nofollow noopener noreferrer">唯一</a> <a href="https://wiki.gentoo.org/wiki/Hybrid_partition_table" target="_blank" rel="external nofollow noopener noreferrer">指南</a> 表明必须使用。支持<a href="https://manpages.debian.org/unstable/gdisk/sgdisk.8.en.html" target="_blank" rel="external nofollow noopener noreferrer">不在中的</a>命令，因此该命令不容易编写脚本。用于警告的文档警告此过程是<a href="http://www.rodsbooks.com/gdisk/hybrid.html" target="_blank" rel="external nofollow noopener noreferrer">非标准的，易碎的且不受支持的</a>，但这<em>通常</em>似乎确实可以预期。它允许BIOS和UEFI从同一USB设备引导。<code>gdisk``gdisk</code> <code>sgdisk``gdisk</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gdisk $disk &lt;&lt; EOF</span><br><span class="line">r     # recovery and transformation options</span><br><span class="line">h     # make hybrid MBR</span><br><span class="line">1 2 3 # partition numbers for hybrid MBR</span><br><span class="line">N     # do not place EFI GPT (0xEE) partition first in MBR</span><br><span class="line">EF    # MBR hex code</span><br><span class="line">N     # do not set bootable flag</span><br><span class="line">EF    # MBR hex code</span><br><span class="line">N     # do not set bootable flag</span><br><span class="line">83    # MBR hex code</span><br><span class="line">Y     # set the bootable flag</span><br><span class="line">x     # extra functionality menu</span><br><span class="line">h     # recompute CHS values in protective&#x2F;hybrid MBR</span><br><span class="line">w     # write table to disk and exit</span><br><span class="line">Y     # confirm changes</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>格式化UEFI和数据分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.vfat -F32 $&#123;disk&#125;2 &amp;&amp; \</span><br><span class="line">sudo mkfs.vfat -F32 $&#123;disk&#125;3</span><br></pre></td></tr></table></figure>

<p>挂载分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount $&#123;disk&#125;2 &#x2F;mnt&#x2F;efi &amp;&amp; \</span><br><span class="line">sudo mount $&#123;disk&#125;3 &#x2F;mnt&#x2F;usb</span><br></pre></td></tr></table></figure>

<p>安装用于x86_64 UEFI引导的Grub。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo grub-install \</span><br><span class="line">    --target&#x3D;x86_64-efi \</span><br><span class="line">    --efi-directory&#x3D;&#x2F;mnt&#x2F;efi \</span><br><span class="line">    --boot-directory&#x3D;&#x2F;mnt&#x2F;usb&#x2F;boot \</span><br><span class="line">    --removable \</span><br><span class="line">    --recheck</span><br></pre></td></tr></table></figure>

<p>安装用于i386-pc引导的Grub。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo grub-install \</span><br><span class="line">    --target&#x3D;i386-pc \</span><br><span class="line">    --boot-directory&#x3D;&#x2F;mnt&#x2F;usb&#x2F;boot \</span><br><span class="line">    --recheck \</span><br><span class="line">    $disk</span><br></pre></td></tr></table></figure>

<p><code>live</code>在USB设备上创建目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt&#x2F;usb&#x2F;&#123;boot&#x2F;grub,live&#125;</span><br></pre></td></tr></table></figure>

<p>将我们先前生成的Debian实时环境文件复制到USB磁盘。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp -r $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;* &#x2F;mnt&#x2F;usb&#x2F;</span><br></pre></td></tr></table></figure>

<p>将<code>grub.cfg</code>启动配置复制到USB设备。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg \</span><br><span class="line">    &#x2F;mnt&#x2F;usb&#x2F;boot&#x2F;grub&#x2F;grub.cfg</span><br></pre></td></tr></table></figure>

<p>现在，卸下磁盘，您应该已经准备好在BIOS或UEFI系统上从磁盘引导。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umount &#x2F;mnt&#x2F;&#123;usb,efi&#125;</span><br></pre></td></tr></table></figure>

<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项 +"></a>注意事项 +</h1><h1 id="注释（Rufus支持）"><a href="#注释（Rufus支持）" class="headerlink" title="注释（Rufus支持） +"></a>注释（Rufus支持） +</h1><h1 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h1><ul>
<li><a href="https://linux.die.net/man/8/sgdisk" target="_blank" rel="external nofollow noopener noreferrer">sgdisk（8）-Linux手册页</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Multiboot_USB_drive#Hybrid_UEFI_GPT_.2B_BIOS_GPT.2FMBR_boot" target="_blank" rel="external nofollow noopener noreferrer">混合UEFI GPT + BIOS GPT / MBR引导</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GRUB#.22No_suitable_mode_found.22_error" target="_blank" rel="external nofollow noopener noreferrer">“找不到合适的模式”错误</a></li>
<li><a href="https://askubuntu.com/questions/258991/where-is-the-memtest-option-on-the-ubuntu-64-bit-live-cd" target="_blank" rel="external nofollow noopener noreferrer">Ubuntu 64位实时CD上的memtest选项在哪里？</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Remastering_the_Install_ISO" target="_blank" rel="external nofollow noopener noreferrer">重新掌握安装ISO</a></li>
<li><a href="https://help.ubuntu.com/community/UEFIBooting#Install_GRUB2_in_.28U.29EFI_systems" target="_blank" rel="external nofollow noopener noreferrer">在（U）EFI系统中安装GRUB2</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/grub/html_node/Embedded-configuration.html" target="_blank" rel="external nofollow noopener noreferrer">6.4将配置文件嵌入GRUB</a></li>
<li><a href="https://askubuntu.com/questions/643938/standalone-grub2-efi-installation-grub-cfg-placement" target="_blank" rel="external nofollow noopener noreferrer">独立的Grub2 EFI安装-grub.cfg放置？</a></li>
<li><a href="https://unix.stackexchange.com/questions/253657/actual-usage-of-grub-mkimage-config" target="_blank" rel="external nofollow noopener noreferrer">“ grub-mkimage –config =”的实际用法</a></li>
<li><a href="http://lukeluo.blogspot.com/2013/06/grub-how-to-4-memdisk-and-loopback.html" target="_blank" rel="external nofollow noopener noreferrer">GRUB2使用方法（4）：内存磁盘和回送设备</a></li>
<li><a href="https://unix.stackexchange.com/questions/267765/how-does-the-grub-efi-loader-find-the-correct-grub-cfg-and-boot-directory" target="_blank" rel="external nofollow noopener noreferrer">grub efi加载程序如何找到正确的grub.cfg和引导目录？</a></li>
<li><a href="https://www.linux.com/learn/how-rescue-non-booting-grub-2-Linux" target="_blank" rel="external nofollow noopener noreferrer">如何在Linux上救援非引导式GRUB 2</a></li>
<li><a href="https://help.ubuntu.com/community/BootFromUSB#Using_a_CD" target="_blank" rel="external nofollow noopener noreferrer">使用光盘</a></li>
<li><a href="https://superuser.com/questions/746553/boot-linux-with-extlinux-from-efi-gpt" target="_blank" rel="external nofollow noopener noreferrer">从EFI和GPT用extlinux引导Linux</a></li>
<li><a href="https://blog.fpmurphy.com/2010/06/grub2-modules.html" target="_blank" rel="external nofollow noopener noreferrer">GRUB2模块</a></li>
<li><a href="https://github.com/coreos/grub/blob/master/util/grub-install.c" target="_blank" rel="external nofollow noopener noreferrer">grub-install.c</a></li>
<li><a href="https://help.ubuntu.com/community/Grub2/Troubleshooting" target="_blank" rel="external nofollow noopener noreferrer">Grub2 /问题排查</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Secure_Boot#Set_up_PreLoader" target="_blank" rel="external nofollow noopener noreferrer">设置预加载器</a></li>
<li><a href="https://wiki.archlinux.org/index.php/REFInd#Using_PreLoader" target="_blank" rel="external nofollow noopener noreferrer">使用PreLoader</a></li>
<li><a href="https://github.com/Mic92/archlive/blob/master/build.sh#L138" target="_blank" rel="external nofollow noopener noreferrer">build.sh</a></li>
<li><a href="https://wiki.archlinux.org/index.php/archiso#Installing_packages_from_multilib" target="_blank" rel="external nofollow noopener noreferrer">阿奇索</a></li>
<li><a href="https://www.syslinux.org/wiki/index.php?title=Menu#The_simple_menu_system" target="_blank" rel="external nofollow noopener noreferrer">简单的菜单系统</a></li>
<li><a href="https://www.syslinux.org/wiki/index.php?title=Isohybrid#UEFI" target="_blank" rel="external nofollow noopener noreferrer">UEFI</a></li>
<li><a href="https://www.linuxquestions.org/questions/linux-general-1/make-uefi-bootable-live-cd-926021/" target="_blank" rel="external nofollow noopener noreferrer">制作UEFI可启动实时CD</a></li>
<li><a href="https://unix.stackexchange.com/questions/285193/what-is-the-proper-way-to-use-isolinux-with-uefi" target="_blank" rel="external nofollow noopener noreferrer">将ISOLINUX与UEFI一起使用的正确方法是什么？</a></li>
<li><a href="https://wiki.debian.org/UEFI#Booting_from_removable_media" target="_blank" rel="external nofollow noopener noreferrer">从可移动媒体引导</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GRUB#UEFI_systems" target="_blank" rel="external nofollow noopener noreferrer">UEFI系统</a></li>
<li><a href="https://www.rodsbooks.com/efi-bootloaders/installation.html" target="_blank" rel="external nofollow noopener noreferrer">管理Linux的EFI引导加载程序：EFI引导加载程序安装</a></li>
<li><a href="https://wiki.archlinux.org/index.php/syslinux#Boot_prompt" target="_blank" rel="external nofollow noopener noreferrer">例子</a></li>
<li><a href="https://forum.osdev.org/viewtopic.php?t=22169&p=178135" target="_blank" rel="external nofollow noopener noreferrer">Grub2 El-Torito CD</a></li>
<li><a href="https://forum.osdev.org/viewtopic.php?f=1&t=23766" target="_blank" rel="external nofollow noopener noreferrer">使用GRUB2创建ISO映像</a></li>
<li><a href="https://wiki.debian.org/DebianLive/MultibootISO" target="_blank" rel="external nofollow noopener noreferrer">DebianLive MultibootISO</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/grub/html_node/Images.html" target="_blank" rel="external nofollow noopener noreferrer">11个GRUB图像文件</a></li>
<li><a href="https://www.linuxquestions.org/questions/linux-software-2/stage2_eltorito-missing-884944/" target="_blank" rel="external nofollow noopener noreferrer">stage2_eltorito遗失</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/legacy/Making-a-GRUB-bootable-CD_002dROM.html" target="_blank" rel="external nofollow noopener noreferrer">3.4制作GRUB可引导CD-ROM</a></li>
<li><a href="https://unix.stackexchange.com/questions/283994/why-is-grub2-ignoring-kernel-options-when-boot-from-el-torito-on-cd" target="_blank" rel="external nofollow noopener noreferrer">从CD上的el torito引导时，grub2为什么会忽略内核选项？</a></li>
<li><a href="https://communities.vmware.com/message/2228281#2228281" target="_blank" rel="external nofollow noopener noreferrer">从CD / DVD引导UEFI无效</a></li>
<li><a href="https://communities.vmware.com/message/2583742#2583742" target="_blank" rel="external nofollow noopener noreferrer">升级到VMWS Player 12后的UEFI问题</a></li>
<li><a href="https://github.com/linuxkit/linuxkit/blob/master/tools/mkimage-iso-efi/make-efi" target="_blank" rel="external nofollow noopener noreferrer">品牌</a></li>
<li><a href="https://unix.stackexchange.com/questions/382817/uefi-bios-bootable-live-debian-stretch-amd64-with-persistence" target="_blank" rel="external nofollow noopener noreferrer">UEFI + BIOS可启动实时Debian Stretch amd64持久化</a></li>
<li><a href="https://www.syslinux.org/archives/2015-April/023381.html" target="_blank" rel="external nofollow noopener noreferrer">[syslinux] Isohybrid Wiki页面和UEFI</a></li>
</ul>
<h2 id="原文地址："><a href="#原文地址：" class="headerlink" title="原文地址："></a>原文地址：</h2><ul>
<li><a href="https://willhaley.com/blog/custom-debian-live-environment/" target="_blank" rel="external nofollow noopener noreferrer">https://willhaley.com/blog/custom-debian-live-environment/</a></li>
</ul>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>创建一个自定义 BIOS 启动的 Debian Live 环境（CD或USB）</title>
    <url>/archives/6e636d85.html</url>
    <content><![CDATA[<p>这些是我在<strong>Ubuntu 18.04 LTS（Bionic Beaver）</strong> 64位系统上使用的步骤，用于构建可以从CD或USB引导的<strong>x86 Debian 9（Stretch）</strong>实时环境。</p>
<p>这些步骤可用于创建可启动BIOS（MBR），可启动UEFI（GPT）或可启动UEFI和BIOS的组合的实时环境。本指南的独特之处在于<strong>未使用Syslinux / Isolinux。只有Grub引导设备。</strong>这样做是为了保持一致性，并避免两者混淆（仅Syslinux / Isolinux不能完成本文中介绍的所有内容，但是Grub可以做到）。</p>
<p>以下是我的指南的替代方法，对于那些阅读本文的人来说，它们可能是更好的解决方案：<a href="https://manpages.debian.org/jessie/live-build/live-build.7.en.html" target="_blank" rel="external nofollow noopener noreferrer">live-build</a>，<a href="https://help.ubuntu.com/community/mkusb" target="_blank" rel="external nofollow noopener noreferrer">mkusb</a>，<a href="https://unetbootin.github.io/" target="_blank" rel="external nofollow noopener noreferrer">UNetbootin</a>，<a href="https://github.com/jnalley/xixer" target="_blank" rel="external nofollow noopener noreferrer">xixer</a>，<a href="https://rufus.akeo.ie/" target="_blank" rel="external nofollow noopener noreferrer">rufus</a>，<a href="https://www.pendrivelinux.com/yumi-multiboot-usb-creator/" target="_blank" rel="external nofollow noopener noreferrer">YUMI</a>，<a href="https://wiki.debian.org/Simple-CDD" target="_blank" rel="external nofollow noopener noreferrer">Simple-cdd</a>。您还应该查看<a href="https://wiki.debian.org/DebianCustomCD" target="_blank" rel="external nofollow noopener noreferrer">Debian DebianCustomCD文档，</a>因为它将比本文提供的信息多得多。</p>
<p>我写这本指南的目的更多是出于教育目的。它不一定是满足您需求的最快指南或最佳指南。希望对您有所帮助。</p>
<p><strong>警告</strong>：我已<strong>突出显示</strong>您应该在 <strong>[chroot]</strong>环境中的所有位置。小心！在本地环境而不是<a href="https://en.wikipedia.org/wiki/Chroot" target="_blank" rel="external nofollow noopener noreferrer"> chroot中</a>运行其中一些命令可能会损坏系统。</p>
<h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h1><p>安装我们需要构建环境的应用程序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    debootstrap \</span><br><span class="line">    squashfs-tools \</span><br><span class="line">    xorriso \</span><br><span class="line">    grub-pc-bin \</span><br><span class="line">    grub-efi-amd64-bin \</span><br><span class="line">    mtools</span><br></pre></td></tr></table></figure>

<p>创建一个目录，我们将在其中存储在本指南中创建的所有文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;LIVE_BOOT</span><br></pre></td></tr></table></figure>

<h1 id="引导和配置Debian"><a href="#引导和配置Debian" class="headerlink" title="引导和配置Debian"></a>引导和配置Debian</h1><p>设置基本的Debian环境。我正在使用<code>stretch</code>我的发行版和<code>i386</code>体系结构。请查阅<a href="https://www.debian.org/mirror/list" target="_blank" rel="external nofollow noopener noreferrer">debian镜像</a>列表。</p>
<p><em>如果附近有镜像网站，请在此命令中更改URL。</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo debootstrap \</span><br><span class="line">    --arch&#x3D;i386 \</span><br><span class="line">    --variant&#x3D;minbase \</span><br><span class="line">    stretch \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;chroot \</span><br><span class="line">    http:&#x2F;&#x2F;ftp.us.debian.org&#x2F;debian&#x2F;</span><br></pre></td></tr></table></figure>

<p>Chroot到我们刚刚引导的Debian环境。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chroot $HOME&#x2F;LIVE_BOOT&#x2F;chroot</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>为您的Debian环境设置自定义主机名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;ling&quot; &gt; &#x2F;etc&#x2F;hostname</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>确定实时环境中需要哪个Linux内核。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-cache search linux-image</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>我选择了图像<code>linux-image-686</code>。我也认为这<code>live-boot</code>是必要的。<code>systemd-sys</code>（或等效项）也是提供init所必需的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    linux-image-686 \</span><br><span class="line">    live-boot \</span><br><span class="line">    systemd-sysv</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>安装您选择的程序，然后运行<code>apt-get clean</code>以节省一些空间。我使用<code>--no-install-recommends</code>以避免多余的程序包。您应该确定环境所需的内容。</p>
<p>阅读Debian的<a href="https://wiki.debian.org/ReduceDebian" target="_blank" rel="external nofollow noopener noreferrer">ReduceDebian文章，</a>以获取有关减小Debian环境大小的技巧（如果大小很重要并且您需要最小和紧凑的安装）。请注意，某些实时环境（如<a href="https://en.wikipedia.org/wiki/Tiny_Core_Linux" target="_blank" rel="external nofollow noopener noreferrer">Tiny Core Linux</a>或<a href="https://en.wikipedia.org/wiki/Puppy_Linux" target="_blank" rel="external nofollow noopener noreferrer">Puppy Linux）</a>经过专门优化，仅占很小的空间。尽管本文提供了一个相对较小的实时环境，但生成仅几十MB大小的环境仍需要付出额外的精力，而本文并未涉及。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install --no-install-recommends \</span><br><span class="line">    network-manager net-tools wireless-tools wpagui \</span><br><span class="line">    curl openssh-client \</span><br><span class="line">    blackbox xserver-xorg-core xserver-xorg xinit xterm \</span><br><span class="line">    nano &amp;&amp; \</span><br><span class="line">apt-get clean</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>设置root密码。<code>root</code>将默认为该实时环境中的唯一用户，但是您可以根据需要添加其他用户。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>

<p><strong>[chroot]</strong>退出chroot。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>创建目录，其中将包含我们的实时环境文件和暂存文件的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;LIVE_BOOT&#x2F;&#123;scratch,image&#x2F;live&#125;</span><br></pre></td></tr></table></figure>

<p>将chroot环境压缩到一个Squash文件系统中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mksquashfs \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;chroot \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;live&#x2F;filesystem.squashfs \</span><br><span class="line">    -e boot</span><br></pre></td></tr></table></figure>

<p>将内核和initramfs从中复制<code>chroot</code>到<code>live</code>目录中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp $HOME&#x2F;LIVE_BOOT&#x2F;chroot&#x2F;boot&#x2F;vmlinuz-* \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;vmlinuz &amp;&amp; \</span><br><span class="line">cp $HOME&#x2F;LIVE_BOOT&#x2F;chroot&#x2F;boot&#x2F;initrd.img-* \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;initrd</span><br></pre></td></tr></table></figure>

<p>为grub创建菜单配置文件。请注意，<code>insmod all_video</code>在我的测试中需要该行来处理我的一台计算机的<a href="https://askubuntu.com/a/857008/413290" target="_blank" rel="external nofollow noopener noreferrer">UEFI引导中的错误</a>。也许不是每个人都需要那条线，但我确实需要。</p>
<p>此配置指示Grub使用该<code>search</code>命令来推断哪个设备包含我们的实时环境。考虑到我们可以将实时环境写入可启动媒体的各种方式，这似乎是最可移植的解决方案。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;&#39;EOF&#39; &gt;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line"></span><br><span class="line">insmod all_video</span><br><span class="line"></span><br><span class="line">search --set&#x3D;root --file &#x2F;DEBIAN_CUSTOM</span><br><span class="line"></span><br><span class="line">set default&#x3D;&quot;0&quot;</span><br><span class="line">set timeout&#x3D;30</span><br><span class="line"></span><br><span class="line">menuentry &quot;Debian Live&quot; &#123;</span><br><span class="line">    linux &#x2F;vmlinuz boot&#x3D;live quiet nomodeset</span><br><span class="line">    initrd &#x2F;initrd</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>在<code>image</code>named中创建一个特殊文件<code>DEBIAN_CUSTOM</code>。该文件将用于帮助<code>Grub</code>确定哪个设备包含我们的实时文件系统。该文件名必须唯一，并且必须与我们的<code>grub.cfg</code>配置中的文件名匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;DEBIAN_CUSTOM</span><br></pre></td></tr></table></figure>

<p>您的<code>LIVE_BOOT</code>目录现在应该大致如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LIVE_BOOT&#x2F;chroot&#x2F;*tons of chroot files*</span><br><span class="line">LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;DEBIAN_CUSTOM</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;initrd</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;vmlinuz</span><br><span class="line">LIVE_BOOT&#x2F;image&#x2F;live&#x2F;filesystem.squashfs</span><br></pre></td></tr></table></figure>

<h1 id="创建可启动媒体"><a href="#创建可启动媒体" class="headerlink" title="创建可启动媒体"></a>创建可启动媒体</h1><p>请注意，下面有两组<strong>单独</strong>的说明，用于为实时环境创建可启动媒体。一个进程名为<a href="https://willhaley.com/blog/custom-debian-live-environment/#create-bootable-isocd" target="_blank" rel="external nofollow noopener noreferrer">Create Bootable ISO / CD</a>，<strong>另一个进程</strong>名为<a href="https://willhaley.com/blog/custom-debian-live-environment/#create-bootable-usb" target="_blank" rel="external nofollow noopener noreferrer">Create Bootable USB</a>。</p>
<ul>
<li>在<strong>创建可启动ISO / CD</strong>指令将导致<code>.iso</code>包含我们的生活环境中的图像文件。</li>
<li>“ <strong>创建可启动USB”</strong>说明将导致我们的实时环境直接安装到USB设备上。</li>
</ul>
<p><code>.iso</code>我们使用<strong>创建可启动ISO / CD</strong>指令<strong>创建</strong>的文件可以刻录到CD-ROM（光学介质），或通过写入USB设备<code>dd</code>。允许我们<code>.iso</code>文件中这种“应收帐款”行为的功能<em>并非</em>免费提供。这个过程有点复杂，但是在许多现代的实时环境（例如Ubuntu安装<code>.iso</code>文件）中，这种行为是很常见的。</p>
<p><em>请注意，将<code>.iso</code>文件写入USB设备与将实时环境直接安装到USB设备并不相同。在我的<a href="https://willhaley.com/blog/custom-debian-live-environment/#notes" target="_blank" rel="external nofollow noopener noreferrer">笔记</a>中详细了解我的发现。</em></p>
<h2 id="创建可启动的ISO-CD-（BIOS-启动方式）"><a href="#创建可启动的ISO-CD-（BIOS-启动方式）" class="headerlink" title="创建可启动的ISO / CD （BIOS 启动方式）"></a>创建可启动的ISO / CD （BIOS 启动方式）</h2><p>将实时环境安装到<code>.iso</code>可以刻录到光学介质的文件中。</p>
<p>如上所述，<code>.iso</code>通过这些步骤生成的文件<strong>可以</strong>使用写入到USB设备<code>dd</code>。</p>
<p>创建一个grub BIOS映像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grub-mkstandalone \</span><br><span class="line">    --format&#x3D;i386-pc \</span><br><span class="line">    --output&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;core.img \</span><br><span class="line">    --install-modules&#x3D;&quot;linux normal iso9660 biosdisk memdisk search tar ls&quot; \</span><br><span class="line">    --modules&#x3D;&quot;linux normal iso9660 biosdisk search&quot; \</span><br><span class="line">    --locales&#x3D;&quot;&quot; \</span><br><span class="line">    --fonts&#x3D;&quot;&quot; \</span><br><span class="line">    &quot;boot&#x2F;grub&#x2F;grub.cfg&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg&quot;</span><br></pre></td></tr></table></figure>

<p><code>cat</code>用于将可引导的Grub <code>cdboot.img</code>引导加载程序与我们的引导映像结合使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat \</span><br><span class="line">    &#x2F;usr&#x2F;lib&#x2F;grub&#x2F;i386-pc&#x2F;cdboot.img \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;core.img \</span><br><span class="line">&gt; $HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;bios.img</span><br></pre></td></tr></table></figure>

<p>生成ISO文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xorriso \</span><br><span class="line">    -as mkisofs \</span><br><span class="line">    -iso-level 3 \</span><br><span class="line">    -full-iso9660-filenames \</span><br><span class="line">    -volid &quot;DEBIAN_CUSTOM&quot; \</span><br><span class="line">    --grub2-boot-info \</span><br><span class="line">    --grub2-mbr &#x2F;usr&#x2F;lib&#x2F;grub&#x2F;i386-pc&#x2F;boot_hybrid.img \</span><br><span class="line">    -eltorito-boot \</span><br><span class="line">        boot&#x2F;grub&#x2F;bios.img \</span><br><span class="line">        -no-emul-boot \</span><br><span class="line">        -boot-load-size 4 \</span><br><span class="line">        -boot-info-table \</span><br><span class="line">        --eltorito-catalog boot&#x2F;grub&#x2F;boot.cat \</span><br><span class="line">    -output &quot;$&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;debian-custom.iso&quot; \</span><br><span class="line">    -graft-points \</span><br><span class="line">        &quot;$&#123;HOME&#125;&#x2F;LIVE_BOOT&#x2F;image&quot; \</span><br><span class="line">        &#x2F;boot&#x2F;grub&#x2F;bios.img&#x3D;$HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;bios.img</span><br></pre></td></tr></table></figure>

<p>现在将ISO刻录到CD，您应该可以使用BIOS系统从CD引导了。</p>
<h2 id="创建可启动USB"><a href="#创建可启动USB" class="headerlink" title="创建可启动USB"></a>创建可启动USB</h2><p>将实时环境安装到USB设备。</p>
<p>如上所述，在安装现场环境到USB设备是<strong>不</strong>一样的书面<code>.iso</code>文件到USB设备。在这两种情况下，最终结果在大多数情况下都是相同的，但是存在一些细微的差异值得理解，并且有正当的理由，有人可能希望将实时环境直接安装到USB设备，而不是将<code>.iso</code>文件写入USB设备。 </p>
<p>我假设您在<strong>/ dev /</strong> sdz上有一个已挂载的<strong>空白</strong> USB驱动器。为了在实际的块设备中轻松进行交换，我在这些命令中使用了一个变量。<code>$disk</code></p>
<p>导出<code>disk</code>变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export disk&#x3D;&#x2F;dev&#x2F;sdz</span><br></pre></td></tr></table></figure>

<p>为USB驱动器创建安装点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt&#x2F;usb</span><br></pre></td></tr></table></figure>

<p>使用分割USB驱动器<code>parted</code>。该命令在传统的MBR布局中创建1个分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo parted --script $disk \</span><br><span class="line">    mklabel msdos \</span><br><span class="line">    mkpart primary fat32 1MiB 100%</span><br></pre></td></tr></table></figure>

<p>格式化分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.vfat -F32 $&#123;disk&#125;1</span><br></pre></td></tr></table></figure>

<p>挂载分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount $&#123;disk&#125;1 &#x2F;mnt&#x2F;usb</span><br></pre></td></tr></table></figure>

<p>安装用于i386-pc引导的Grub。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo grub-install \</span><br><span class="line">    --target&#x3D;i386-pc \</span><br><span class="line">    --boot-directory&#x3D;&#x2F;mnt&#x2F;usb&#x2F;boot \</span><br><span class="line">    --recheck \</span><br><span class="line">    $disk</span><br></pre></td></tr></table></figure>

<p><code>live</code>在USB设备上创建目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;mnt&#x2F;usb&#x2F;&#123;boot&#x2F;grub,live&#125;</span><br></pre></td></tr></table></figure>

<p>将我们先前生成的Debian实时环境文件复制到USB磁盘。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp -r $HOME&#x2F;LIVE_BOOT&#x2F;image&#x2F;* &#x2F;mnt&#x2F;usb&#x2F;</span><br></pre></td></tr></table></figure>

<p>将<code>grub.cfg</code>启动配置复制到USB设备。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp \</span><br><span class="line">    $HOME&#x2F;LIVE_BOOT&#x2F;scratch&#x2F;grub.cfg \</span><br><span class="line">    &#x2F;mnt&#x2F;usb&#x2F;boot&#x2F;grub&#x2F;grub.cfg</span><br></pre></td></tr></table></figure>

<p>现在，卸下磁盘，您应该已经准备好在BIOS系统上从磁盘引导。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umount &#x2F;mnt&#x2F;usb</span><br></pre></td></tr></table></figure>

<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项 +"></a>注意事项 +</h1><h1 id="注释（Rufus支持）"><a href="#注释（Rufus支持）" class="headerlink" title="注释（Rufus支持） +"></a>注释（Rufus支持） +</h1><h1 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h1><ul>
<li><a href="https://linux.die.net/man/8/sgdisk" target="_blank" rel="external nofollow noopener noreferrer">sgdisk（8）-Linux手册页</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Multiboot_USB_drive#Hybrid_UEFI_GPT_.2B_BIOS_GPT.2FMBR_boot" target="_blank" rel="external nofollow noopener noreferrer">混合UEFI GPT + BIOS GPT / MBR引导</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GRUB#.22No_suitable_mode_found.22_error" target="_blank" rel="external nofollow noopener noreferrer">“找不到合适的模式”错误</a></li>
<li><a href="https://askubuntu.com/questions/258991/where-is-the-memtest-option-on-the-ubuntu-64-bit-live-cd" target="_blank" rel="external nofollow noopener noreferrer">Ubuntu 64位实时CD上的memtest选项在哪里？</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Remastering_the_Install_ISO" target="_blank" rel="external nofollow noopener noreferrer">重新掌握安装ISO</a></li>
<li><a href="https://help.ubuntu.com/community/UEFIBooting#Install_GRUB2_in_.28U.29EFI_systems" target="_blank" rel="external nofollow noopener noreferrer">在（U）EFI系统中安装GRUB2</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/grub/html_node/Embedded-configuration.html" target="_blank" rel="external nofollow noopener noreferrer">6.4将配置文件嵌入GRUB</a></li>
<li><a href="https://askubuntu.com/questions/643938/standalone-grub2-efi-installation-grub-cfg-placement" target="_blank" rel="external nofollow noopener noreferrer">独立的Grub2 EFI安装-grub.cfg放置？</a></li>
<li><a href="https://unix.stackexchange.com/questions/253657/actual-usage-of-grub-mkimage-config" target="_blank" rel="external nofollow noopener noreferrer">“ grub-mkimage –config =”的实际用法</a></li>
<li><a href="http://lukeluo.blogspot.com/2013/06/grub-how-to-4-memdisk-and-loopback.html" target="_blank" rel="external nofollow noopener noreferrer">GRUB2使用方法（4）：内存磁盘和回送设备</a></li>
<li><a href="https://unix.stackexchange.com/questions/267765/how-does-the-grub-efi-loader-find-the-correct-grub-cfg-and-boot-directory" target="_blank" rel="external nofollow noopener noreferrer">grub efi加载程序如何找到正确的grub.cfg和引导目录？</a></li>
<li><a href="https://www.linux.com/learn/how-rescue-non-booting-grub-2-Linux" target="_blank" rel="external nofollow noopener noreferrer">如何在Linux上救援非引导式GRUB 2</a></li>
<li><a href="https://help.ubuntu.com/community/BootFromUSB#Using_a_CD" target="_blank" rel="external nofollow noopener noreferrer">使用光盘</a></li>
<li><a href="https://superuser.com/questions/746553/boot-linux-with-extlinux-from-efi-gpt" target="_blank" rel="external nofollow noopener noreferrer">从EFI和GPT用extlinux引导Linux</a></li>
<li><a href="https://blog.fpmurphy.com/2010/06/grub2-modules.html" target="_blank" rel="external nofollow noopener noreferrer">GRUB2模块</a></li>
<li><a href="https://github.com/coreos/grub/blob/master/util/grub-install.c" target="_blank" rel="external nofollow noopener noreferrer">grub-install.c</a></li>
<li><a href="https://help.ubuntu.com/community/Grub2/Troubleshooting" target="_blank" rel="external nofollow noopener noreferrer">Grub2 /问题排查</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Secure_Boot#Set_up_PreLoader" target="_blank" rel="external nofollow noopener noreferrer">设置预加载器</a></li>
<li><a href="https://wiki.archlinux.org/index.php/REFInd#Using_PreLoader" target="_blank" rel="external nofollow noopener noreferrer">使用PreLoader</a></li>
<li><a href="https://github.com/Mic92/archlive/blob/master/build.sh#L138" target="_blank" rel="external nofollow noopener noreferrer">build.sh</a></li>
<li><a href="https://wiki.archlinux.org/index.php/archiso#Installing_packages_from_multilib" target="_blank" rel="external nofollow noopener noreferrer">阿奇索</a></li>
<li><a href="https://www.syslinux.org/wiki/index.php?title=Menu#The_simple_menu_system" target="_blank" rel="external nofollow noopener noreferrer">简单的菜单系统</a></li>
<li><a href="https://www.syslinux.org/wiki/index.php?title=Isohybrid#UEFI" target="_blank" rel="external nofollow noopener noreferrer">UEFI</a></li>
<li><a href="https://www.linuxquestions.org/questions/linux-general-1/make-uefi-bootable-live-cd-926021/" target="_blank" rel="external nofollow noopener noreferrer">制作UEFI可启动实时CD</a></li>
<li><a href="https://unix.stackexchange.com/questions/285193/what-is-the-proper-way-to-use-isolinux-with-uefi" target="_blank" rel="external nofollow noopener noreferrer">将ISOLINUX与UEFI一起使用的正确方法是什么？</a></li>
<li><a href="https://wiki.debian.org/UEFI#Booting_from_removable_media" target="_blank" rel="external nofollow noopener noreferrer">从可移动媒体引导</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GRUB#UEFI_systems" target="_blank" rel="external nofollow noopener noreferrer">UEFI系统</a></li>
<li><a href="https://www.rodsbooks.com/efi-bootloaders/installation.html" target="_blank" rel="external nofollow noopener noreferrer">管理Linux的EFI引导加载程序：EFI引导加载程序安装</a></li>
<li><a href="https://wiki.archlinux.org/index.php/syslinux#Boot_prompt" target="_blank" rel="external nofollow noopener noreferrer">例子</a></li>
<li><a href="https://forum.osdev.org/viewtopic.php?t=22169&p=178135" target="_blank" rel="external nofollow noopener noreferrer">Grub2 El-Torito CD</a></li>
<li><a href="https://forum.osdev.org/viewtopic.php?f=1&t=23766" target="_blank" rel="external nofollow noopener noreferrer">使用GRUB2创建ISO映像</a></li>
<li><a href="https://wiki.debian.org/DebianLive/MultibootISO" target="_blank" rel="external nofollow noopener noreferrer">DebianLive MultibootISO</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/grub/html_node/Images.html" target="_blank" rel="external nofollow noopener noreferrer">11个GRUB图像文件</a></li>
<li><a href="https://www.linuxquestions.org/questions/linux-software-2/stage2_eltorito-missing-884944/" target="_blank" rel="external nofollow noopener noreferrer">stage2_eltorito遗失</a></li>
<li><a href="https://www.gnu.org/software/grub/manual/legacy/Making-a-GRUB-bootable-CD_002dROM.html" target="_blank" rel="external nofollow noopener noreferrer">3.4制作GRUB可引导CD-ROM</a></li>
<li><a href="https://unix.stackexchange.com/questions/283994/why-is-grub2-ignoring-kernel-options-when-boot-from-el-torito-on-cd" target="_blank" rel="external nofollow noopener noreferrer">从CD上的el torito引导时，grub2为什么会忽略内核选项？</a></li>
<li><a href="https://communities.vmware.com/message/2228281#2228281" target="_blank" rel="external nofollow noopener noreferrer">从CD / DVD引导UEFI无效</a></li>
<li><a href="https://communities.vmware.com/message/2583742#2583742" target="_blank" rel="external nofollow noopener noreferrer">升级到VMWS Player 12后的UEFI问题</a></li>
<li><a href="https://github.com/linuxkit/linuxkit/blob/master/tools/mkimage-iso-efi/make-efi" target="_blank" rel="external nofollow noopener noreferrer">品牌</a></li>
<li><a href="https://unix.stackexchange.com/questions/382817/uefi-bios-bootable-live-debian-stretch-amd64-with-persistence" target="_blank" rel="external nofollow noopener noreferrer">UEFI + BIOS可启动实时Debian Stretch amd64持久化</a></li>
<li><a href="https://www.syslinux.org/archives/2015-April/023381.html" target="_blank" rel="external nofollow noopener noreferrer">[syslinux] Isohybrid Wiki页面和UEFI</a></li>
</ul>
<h2 id="原文地址："><a href="#原文地址：" class="headerlink" title="原文地址："></a>原文地址：</h2><ul>
<li><a href="https://willhaley.com/blog/custom-debian-live-environment/" target="_blank" rel="external nofollow noopener noreferrer">https://willhaley.com/blog/custom-debian-live-environment/</a></li>
</ul>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>kali-linux-mate-top10-nonroot.sh</title>
    <url>/archives/fa25fe82.html</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># Kali Linux ISO recipe for : Top 10 Mate non-root</span><br><span class="line">#########################################################################################</span><br><span class="line"># Desktop 	: Mate 1.8</span><br><span class="line"># Metapackages	: kali-linux-top10</span><br><span class="line"># ISO size 	: 1.36 GB </span><br><span class="line"># Special notes	: Non root user installation enabled through preseed.cfg. </span><br><span class="line">#		: This script is not meant to run unattended.</span><br><span class="line"># Look and Feel	: Custom wallpaper and terminal configs through post install hooks.</span><br><span class="line"># Background	: http:&#x2F;&#x2F;www.offensive-security.com&#x2F;kali-linux&#x2F;kali-linux-recipes&#x2F;</span><br><span class="line">#########################################################################################</span><br><span class="line"></span><br><span class="line"># Update and install dependencies</span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install git live-build cdebootstrap devscripts -y</span><br><span class="line"></span><br><span class="line"># Clone the default Kali live-build config.</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;build-scripts&#x2F;live-build-config.git</span><br><span class="line"></span><br><span class="line"># Get the source package of the debian installer. </span><br><span class="line"># The default Kali preseed file lives here, and will need changing for non-root user support.</span><br><span class="line"></span><br><span class="line">apt-get source debian-installer</span><br><span class="line"></span><br><span class="line"># Let&#39;s begin our customisations:</span><br><span class="line"></span><br><span class="line">cd live-build-config</span><br><span class="line"></span><br><span class="line"># The user doesn&#39;t need the kali-linux-full metapackage, we overwrite with our own basic packages.</span><br><span class="line"># This includes the debian-installer and the kali-linux-top10 metapackage (commented out for brevity of build, uncomment if needed).</span><br><span class="line"></span><br><span class="line">cat &gt; config&#x2F;package-lists&#x2F;kali.list.chroot &lt;&lt; EOF</span><br><span class="line">kali-root-login</span><br><span class="line">kali-defaults</span><br><span class="line">kali-menu</span><br><span class="line">kali-debtags</span><br><span class="line">kali-archive-keyring</span><br><span class="line">debian-installer-launcher</span><br><span class="line">alsa-tools</span><br><span class="line">locales-all</span><br><span class="line">xorg</span><br><span class="line">#kali-linux-top10</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># Add the new Mate 1.8 as a Windows Manager.</span><br><span class="line"># We instruct live-build to add external MATE repositories and add relevant keys.</span><br><span class="line"># Taken from http:&#x2F;&#x2F;wiki.mate-desktop.org&#x2F;download</span><br><span class="line"></span><br><span class="line">mkdir -p config&#x2F;archives&#x2F;</span><br><span class="line">echo &quot;deb http:&#x2F;&#x2F;repo.mate-desktop.org&#x2F;archive&#x2F;1.8&#x2F;debian&#x2F; wheezy main&quot; &gt; config&#x2F;archives&#x2F;mate.list.chroot</span><br><span class="line">wget http:&#x2F;&#x2F;mirror1.mate-desktop.org&#x2F;debian&#x2F;mate-archive-keyring.gpg -O config&#x2F;archives&#x2F;mate.key.chroot</span><br><span class="line"></span><br><span class="line"># We download a wallpaper and overlay it.</span><br><span class="line"></span><br><span class="line">mkdir -p config&#x2F;includes.chroot&#x2F;usr&#x2F;share&#x2F;wallpapers&#x2F;kali&#x2F;contents&#x2F;images</span><br><span class="line">wget http:&#x2F;&#x2F;1hdwallpapers.com&#x2F;wallpapers&#x2F;kali_linux.jpg</span><br><span class="line">mv kali_linux.jpg config&#x2F;includes.chroot&#x2F;usr&#x2F;share&#x2F;wallpapers&#x2F;kali&#x2F;contents&#x2F;images</span><br><span class="line"></span><br><span class="line"># We add a chroot hook to add the MATE archive-keyring, and install MATE. </span><br><span class="line"># We even configure some of the terminal settings and wallpaper.</span><br><span class="line"></span><br><span class="line">cat &gt; config&#x2F;hooks&#x2F;mate.chroot&lt;&lt; EOF</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">wget http:&#x2F;&#x2F;mirror1.mate-desktop.org&#x2F;debian&#x2F;mate-archive-keyring.gpg</span><br><span class="line">apt-key add mate-archive-keyring.gpg</span><br><span class="line">rm -rf mate-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line">apt-get --yes --force-yes --quiet --allow-unauthenticated install mate-core mate-desktop-environment-extra</span><br><span class="line"></span><br><span class="line">dbus-launch --exit-with-session gsettings set org.mate.background picture-filename &#39;&#x2F;usr&#x2F;share&#x2F;wallpapers&#x2F;kali&#x2F;contents&#x2F;images&#x2F;kali_linux.jpg&#39;</span><br><span class="line">dbus-launch --exit-with-session gsettings set org.mate.interface gtk-theme &#39;BlackMATE&#39;</span><br><span class="line">dbus-launch --exit-with-session gsettings set org.mate.interface icon-theme &#39;mate&#39;</span><br><span class="line">dbus-launch --exit-with-session gsettings set org.mate.terminal.profile:&#x2F;org&#x2F;mate&#x2F;terminal&#x2F;profiles&#x2F;default&#x2F; background-darkness 0.86</span><br><span class="line">dbus-launch --exit-with-session gsettings set org.mate.terminal.profile:&#x2F;org&#x2F;mate&#x2F;terminal&#x2F;profiles&#x2F;default&#x2F; background-type &#39;transparent&#39;</span><br><span class="line">dbus-launch --exit-with-session gsettings set org.mate.terminal.profile:&#x2F;org&#x2F;mate&#x2F;terminal&#x2F;profiles&#x2F;default&#x2F; background-color &#39;#FFFFFFFFDDDD&#39;</span><br><span class="line">dbus-launch --exit-with-session gsettings set org.mate.terminal.profile:&#x2F;org&#x2F;mate&#x2F;terminal&#x2F;profiles&#x2F;default&#x2F; scrollback-unlimited true</span><br><span class="line"></span><br><span class="line">cp -rf &#x2F;root&#x2F;.config &#x2F;etc&#x2F;skel&#x2F;</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># We modify the default Kali preseed which disables normal user creation. </span><br><span class="line"># We copied this from the debian installer package we initially downloaded.</span><br><span class="line"></span><br><span class="line">mkdir -p config&#x2F;debian-installer</span><br><span class="line">cp ..&#x2F;debian-installer-*&#x2F;build&#x2F;preseed.cfg config&#x2F;debian-installer&#x2F;</span><br><span class="line">sed -i &#39;s&#x2F;make-user boolean false&#x2F;make-user boolean true&#x2F;&#39; config&#x2F;debian-installer&#x2F;preseed.cfg</span><br><span class="line">echo &quot;d-i passwd&#x2F;root-login boolean false&quot; &gt;&gt; config&#x2F;debian-installer&#x2F;preseed.cfg</span><br><span class="line"></span><br><span class="line"># Go ahead and run the build!</span><br><span class="line">lb build</span><br></pre></td></tr></table></figure>

<p><strong>脚本地址：</strong></p>
<ul>
<li><a href="https://gitlab.com/kalilinux/recipes/live-build-config-examples/" target="_blank" rel="external nofollow noopener noreferrer">https://gitlab.com/kalilinux/recipes/live-build-config-examples/</a></li>
</ul>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>kali-linux-evil-access-point.sh</title>
    <url>/archives/da66f02.html</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># Kali Linux ISO recipe for : Evil Access Point</span><br><span class="line">#########################################################################################</span><br><span class="line"># Desktop 	: None</span><br><span class="line"># Metapackages	: None</span><br><span class="line"># ISO size 	: 1.36 GB </span><br><span class="line"># Special notes	: Boots into an Access Point.</span><br><span class="line">#		: ppp0 and wlan0 hardcoded.</span><br><span class="line"># Background	: http:&#x2F;&#x2F;www.offensive-security.com&#x2F;kali-linux&#x2F;kali-linux-recipes&#x2F;</span><br><span class="line">#########################################################################################</span><br><span class="line"></span><br><span class="line"># Update and install dependencies</span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install git live-build cdebootstrap -y</span><br><span class="line"></span><br><span class="line"># Clone the default Kali live-build config.</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;gitlab.com&#x2F;kalilinux&#x2F;build-scripts&#x2F;live-build-config.git</span><br><span class="line"></span><br><span class="line"># Let&#39;s begin our customisations:</span><br><span class="line"></span><br><span class="line">cd live-build-config</span><br><span class="line"></span><br><span class="line"># The user doesn&#39;t need the kali-linux-full metapackage, we overwrite with our own basic packages.</span><br><span class="line">cat &lt;&lt;EOF &gt; config&#x2F;package-lists&#x2F;kali.list.chroot</span><br><span class="line"># kali meta-package depends on everything we want</span><br><span class="line">kali-root-login</span><br><span class="line">kali-defaults</span><br><span class="line">kali-debtags</span><br><span class="line">kali-archive-keyring</span><br><span class="line">debian-installer-launcher</span><br><span class="line">cryptsetup</span><br><span class="line">locales-all</span><br><span class="line">hostapd</span><br><span class="line">dnsmasq</span><br><span class="line">nginx</span><br><span class="line">wireless-tools</span><br><span class="line">iw</span><br><span class="line">aircrack-ng</span><br><span class="line">openssl</span><br><span class="line">sslsplit</span><br><span class="line">responder</span><br><span class="line">openssh-server</span><br><span class="line">openvpn</span><br><span class="line">nginx</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir -p config&#x2F;includes.chroot&#x2F;etc&#x2F;hostapd</span><br><span class="line">mkdir -p config&#x2F;includes.chroot&#x2F;etc&#x2F;init.d</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; config&#x2F;includes.chroot&#x2F;etc&#x2F;hostapd&#x2F;hostapd.conf</span><br><span class="line">interface&#x3D;wlan0</span><br><span class="line">driver&#x3D;nl80211</span><br><span class="line">ssid&#x3D;KaliFreeWifi</span><br><span class="line">channel&#x3D;1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; config&#x2F;includes.chroot&#x2F;etc&#x2F;dnsmasq.conf</span><br><span class="line">log-facility&#x3D;&#x2F;var&#x2F;log&#x2F;dnsmasq.log</span><br><span class="line">#address&#x3D;&#x2F;#&#x2F;10.0.0.1</span><br><span class="line">#address&#x3D;&#x2F;google.com&#x2F;10.0.0.1</span><br><span class="line">interface&#x3D;wlan0</span><br><span class="line">dhcp-range&#x3D;10.0.0.10,10.0.0.250,12h</span><br><span class="line">dhcp-option&#x3D;3,10.0.0.1</span><br><span class="line">dhcp-option&#x3D;6,10.0.0.1</span><br><span class="line">#no-resolv</span><br><span class="line">log-queries</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt; config&#x2F;includes.chroot&#x2F;etc&#x2F;iptables.rules </span><br><span class="line"># Generated by iptables-save v1.4.14 on Mon Jun  9 08:46:32 2014</span><br><span class="line">*nat</span><br><span class="line">:PREROUTING ACCEPT [0:0]</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">:POSTROUTING ACCEPT [0:0]</span><br><span class="line">-A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">COMMIT</span><br><span class="line"># Completed on Mon Jun  9 08:46:32 2014</span><br><span class="line"># Generated by iptables-save v1.4.14 on Mon Jun  9 08:46:32 2014</span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A FORWARD -i wlan0 -o eth0 -j ACCEPT</span><br><span class="line">COMMIT</span><br><span class="line"># Completed on Mon Jun  9 08:46:32 2014</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; config&#x2F;includes.chroot&#x2F;etc&#x2F;rc.local</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">ifconfig wlan0 up</span><br><span class="line">ifconfig wlan0 10.0.0.1&#x2F;24</span><br><span class="line">iptables-restore &lt; &#x2F;etc&#x2F;iptables.rules</span><br><span class="line">echo &#39;1&#39; &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;config&#x2F;hooks&#x2F;enableservices.chroot</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">update-rc.d nginx enable</span><br><span class="line">update-rc.d hostapd enable</span><br><span class="line">update-rc.d dnsmasq enable</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;config&#x2F;hooks&#x2F;configurehostapd.chroot</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">sed -i &#39;s#^DAEMON_CONF&#x3D;.*#DAEMON_CONF&#x3D;&#x2F;etc&#x2F;hostapd&#x2F;hostapd.conf#&#39; &#x2F;etc&#x2F;init.d&#x2F;hostapd</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod 755 config&#x2F;hooks&#x2F;enableservices.chroot</span><br><span class="line">chmod 755 config&#x2F;hooks&#x2F;configurehostapd.chroot</span><br><span class="line">chmod 755 config&#x2F;includes.chroot&#x2F;etc&#x2F;rc.local </span><br><span class="line"></span><br><span class="line"># Go ahead and run the build!</span><br><span class="line">lb build</span><br></pre></td></tr></table></figure>



<p><strong>脚本地址：</strong></p>
<ul>
<li><a href="https://gitlab.com/kalilinux/recipes/live-build-config-examples/" target="_blank" rel="external nofollow noopener noreferrer">https://gitlab.com/kalilinux/recipes/live-build-config-examples/</a></li>
</ul>
]]></content>
      <categories>
        <category>live</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 GRUB 从USB启动 Windows 10 安装程序</title>
    <url>/archives/2c4a335.html</url>
    <content><![CDATA[<p>您可以使用这些说明创建可以运行Windows 10安装程序的GRUB的可启动USB驱动器。我使用Arch Linux来准备我的USB设备，但是任何像Debian或Ubuntu这样的Linux版本都可以运行。</p>
<p>我假设你有一个适当大的USB磁盘<code>/dev/sdz</code>，你可以完全擦除这个过程。</p>
<p>如果已安装，请卸载USB驱动器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umount &#x2F;dev&#x2F;sdz*</span><br></pre></td></tr></table></figure>
<p>擦除USB设备上的所有分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;dev&#x2F;sdz bs&#x3D;512 count&#x3D;1 conv&#x3D;notrunc</span><br></pre></td></tr></table></figure>
<p>使用<code>sfdisk</code>创建两个分区。第一个分区是<code>500MiB</code>bootable（<code>*</code>）Linux分区，第二个分区是一个占用剩余空间的<code>ntfs</code>分区（<code>7</code>）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sfdisk &#x2F;dev&#x2F;sdz &lt;&lt; EOF</span><br><span class="line">,500M,,*</span><br><span class="line">,,7,;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>格式化第一个分区，<code>/dev/sdz1</code>如<code>ext4</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext4 &#x2F;dev&#x2F;sdz1</span><br></pre></td></tr></table></figure>
<p>格式化第二个分区，<code>/dev/sdz2</code>如<code>ntfs</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ntfs &#x2F;dev&#x2F;sdz2</span><br></pre></td></tr></table></figure>
<p>安装在<code>/dev/sdz1</code>当地的某处。就我而言，我正在使用<code>/mnt/part1</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount &#x2F;dev&#x2F;sdz1 &#x2F;mnt&#x2F;part1</span><br></pre></td></tr></table></figure>
<p>安装在<code>/dev/sdz2</code>当地的某处。就我而言，我正在使用<code>/mnt/part2</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount &#x2F;dev&#x2F;sdz2 &#x2F;mnt&#x2F;part2</span><br></pre></td></tr></table></figure>
<p>装载Windows 10安装ISO。在我的情况下，我正在安装它<code>/mnt/win10</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount -t udf ~&#x2F;win10.iso &#x2F;mnt&#x2F;win10</span><br></pre></td></tr></table></figure>
<p>将grub安装到<code>ext4</code>分区（<code>sdz1</code>）。此命令提供了受Arch Linux文章启发的最小GRUB安装。</p>
<p>我承认我并不完全知道每个模块在这里做了什么，但我选择了一个似乎需要我配置的最小列表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo grub-install \</span><br><span class="line">    --no-floppy \</span><br><span class="line">    --target&#x3D;i386-pc \</span><br><span class="line">    --recheck \</span><br><span class="line">    --debug \</span><br><span class="line">    --locales&#x3D;&quot;en@quot&quot; \</span><br><span class="line">    --themes&#x3D;&quot;&quot; \</span><br><span class="line">    --root-directory&#x3D;&#x2F;mnt&#x2F;part1 \</span><br><span class="line">    --boot-directory&#x3D;&#x2F;mnt&#x2F;part1&#x2F;grub-boot \</span><br><span class="line">    --install-modules&#x3D;&quot;ntldr normal search ntfs&quot; \</span><br><span class="line">    &#x2F;dev&#x2F;sdz</span><br></pre></td></tr></table></figure>
<p><code>grub.cfg</code>在<code>/mnt/part1/grub-boot/grub/grub.cfg</code>。创建GRUB配置文件。<code>grub.cfg</code>基于一些 文章，这是一个相对较小的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># USB Device:&#x2F;grub-boot&#x2F;grub&#x2F;grub.cfg</span><br><span class="line"></span><br><span class="line">set timeout&#x3D;10 set default&#x3D;0</span><br><span class="line"></span><br><span class="line">menuentry &quot;Windows 10 Installer&quot; &#123;</span><br><span class="line">    insmod ntfs</span><br><span class="line">    search --set&#x3D;root --file &#x2F;bootmgr</span><br><span class="line">    ntldr &#x2F;bootmgr</span><br><span class="line">    boot</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将Windows 10安装文件复制到<code>ntfs</code>分区（<code>sdz2</code>）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rsync -vr &#x2F;mnt&#x2F;win10&#x2F; &#x2F;mnt&#x2F;part2&#x2F;</span><br></pre></td></tr></table></figure>
<p>将文件同步到设备。根据设备的速度，这可能需要一些时间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sync</span><br></pre></td></tr></table></figure>
<p>清理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umount &#x2F;dev&#x2F;sdz*</span><br></pre></td></tr></table></figure>
<p>启动！你应该全力以赴。</p>
<p>如果从USB设备启动到Windows 10时遇到错误，说明：</p>
<blockquote>
<p>缺少计算机所需的媒体驱动程序。这可以是DVD，USB或硬盘驱动器。如果您有带驱动程序的CD，DVD或USB闪存驱动器，请立即插入。</p>
</blockquote>
<blockquote>
<p>注意：如果Windows的安装介质位于DVD驱动器或USB驱动器上，则可以在此步骤中安全地将其删除。</p>
</blockquote>
<p>那么您可能希望查看解决该问题的Microsoft社区文章。您可能还想验证所有文件是否正确复制<code>rsync</code>或重新复制文件以防万一有损坏。您可能还需要验证源<code>Windows 10 iso</code>文件的完整性。最后，我发现USB 2.0驱动程序对我来说比USB 3.0更可靠，并且当我在我的一台机器上遇到它时解决了这个错误。</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>grub</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualBox：把IMG镜像文件转换为VDI文件</title>
    <url>/archives/3454c8ba.html</url>
    <content><![CDATA[<p>假如你下载了一个IMG格式的系统镜像,然后想使用VirtualBox启动,这时你苦逼的发现VirtualBox不支持IMG格式。为了能在VirtualBox上启动这个IMG镜像,我们可以把它转换为VDI格式的镜像,洋文全称 Virtual Disk Image,这是VirtualBox默认使用的硬盘镜像格式。</p>
<blockquote>
<p>IMG镜像文件和ISO文件类似,QEMU虚拟机把IMG做为默认磁盘映像格式。</p>
</blockquote>
<h2 id="使用VirtualBox把IMG文件转换为VDI文件"><a href="#使用VirtualBox把IMG文件转换为VDI文件" class="headerlink" title="使用VirtualBox把IMG文件转换为VDI文件"></a>使用VirtualBox把IMG文件转换为VDI文件</h2><p>首先确保已安装VirtualBox。</p>
<p>需要使用的命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VBoxManage -v</span><br><span class="line"></span><br><span class="line">5.0.28r111378</span><br></pre></td></tr></table></figure>
<p>语法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VBoxManage convertdd input.img output.vdi</span><br></pre></td></tr></table></figure>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VBoxManage convertdd eos3.0.base.img eos.vdi</span><br></pre></td></tr></table></figure>
<p>根据转换文件大小,你可能需要等待几分钟。</p>
<p>新建虚拟机时只需选择’使用已有的虚拟硬盘文件。</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>04Windows10系统下怎么关闭端口</title>
    <url>/archives/3b26d97f.html</url>
    <content><![CDATA[<h1 id="Windows10系统下怎么关闭端口"><a href="#Windows10系统下怎么关闭端口" class="headerlink" title="Windows10系统下怎么关闭端口"></a>Windows10系统下怎么关闭端口</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul>
<li>在windows系统中，对于网络上的应用，为了方便起见会预留一些端口，便于使用，这也在一定程度上造成了不安全的因素。本文以135端口为例。</li>
<li>在Windows系统CMD命令行下执行<code>netstat -noa</code>命令可以查看当前系统开放端口。</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li>从桌面右下角的网络图标上，打开”网络和共享中心”</li>
<li>打开Windows防火墙 -&gt; 高级设置 </li>
<li>创建入站规则，类型选择端口 -&gt; 在特定本地端口后输入135 -&gt; 我们的需求是不允许连接到这个端口，所以选择阻止连接 -&gt; 对于规则的应用范围全选即可 -&gt; 关闭端口的设置就完成了，填写名称和描述</li>
<li>快捷键”Win+R”输入<code>cmd</code>，运行<code>netstat -noa</code>命令查看系统开放的端口</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Windows10 禁止 Google Chrome 浏览器自动更新</title>
    <url>/archives/7f5a70e7.html</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>快捷键 <strong>Win + R</strong> ，打开运行对话框。输入 <code>services.msc</code>， 进到服务管理窗口。<br>找到 Google 的两个更新的服务：</p>
<ul>
<li>Google更新服务(gupdate)</li>
<li>Google更新服务(gupdatem)<br>分别选择两个更新服务，将其启动类型设置为“禁用”。</li>
</ul>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>快捷键 <strong>Win+R</strong>，打开运行对话框。输入 <code>taskschd.msc</code>，打开”任务计划程序”。<br>展开左侧功能树到”任务计划程序库”，<br>分两次选择右侧两个 GoogleUpdate 的任务计划，右键菜单选择”禁用”。</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>04Windows7系统下怎么关闭端口</title>
    <url>/archives/7c62409d.html</url>
    <content><![CDATA[<h1 id="Windows7系统下怎么关闭端口"><a href="#Windows7系统下怎么关闭端口" class="headerlink" title="Windows7系统下怎么关闭端口"></a>Windows7系统下怎么关闭端口</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul>
<li>大家普遍使用Windows10的情况下，使用Windows7也是没办法的事。</li>
<li>为了自己的Windows7系统更安全些，我使用了nmap描述了一下自己的主机，发现有很多端口被开启，本文是解决Windows7系统下关闭端口的内容。</li>
</ul>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><ol>
<li>快捷键Win+R打开运行，输入<code>gpedit.msc</code>，打开本地组策略编辑器</li>
<li>点击计算机配置 -&gt; Windows设置 -&gt; 安全设置 -&gt; IP安全策略，在本地计算机上</li>
<li>创建IP安全策略 -&gt; 下一步 -&gt; 名称我的配置为”关闭端口” -&gt; 不要勾选”激活默认响应规则” </li>
<li>选中关闭端口 -&gt; 右击选择属性 -&gt; 在规则选项卡中 -&gt; 去掉使用添加向导前的勾 -&gt; 点击添加 -&gt; 名称我的配置为关闭端口，去掉使用添加向导前的勾</li>
<li>IP筛选器 属性”选择“地址”选项卡 -&gt; “源地址”选择“任何” -&gt; “目标地址”选择“我的IP地址” -&gt; 点击协议选项卡 -&gt; 选择协议类型选择TCP/UDP -&gt; 从任意端口，到此端口135 -&gt; 点击确定</li>
<li>然后在IP筛选器列表中创建筛选器列表，然后按确定。</li>
<li>在执行nmap扫描后，发现端口关闭成功。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Windows PE 与 Kali Linux 双系统U盘</title>
    <url>/archives/2bf2b15c.html</url>
    <content><![CDATA[<h2 id="准备的工具"><a href="#准备的工具" class="headerlink" title="准备的工具"></a>准备的工具</h2><ul>
<li><p>一个大于8GB的U盘</p>
</li>
<li><p>Windows PE和Kali Linux的两个iso镜像</p>
<ul>
<li>最好重命名镜像，在制作完成后启动项中将会显示镜像名</li>
</ul>
</li>
<li><p>YUMI刻入工具</p>
<ul>
<li>官网地址：<a href="https://www.pendrivelinux.com/yumi-multiboot-usb-creator/" target="_blank" rel="external nofollow noopener noreferrer">https://www.pendrivelinux.com/yumi-multiboot-usb-creator/</a> 注意：<code>需下载UEFI版</code></li>
<li>若无法访问，可使用本地下载</li>
<li>本地链接: <a href="https://nico.cc/softs/YUMI-UEFI-0.0.0.6.exe" target="_blank" rel="external nofollow noopener noreferrer">https://nico.cc/softs/YUMI-UEFI-0.0.0.6.exe</a></li>
</ul>
</li>
</ul>
<h2 id="开始刻入"><a href="#开始刻入" class="headerlink" title="开始刻入"></a>开始刻入</h2><p><strong>首先将Windows PE刻录进U盘</strong></p>
<ul>
<li>将U盘格式化为 <code>Fat32</code>或<code>NTFS</code> ,启动YUMI-UEFI软件</li>
<li>说明:<code>Fat32</code>兼容性最好，最大缺点就是单个文件不能超过4GB，如果U盘需要存放超过4GB文件，将U盘格式化为<code>NTFS</code>；若格式化为<code>exFAT</code>，会导致无法正常启动系统。</li>
<li>选择需要刻录的U盘</li>
<li>在Step 2 的下拉栏中选择Windows 10 Installer</li>
<li>在Step 3 中导入待刻录的Windows PE镜像</li>
<li>选择完成后，点击 <code>Create</code> ，开始创建。</li>
<li>然后慢慢等吧</li>
<li>刻录成功的话大概是这个样子</li>
<li>再点击 <code>Next</code> 会出现是否继续添加镜像刻录</li>
<li>点击是，添加Linux系统</li>
</ul>
<p><strong>再将Kali Linux刻录进U盘</strong></p>
<ul>
<li>又回到第一步，选择U盘</li>
<li>在Step 2 的下拉栏中选择 Debian Live. <code>注意：如果你的Linux系统是CentOS或者Ubuntu，请选择对应的 Distribution</code></li>
<li>在Step 3 中导入待刻录的Linux镜像</li>
<li>Step 4 中 询问 <code>“设置用于存储更改的固定文件大小(可选)”</code><ul>
<li>如果你的U盘比较大，可以给4GB(能给的最大也就4GB)</li>
<li>我的只有8GB，所以就不给了</li>
</ul>
</li>
<li>选择完成后，点击 <code>Create</code> ，开始创建。</li>
<li>再继续慢慢等吧</li>
<li>刻入成功大概又是这个样子</li>
</ul>
<h2 id="删除某个系统"><a href="#删除某个系统" class="headerlink" title="删除某个系统"></a>删除某个系统</h2><ul>
<li>YUMI 这个软件也提供了删除的选项</li>
<li>再选择好U盘后， 右边会出现两个选项，选择 <code>“View or Remove Installed Distros”</code>–查看或删除已安装的版本</li>
<li>在 Step 2 的下拉框中会出现U盘中所有已安装的系统，选择需要删除的即可删除</li>
</ul>
<h2 id="Kali-Linux系统更换为root用户"><a href="#Kali-Linux系统更换为root用户" class="headerlink" title="Kali Linux系统更换为root用户"></a>Kali Linux系统更换为root用户</h2><ul>
<li>默认的Kali Linux默认用户并不是root用户，并不具备所有权限，需要更换为root用户，默认root用户密码为<code>toor</code>。 </li>
</ul>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>PE</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows在当前目录下打开CMD</title>
    <url>/archives/1146a87d.html</url>
    <content><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol>
<li>在当前路径地址栏中直接输入‘cmd’，然后回车。</li>
<li>在当前路径下，按住‘shift’键同时点击鼠标右键，点击“在此处打开Powershell”。<blockquote>
<p>powershell可以说是cmd的升级版，在原本的cmd基础之上作了一些修改，增加了一些命令而已。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>CMD</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware Workstation 设置 efi 启动方法</title>
    <url>/archives/26de0019.html</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>看到很多人写了修改虚拟机目录下vmx文件的方法，但是这个方法改完了efi启动后我不知道怎么才能改回bios启动。</p>
<p>其实选中<strong>虚拟机</strong>-<strong>编辑虚拟机设置</strong>-<strong>选项</strong>-<strong>高级</strong>，右边的<strong>设置</strong>，有个选项叫通过<code>efi</code>而非<code>bios</code>引导。这个勾了就efi，不勾就是bios，还蛮方便的。</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>vmware</tag>
      </tags>
  </entry>
  <entry>
    <title>04SecureCRT中文乱码解决方法</title>
    <url>/archives/aa72d6dd.html</url>
    <content><![CDATA[<h1 id="SecureCRT中文乱码解决方法"><a href="#SecureCRT中文乱码解决方法" class="headerlink" title="SecureCRT中文乱码解决方法"></a>SecureCRT中文乱码解决方法</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>刚安装SercureCRT后会发现，连接服务器后发现输出中文乱码，本文是解决中文乱码方法。（我是在SercureCRT7.8版本上实测）</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li>先选中当前的Session</li>
<li>点击主菜单的Options -&gt; 选择Session Option… </li>
<li>在弹出框中选择Appearance -&gt; 把默认的编码格式”Default”修改为”UTF-8” -&gt; 点击OK完成操作</li>
<li>刷新后，问题解决</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>04SecureCRT连接时出现key exchange failed.解决方法</title>
    <url>/archives/1ed0f37f.html</url>
    <content><![CDATA[<h1 id="SecureCRT连接时出现key-exchange-failed-怎么解决"><a href="#SecureCRT连接时出现key-exchange-failed-怎么解决" class="headerlink" title="SecureCRT连接时出现key exchange failed.怎么解决"></a>SecureCRT连接时出现key exchange failed.怎么解决</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>尝试用SecureCRT工具SSH登录服务器时发现的，本文是我对该问题的解决整理。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li>打开SecureCRT软件，在菜单栏选择Options选项 -&gt; 点击Global Options -&gt; 弹出全局配置窗口中点击Edit default Settings -&gt; 打开Session Options窗口，点击SSH2，在Key exchange下全部勾选</li>
<li>配置完成后，再次使用连接服务器正常登录</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>04SecureCRT7.8破解安装</title>
    <url>/archives/efee1306.html</url>
    <content><![CDATA[<h1 id="SecureCRT8-7破解安装"><a href="#SecureCRT8-7破解安装" class="headerlink" title="SecureCRT8.7破解安装"></a>SecureCRT8.7破解安装</h1><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="下载SecureCRT8-7和注册机"><a href="#下载SecureCRT8-7和注册机" class="headerlink" title="下载SecureCRT8.7和注册机"></a>下载SecureCRT8.7和注册机</h3><p><a href="https://pan.baidu.com/s/1pFSHC5Sg9bLorzoUq8-_TQ" target="_blank" rel="external nofollow noopener noreferrer">百度网盘</a> 提取码：nphl</p>
<h3 id="开始破解"><a href="#开始破解" class="headerlink" title="开始破解"></a>开始破解</h3><ol>
<li>以管理员身份远行注册机（杀毒软件可能会报毒）</li>
<li>注册机Product选择 CRT + FX Bundle v8.x</li>
<li>点击P 按钮选择你的SecureCRT安装路径</li>
<li>点击G 生成注册码</li>
<li>打开SecureCRT软件，选择Enter License Data</li>
<li>不要输入任何字符，点击下一步</li>
<li>选择Enter License Manually</li>
<li>按照对应项输入注册机中的注册码即可</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Office 密码恢复工具 Advanced Office Password Recovery 6.22 中文版</title>
    <url>/archives/f8f99d55.html</url>
    <content><![CDATA[<p>是一款针对 MS Office 系列的密码破解工具，Advanced Office Password Recovery 可破解 95—2010 版的各类 Office 文档。</p>
<p>可以恢复Microsoft Word、Excel、Access、Outlook、Project、Money、PowerPoint、Visio、Publisher 和 OneNote 等的密码。</p>
<h2 id="本文适用于"><a href="#本文适用于" class="headerlink" title="本文适用于"></a>本文适用于</h2><ol>
<li>你的office文档带有密码，而你忘记密码了</li>
<li>不要将此软件应于非法活动</li>
</ol>
<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><ul>
<li>Windows10</li>
<li>AOPR_6.22</li>
</ul>
<h2 id="网盘下载"><a href="#网盘下载" class="headerlink" title="网盘下载"></a>网盘下载</h2><p>链接：<a href="https://pan.baidu.com/s/13VChxyIxqyxHZiyZLdntgw" target="_blank" rel="external nofollow noopener noreferrer">https://pan.baidu.com/s/13VChxyIxqyxHZiyZLdntgw</a><br>提取码：opkd</p>
<h2 id="软件激活"><a href="#软件激活" class="headerlink" title="软件激活"></a>软件激活</h2><p>断开网络激活<br>序列号：AOPR4-153-KIOH7-774Q0-LPGUK-16KZZ</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>安装过程为英文界面，安装后可以选择程序界面语言为中文</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>密码恢复</tag>
      </tags>
  </entry>
  <entry>
    <title>重新编译 Kali Linux 内核</title>
    <url>/archives/a9289db8.html</url>
    <content><![CDATA[<p>Kali Linux的可定制性一直扩展到Linux内核。<br>根据您的要求，您可能希望添加库存Kali Linux内核中未包含的驱动程序，补丁或内核功能。以下指南将介绍如何快速修改和重新编译Kali Linux内核以满足您的需求。请注意，默认情况下，Kali Linux内核中已经存在全局无线注入补丁。</p>
<h2 id="安装构建依赖项"><a href="#安装构建依赖项" class="headerlink" title="安装构建依赖项"></a>安装构建依赖项</h2><p>首先安装所有用于重新编译内核的构建依赖项。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install build-essential libncurses5-dev fakeroot unxz</span><br></pre></td></tr></table></figure>

<h2 id="下载-Kali-Linux-内核源代码"><a href="#下载-Kali-Linux-内核源代码" class="headerlink" title="下载 Kali Linux 内核源代码"></a>下载 Kali Linux 内核源代码</h2><p>本节的其余部分重点介绍4.9版本的Linux内核，但是示例当然可以根据所需的特定内核版本进行调整。我们假设已安装linux-source-4.9二进制软件包。请注意，我们安装了包含上游源代码的二进制软件包，但没有检索名为linux的Kali源代码软件包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install linux-source-4.9</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  bc libreadline7</span><br><span class="line">Suggested packages:</span><br><span class="line">  libncurses-dev | ncurses-dev libqt4-dev</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  bc libreadline7 linux-source-4.9</span><br><span class="line">0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Need to get 95.4 MB of archives.</span><br><span class="line">After this operation, 95.8 MB of additional disk space will be used.</span><br><span class="line">Do you want to continue? [Y&#x2F;n] y</span><br><span class="line">...SNIP...</span><br><span class="line">ls &#x2F;usr&#x2F;src</span><br><span class="line">linux-config-4.9  linux-patch-4.9-rt.patch.xz  linux-source-4.9.tar.xz</span><br></pre></td></tr></table></figure>

<p>请注意，该软件包包含<em>/usr/src/linux-source-4.9.tar.xz</em>，这是内核源代码的压缩存档。您必须将这些文件解压缩到新目录中（而不是直接在/ usr / src /下，因为不需要特殊权限来编译Linux内核）。相反，<em>〜/ kernel /</em>更合适。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~&#x2F;kernel; cd ~&#x2F;kernel</span><br><span class="line">tar -xaf &#x2F;usr&#x2F;src&#x2F;linux-source-4.9.tar.xz</span><br></pre></td></tr></table></figure>

<h2 id="配置内核"><a href="#配置内核" class="headerlink" title="配置内核"></a>配置内核</h2><p>重新编译内核的最新版本（可能带有附加补丁程序）时，配置很可能会尽可能与Kali提出的配置保持接近。在这种情况下，将<em>/ boot / config-version</em>文件（版本是当前使用的内核的版本，可以通过<strong>uname -r</strong>命令找到）复制到<em>本地</em>，而不是从头开始重新配置所有内容<em>。</em>包含内核源代码的目录中的<em>配置</em>文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;boot&#x2F;config-4.9.0-kali1-amd64 ~&#x2F;kernel&#x2F;linux-source-4.9&#x2F;.config</span><br></pre></td></tr></table></figure>

<p>如果需要进行更改，或者决定从头开始重新配置所有内容，则必须花时间配置内核。这可以通过调用<strong>make menuconfig</strong>命令来完成。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>

<p>使用<strong>menuconfig</strong>设置内核构建的详细信息不在本指南的范围之内。<a href="https://www.linux.org/threads/the-linux-kernel-configuring-the-kernel-part-1.8745/" target="_blank" rel="external nofollow noopener noreferrer">有关</a>在Linux.org <a href="https://www.linux.org/threads/the-linux-kernel-configuring-the-kernel-part-1.8745/" target="_blank" rel="external nofollow noopener noreferrer">上配置内核构建</a>的<a href="https://www.linux.org/threads/the-linux-kernel-configuring-the-kernel-part-1.8745/" target="_blank" rel="external nofollow noopener noreferrer">详细教程</a>。</p>
<h2 id="建立内核"><a href="#建立内核" class="headerlink" title="建立内核"></a>建立内核</h2><p>准备好内核配置后，一个简单的<strong>make deb-pkg</strong>将生成多达5个Debian软件包：包含内核映像和相关模块的<em>linux-image- *</em>版本<strong>* <em>linux-headers- **version</em></strong>，其中包含构建所需的头文件。外部模块<em>linux-firmware-image- *</em>version<strong><em>，其中包含一些驱动程序所需的固件文件（当从Debian或Kali提供的内核源进行构建时，可能会缺少此软件包），</em>linux-image- **version</strong> -dbg<em>，其中包含内核映像及其模块和</em>linux-libc-dev*的调试符号，其中包含与某些用户空间库（例如GNU glibc）相关的标头。Linux内核映像是一个大型构建，需要花费一些时间才能完成。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make clean</span><br><span class="line">make deb-pkg LOCALVERSION&#x3D;-custom KDEB_PKGVERSION&#x3D;$(make kernelversion)-1</span><br><span class="line">...SNIP...</span><br><span class="line">ls ..&#x2F;*.deb</span><br><span class="line">..&#x2F;linux-headers-4.9.0-kali1-custom_4.9.2-1_amd64.deb</span><br><span class="line">..&#x2F;linux-image-4.9.0-kali1-custom_4.9.2-1_amd64.deb</span><br><span class="line">..&#x2F;linux-image-4.9.0-kali1-custom-dbg_4.9.2-1_amd64.deb</span><br><span class="line">..&#x2F;linux-libc-dev_4.9.2-1_amd64.deb</span><br></pre></td></tr></table></figure>

<h2 id="安装修改后的内核"><a href="#安装修改后的内核" class="headerlink" title="安装修改后的内核"></a>安装修改后的内核</h2><p>构建成功完成后，您可以继续安装新的自定义内核并重新引导系统。请注意，特定的内核版本号会有所不同-在我们的示例中，是在Kali 2016.2系统上完成的，为4.9.2。根据要构建的当前内核版本，您将需要相应地调整命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -i ..&#x2F;linux-image-4.9.0-kali1-custom_4.9.2-1_amd64.deb</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>系统重新引导后，新内核应已运行。如果出现问题并且内核无法成功引导，您仍然可以使用GrUB菜单从原始的原始Kali内核引导并解决问题。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>kernl</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Debian10 系统上使用脚本安装 Docker-CE</title>
    <url>/archives/c0d5ccf9.html</url>
    <content><![CDATA[<p>Docker 在 get.docker.com和test.docker.com上提供了安装脚本，用于快速安装Docker-CE。</p>
<p>get.docker.com上的脚本是最新版本Docker-CE。</p>
<p>test.docker.com上的脚本是最新测试版本Docker-CE。 </p>
<p>在本地运行它们之前，请务必检查从internet下载的脚本。</p>
<p>如果不是在新主机上首次安装 Docker-CE，为确保安装不会出错，可以执行卸载旧版本操作。</p>
<h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><p>Docker 的旧版本被称为<code>docker</code>，<code>docker.io</code>或<code>docker-engine</code>。如果已安装，请卸载它们：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure>

<p>如果想要以非root用户身份使用Docker，可以用以下方式将用户添加到 docker 组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker your-user</span><br></pre></td></tr></table></figure>
<p>注销重新登录用户才能生效！</p>
<h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><blockquote>
<p>它会自动在<code>DEB</code>基于分发的版本上启动。</p>
<p>在 <code>RPM</code>基于发行版的系统上，您需要使用相应的<code>systemctl</code>或<code>service</code>命令手动启动它 。如消息所示，默认情况下，非root用户不能运行Docker命令。</p>
</blockquote>
<h2 id="升级Docker-CE"><a href="#升级Docker-CE" class="headerlink" title="升级Docker-CE"></a>升级Docker-CE</h2><ol>
<li><p>卸载docker-ce软件包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge docker-ce</span><br></pre></td></tr></table></figure>
</li>
<li><p>主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker</span><br></pre></td></tr></table></figure>

<p>您必须手动删除所有已编辑的配置文件。</p>
</li>
<li><p>然后再重新安装Docker-CE。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Debian10 系统上使用存储库安装 Docker-CE</title>
    <url>/archives/75aa58a.html</url>
    <content><![CDATA[<p>在新主机上首次安装 Docker-CE 之前，需要设置 Docker存储库。之后，您可以从存储库安装和更新 Docker 。如果不是在新主机上首次安装 Docker-CE，为确保安装不会出错，可以执行卸载旧版本操作。</p>
<h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><p>Docker 的旧版本被称为<code>docker</code>，<code>docker.io</code>或<code>docker-engine</code>。如果已安装，请卸载它们：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li><p>更新 apt 包索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装软件包以允许 apt 通过HTTPS使用存储库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">	apt-transport-https \</span><br><span class="line">	ca-certificates \</span><br><span class="line">	curl \</span><br><span class="line">	gnupg2 \</span><br><span class="line">	software-properties-common</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加Docker的官方GPG密钥：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian&#x2F;gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用下行命令来设置稳定的存储库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;deb https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian buster stable&quot; &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<p>buster是Debian10的发行版的名称。lsb_release -cs 命令可以返回Debian发行版的名称。</p>
</li>
<li><p>安装Docker-CE：</p>
<p>更新 apt 包索引并安装最新版本的 Docker-CE。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证是否正解安装Docker-CE:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<p>此命令下载测试图像并在容器中运行它。容器运行时，它会打印参考消息并退出。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Debian10 系统上从软件包安装 Docker-CE</title>
    <url>/archives/f9fb805e.html</url>
    <content><![CDATA[<p>这种方法安装Docker-CE，每次升级Docker时，都需要下载一个新的软件包 重复安装过程。</p>
<p>如果不是在新主机上首次安装 Docker-CE，为确保安装不会出错，可以执行卸载旧版本操作。</p>
<h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><p>Docker 的旧版本被称为<code>docker</code>，<code>docker.io</code>或<code>docker-engine</code>。如果已安装，请卸载它们：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li><p>转到 <a href="https://download.docker.com/linux/debian/dists/，选择您Debina10的版本，下载要安装Docker-CE的版本文件。" target="_blank" rel="external nofollow noopener noreferrer">https://download.docker.com/linux/debian/dists/，选择您Debina10的版本，下载要安装Docker-CE的版本文件。</a></p>
</li>
<li><p>安装Docker-CE，将下面的路径更改为下载Docker软件包的存储路径。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i &#x2F;path&#x2F;to&#x2F;package.deb</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证是否正解安装Docker-CE。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<p>此命令下载测试图像并在容器中运行它。容器运行时，它会打印参考消息并退出。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>linux：使用dd命令制作USB启动盘</title>
    <url>/archives/87ebfc6b.html</url>
    <content><![CDATA[<p>一般情况下，我会使用U盘安装Linux和其他操作系统。</p>
<p>使用U盘安装系统需要把U盘做成启动盘。</p>
<p>启动U盘的制作工具有很多：</p>
<ul>
<li>Unetbootin</li>
<li>Win32diskimager</li>
<li>Linux live usb</li>
<li>USB image writer</li>
<li>WinUSB</li>
<li>USB startup creator</li>
</ul>
<p>如果你使用的是Linux，最简单快捷的方法是使用dd命令。步骤是：首先下载要安装操作系统的镜像，然后使用dd命令创建可启动U盘。</p>
<p>dd命令的使用看这里：Linux dd命令使用示例</p>
<p>制作启动U盘步骤</p>
<p><strong>1）格式化U盘。为了格式化我们首先需要 umount U盘：</strong></p>
<p>查看设备：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure>

<p>/dev/sdb是我的U盘设备，umount：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umount &#x2F;dev&#x2F;sdb*</span><br></pre></td></tr></table></figure>

<p>格式化U盘：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkfs.vfat &#x2F;dev&#x2F;sdb –I</span><br></pre></td></tr></table></figure>

<p>上面命令把U盘格式化为FAT格式。</p>
<p><strong>2）制作启动U盘。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dd if&#x3D;~&#x2F;home&#x2F;bibi&#x2F;Ubuntu_15_10_64.iso of&#x3D;&#x2F;dev&#x2F;sdb</span><br></pre></td></tr></table></figure>

<p>上面命令把ISO镜像写入到U盘，等待几分钟。</p>
<p>补：mac os x也有dd命令，下面介绍一下怎么在mac os x系统上制作启动U盘。</p>
<p>查看存储设备的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diskutil list</span><br></pre></td></tr></table></figure>

<p>使用dd命令拷贝ISO镜像：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dd if&#x3D;kali-linux-light-2016.1-amd64.iso of&#x3D;&#x2F;dev&#x2F;disk3</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>dd</tag>
      </tags>
  </entry>
  <entry>
    <title>实现man命令中文手册查看</title>
    <url>/archives/d571e6ad.html</url>
    <content><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="下载源代码："><a href="#下载源代码：" class="headerlink" title="下载源代码："></a>下载源代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wget https:&#x2F;&#x2F;src.fedoraproject.org&#x2F;repo&#x2F;pkgs&#x2F;man-pages-zh-CN&#x2F;v1.5.2.tar.gz&#x2F;1bbdc4f32272df0b95146518b27bf4be&#x2F;v1.5.2.tar.gz</span><br><span class="line"># wget  https:&#x2F;&#x2F;src.fedoraproject.org&#x2F;repo&#x2F;pkgs&#x2F;man-pages-zh-CN&#x2F;manpages-zh-1.5.1.tar.gz&#x2F;13275fd039de8788b15151c896150bc4&#x2F;manpages-zh-1.5.1.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="解压并安装："><a href="#解压并安装：" class="headerlink" title="解压并安装："></a>解压并安装：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar xf manpages-zh-1.5.1.tar.gz</span><br><span class="line"># cd manpages-zh-1.5.1&#x2F;</span><br><span class="line"># .&#x2F;configure --disable-zhtw --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;zhman</span><br><span class="line"># make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h3 id="为了不抵消-man-我们新建别名-cman-命令作为中文查询"><a href="#为了不抵消-man-我们新建别名-cman-命令作为中文查询" class="headerlink" title="为了不抵消 man ,我们新建别名  cman 命令作为中文查询"></a>为了不抵消 <strong>man</strong> ,我们新建别名  <strong>cman</strong> 命令作为中文查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd ~</span><br><span class="line"># echo &quot;alias cman&#x3D;&#39;man -M &#x2F;usr&#x2F;local&#x2F;zhman&#x2F;share&#x2F;man&#x2F;zh_CN&#39; &quot; &gt;&gt;.bash_profile</span><br><span class="line"># source .bash_profile</span><br></pre></td></tr></table></figure>

<h3 id="测试，使用中文-cman-查询命令"><a href="#测试，使用中文-cman-查询命令" class="headerlink" title="测试，使用中文 cman 查询命令"></a>测试，使用中文 <strong>cman</strong> 查询命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cman find</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>man</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Debian系统上启用对Intel 802.11n设备的支持</title>
    <url>/archives/22c37512.html</url>
    <content><![CDATA[<h2 id="该iwlwifi-Linux内核驱动程序支持多种英特尔无线LAN适配器："><a href="#该iwlwifi-Linux内核驱动程序支持多种英特尔无线LAN适配器：" class="headerlink" title="该iwlwifi Linux内核驱动程序支持多种英特尔无线LAN适配器："></a>该iwlwifi Linux内核驱动程序支持多种英特尔无线LAN适配器：</h2><ul>
<li>英特尔无线WiFi 5100AGN，5300AGN和5350AGN</li>
<li>英特尔无线WiFi 5150AGN</li>
<li>英特尔WiFi Link 1000BGN</li>
<li>英特尔6000系列WiFi适配器（6200AGN和6300AGN）</li>
<li>英特尔无线WiFi Link 6250AGN适配器</li>
<li>英特尔6005系列WiFi适配器</li>
<li>英特尔6030系列WiFi适配器</li>
<li>英特尔无线WiFi Link 6150BGN 2适配器</li>
<li>英特尔100系列WiFi适配器（100BGN和130BGN）</li>
<li>英特尔2000系列WiFi适配器</li>
<li>英特尔7260 WiFi适配器</li>
<li>英特尔7265 WiFi适配器</li>
<li>英特尔3160 WiFi适配器</li>
<li>英特尔3165 WiFi适配器</li>
</ul>
<h2 id="安装无线驱动"><a href="#安装无线驱动" class="headerlink" title="安装无线驱动"></a>安装无线驱动</h2><h3 id="Debian-9-“Stretch”"><a href="#Debian-9-“Stretch”" class="headerlink" title="Debian 9 “Stretch”"></a>Debian 9 “Stretch”</h3><ol>
<li>在<code>/etc/apt/sources.list</code>中添加“非自由”组件，例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Debian 9“Stretch”</span><br><span class="line">deb http:&#x2F;&#x2F;httpredir.debian.org&#x2F;debian&#x2F; stretch main contrib non-free</span><br></pre></td></tr></table></figure></li>
<li>更新可用软件包列表并安装firmware-iwlwifi软件包：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">＃apt-get update &amp;&amp; apt-get install firmware-iwlwifi</span><br></pre></td></tr></table></figure></li>
<li>当iwlwifi模块自动加载支持的设备时，重新插入此模块以访问已安装的固件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#modprobe -r iwlwifi; modprobe iwlwifi</span><br></pre></td></tr></table></figure></li>
<li>根据需要配置无线接口。</li>
</ol>
<h3 id="Debian-8“Jessie”"><a href="#Debian-8“Jessie”" class="headerlink" title="Debian 8“Jessie”"></a>Debian 8“Jessie”</h3><ol>
<li>在<code>/etc/apt/sources.list</code>中添加“非自由”组件，例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Debian 8“Jessie”</span><br><span class="line">deb http:&#x2F;&#x2F;httpredir.debian.org&#x2F;debian&#x2F; jessie main contrib non-free</span><br></pre></td></tr></table></figure></li>
<li>更新可用软件包列表并安装firmware-iwlwifi软件包：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">＃apt-get update &amp;&amp; apt-get install firmware-iwlwifi</span><br></pre></td></tr></table></figure></li>
<li>当iwlwifi模块自动加载支持的设备时，重新插入此模块以访问已安装的固件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#modprobe -r iwlwifi; modprobe iwlwifi</span><br></pre></td></tr></table></figure></li>
<li>根据需要配置无线接口。</li>
</ol>
<h3 id="Debian-7“Wheezy”"><a href="#Debian-7“Wheezy”" class="headerlink" title="Debian 7“Wheezy”"></a>Debian 7“Wheezy”</h3><ol>
<li>在<code>/etc/apt/sources.list</code>中添加“非自由”组件，例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Debian 7“Wheezy”</span><br><span class="line">deb http:&#x2F;&#x2F;httpredir.debian.org&#x2F;debian&#x2F; wheezy main contrib non-free</span><br></pre></td></tr></table></figure></li>
<li>更新可用软件包列表并安装firmware-iwlwifi软件包：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">＃apt-get update &amp;&amp; apt-get install firmware-iwlwifi</span><br></pre></td></tr></table></figure></li>
<li>当iwlwifi模块自动加载支持的设备时，重新插入此模块以访问已安装的固件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#modprobe -r iwlwifi; modprobe iwlwifi</span><br></pre></td></tr></table></figure></li>
<li>根据需要配置无线接口。</li>
</ol>
<h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><h3 id="使用蓝牙时WiFi速度慢"><a href="#使用蓝牙时WiFi速度慢" class="headerlink" title="使用蓝牙时WiFi速度慢"></a>使用蓝牙时WiFi速度慢</h3><p>像6235这样的设备在同一张卡中包含蓝牙设备，这可能导致无线电冲突。较新的设备（7200及以上）尝试智能地解决它们，但不是旧设备的情况。<br>如果使用蓝牙时WiFi速度很慢，请尝试将以下内容添加到<code>/etc/modprobe.d/iwlwifi.conf</code>并重新启动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">options iwlwifi bt_coex_active &#x3D; 0 swcrypto &#x3D; 1 11n_disable &#x3D; 8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>802.1n</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Kali Linux 2019.2 上安装 VirtualBox 6.0 虚拟机</title>
    <url>/archives/719b2708.html</url>
    <content><![CDATA[<p>Virtualbox 是一种开源的跨平台虚拟化软件。能够安装多个客户端操作系统，每个客户端系统皆可独立打开、暂停与停止。</p>
<a id="more"></a>

<p>在本文中介绍如何在 Debian 9 上安装最新的 VirtualBox 6.0。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>Kali Linux 2019.2 </li>
<li>VirtualBox 6.0  </li>
</ul>
<h2 id="安装VirtualBox"><a href="#安装VirtualBox" class="headerlink" title="安装VirtualBox"></a>安装VirtualBox</h2><p>在 Kali Linux 上安装 VirtualBox 是一个相对简单的过程，只需几分钟：</p>
<h3 id="首先，配置软件源列表"><a href="#首先，配置软件源列表" class="headerlink" title="首先，配置软件源列表"></a>首先，配置软件源列表</h3><p>使用 <code>Ctrl+Alt+T</code> 键盘快捷键或单击终端图标打开终端。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;security.debian.org&#x2F; stretch&#x2F;updates main</span><br><span class="line">deb-src http:&#x2F;&#x2F;security.debian.org&#x2F; stretch&#x2F;updates main</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian stretch main</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian stretch main</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;ftp.cn.debian.org&#x2F;debian stretch main</span><br><span class="line">deb-src http:&#x2F;&#x2F;ftp.cn.debian.org&#x2F;debian stretch main</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="下载-VirtualBox-虚拟化软件"><a href="#下载-VirtualBox-虚拟化软件" class="headerlink" title="下载 VirtualBox 虚拟化软件"></a>下载 VirtualBox 虚拟化软件</h3><p>运行以下 <code>wget</code> 命令下载最新 VirtualBox 虚拟化软件 <code>.deb</code> 包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;download.virtualbox.org&#x2F;virtualbox&#x2F;6.0.8&#x2F;virtualbox-6.0_6.0.8-130520~Debian~stretch_amd64.deb</span><br></pre></td></tr></table></figure>

<h3 id="安装-VirtualBox-虚拟化软件"><a href="#安装-VirtualBox-虚拟化软件" class="headerlink" title="安装 VirtualBox 虚拟化软件"></a>安装 VirtualBox 虚拟化软件</h3><p>下载完成后，键入以下内容安装 VirtualBox 虚拟化软件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt install libcurl3</span><br><span class="line">apt-get install .&#x2F;virtualbox-6.0_6.0.8-130520~Debian~stretch_amd64.deb</span><br></pre></td></tr></table></figure>

<h3 id="安装-VirtualBox-扩展包"><a href="#安装-VirtualBox-扩展包" class="headerlink" title="安装 VirtualBox 扩展包"></a>安装 VirtualBox 扩展包</h3><p>VirtualBox Extension Pack为客户机提供了一些有用的功能，如虚拟USB 2.0和3.0设备，支持RDP，图像加密等。<br>运行以下 wget 命令下载 扩展包文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;download.virtualbox.org&#x2F;virtualbox&#x2F;6.0.0&#x2F;Oracle_VM_VirtualBox_Extension_Pack-6.0.0.vbox-extpack</span><br></pre></td></tr></table></figure>
<p>下载完成后，键入以下内容安装扩展包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VBoxManage extpack install Oracle_VM_VirtualBox_Extension_Pack-6.0.0.vbox-extpack</span><br></pre></td></tr></table></figure>
<p>将看到 Oracle 许可证，并提示接受他们的条款和条件，键入 <code>y</code> 并 <code>Enter</code>  。</p>
<h3 id="启动-VirtualBox-虚拟化软件"><a href="#启动-VirtualBox-虚拟化软件" class="headerlink" title="启动 VirtualBox 虚拟化软件"></a>启动 VirtualBox 虚拟化软件</h3><p>现在您已经在 Kali Linux 系统上安装了 VirtualBox，你可以通过输入 <code>virtualbox</code> 或点击 VirtualBox 图标启动它。</p>
<h3 id="更新-VirtualBox-虚拟化软件"><a href="#更新-VirtualBox-虚拟化软件" class="headerlink" title="更新 VirtualBox 虚拟化软件"></a>更新 VirtualBox 虚拟化软件</h3><p>使用 <code>echo</code> 命令将官方 virtualbox 存储库添加到系统中，可以使用 <code>cat</code> 命令验证文件内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;deb [arch&#x3D;amd64] http:&#x2F;&#x2F;download.virtualbox.org&#x2F;virtualbox&#x2F;debian stretch contrib&quot; &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;virtualbox.list</span><br></pre></td></tr></table></figure>
<p>验证文件内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;virtualbox.list</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb [arch&#x3D;amd64] http:&#x2F;&#x2F;download.virtualbox.org&#x2F;virtualbox&#x2F;debian stretch contrib</span><br></pre></td></tr></table></figure>

<p>添加gpg密钥。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -q https:&#x2F;&#x2F;download.virtualbox.org&#x2F;virtualbox&#x2F;debian&#x2F;oracle_vbox.asc -O- | apt-key add -</span><br><span class="line">wget -q https:&#x2F;&#x2F;download.virtualbox.org&#x2F;virtualbox&#x2F;debian&#x2F;oracle_vbox_2016.asc -O- | apt-key add -</span><br></pre></td></tr></table></figure>

<p>发布新版本后，可以通过在终端中运行以下命令来更新 VirtualBox 软件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>virtualbox</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Kali Linux 2019.2 安装 Google Chrome 浏览器</title>
    <url>/archives/43353b59.html</url>
    <content><![CDATA[<p>Google Chrome 浏览器是世界上最爱欢迎的网络浏览器，快速、直观和安全的浏览器。</p>
<p>Chrome 不是一个开源浏览器，它不包含在 Kali Linux 存储库中。</p>
<p>Google Chrome 浏览器基于 Chromium，这是一个开源浏览器，可在 Debian 存储库中找到。</p>
<p>在本文中，我们将介绍如何在  Kali Linux 2019.2 上安装 Google Chrome 浏览器。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>kali linux 2019.2</li>
<li>Google Chrome</li>
</ul>
<h2 id="安装Google-Chrome"><a href="#安装Google-Chrome" class="headerlink" title="安装Google-Chrome"></a>安装Google-Chrome</h2><p>完成以下步骤实现在 Kali Linux 系统上安装 Google Chrome 浏览器：</p>
<h3 id="下载-Google-Chrome-浏览器"><a href="#下载-Google-Chrome-浏览器" class="headerlink" title="下载 Google Chrome 浏览器"></a>下载 Google Chrome 浏览器</h3><p>使用 <code>Ctrl+Alt+T</code> 键盘快捷键或单击终端图标打开终端。<br>运行以下 <code>wget</code> 命令下载最新 Google Chrome 浏览器 <code>.deb</code> 包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;direct&#x2F;google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>

<h3 id="安装-Google-Chrome-浏览器"><a href="#安装-Google-Chrome-浏览器" class="headerlink" title="安装 Google Chrome 浏览器"></a>安装 Google Chrome 浏览器</h3><p>下载完成后，键入以下内容安装 Google Chrome 浏览器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install gdebi -y</span><br><span class="line">gdebi google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>

<h3 id="启动-Google-Chrome-浏览器"><a href="#启动-Google-Chrome-浏览器" class="headerlink" title="启动 Google Chrome 浏览器"></a>启动 Google Chrome 浏览器</h3><p>现在您已经在 Kali Linux 系统上安装了 Google Chrome，可以通过键入 <code>google-chrome --no-sandbox</code> 启动它。</p>
<h3 id="更新-Google-Chrome-浏览器"><a href="#更新-Google-Chrome-浏览器" class="headerlink" title="更新 Google Chrome 浏览器"></a>更新 Google Chrome 浏览器</h3><p>在安装过程中，官方 google 存储库将添加到系统中，可以使用 <code>cat</code> 命令验证文件内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;google-chrome.list</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb [arch&#x3D;amd64] http:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;chrome&#x2F;deb&#x2F; stable main</span><br></pre></td></tr></table></figure>

<p>发布新版本后，可以通过在终端中运行以下命令来更新 Google Chrome 软件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Debian 9上安装Google-Chrome浏览器</title>
    <url>/archives/1dfe69d7.html</url>
    <content><![CDATA[<p>Google Chrome 浏览器是世界上最爱欢迎的网络浏览器。快速、直观和安全的浏览器。</p>
<p>Chrome 不是一个开源浏览器，它不包含在 Debian 存储库中。</p>
<p>Google Chrome 浏览器基于 Chromium，这是一个开源浏览器，可在 Debian 存储库中找到。</p>
<p>在本文章中，我将介绍如何在 Debian 9 上安装 Google Chrome 浏览器。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>Debian 9</li>
<li>Google Chrome</li>
<li>具有sudo权限的用户</li>
</ul>
<h2 id="安装Google-Chrome"><a href="#安装Google-Chrome" class="headerlink" title="安装Google Chrome"></a>安装Google Chrome</h2><p>完成以下步骤实现在 Debian 系统上安装 Google Chrome 浏览器：</p>
<h3 id="下载-Google-Chrome-浏览器"><a href="#下载-Google-Chrome-浏览器" class="headerlink" title="下载 Google Chrome 浏览器"></a>下载 Google Chrome 浏览器</h3><p>使用 <code>Ctrl+Alt+T</code> 键盘快捷键或单击终端图标打开终端。<br>运行以下 <code>wget</code> 命令下载最新 Google Chrome 浏览器 <code>.deb</code> 包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;direct&#x2F;google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>

<h3 id="安装-Google-Chrome-浏览器"><a href="#安装-Google-Chrome-浏览器" class="headerlink" title="安装 Google Chrome 浏览器"></a>安装 Google Chrome 浏览器</h3><p>下载完成后，键入以下内容安装 Google Chrome 浏览器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install .&#x2F;google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>
<p>系统将要求您输入用户密码，上面的命令将安装 Chrome 和 所有依赖项。</p>
<h3 id="启动-Google-Chrome-浏览器"><a href="#启动-Google-Chrome-浏览器" class="headerlink" title="启动 Google Chrome 浏览器"></a>启动 Google Chrome 浏览器</h3><p>现在您已经在 Debian 系统上安装了 Google Chrome，你可以通过输入 <code>google-chrome</code> 或点击 Google Chrome 图标 启动它。</p>
<h3 id="更新-Google-Chrome-浏览器"><a href="#更新-Google-Chrome-浏览器" class="headerlink" title="更新 Google Chrome 浏览器"></a>更新 Google Chrome 浏览器</h3><p>在安装过程中，官方 google 存储库将添加到系统中，可以使用 <code>cat</code> 命令验证文件内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;google-chrome.list</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb [arch&#x3D;amd64] http:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;chrome&#x2F;deb&#x2F; stable main</span><br></pre></td></tr></table></figure>

<p>发布新版本后，可以通过在终端中运行以下命令来更新 Google Chrome 软件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>linux：如何更改文件的拥有者及用户组(chown和chgrp)</title>
    <url>/archives/1b5f6a82.html</url>
    <content><![CDATA[<p>在Linux中，创建一个文件时，该文件的拥有者都是创建该文件的用户。该文件用户可以修改该文件的拥有者及用户组，当然root用户可以修改任何文件的拥有者及用户组。在Linux中，对于文件的权限（rwx），分为三部分，一部分是该文件的拥有者所拥有的权限，一部分是该文件所在用户组的用户所拥有的权限，另一部分是其他用户所拥有的权限。</p>
<a id="more"></a>

<p>在shell中，要修改文件当前的用户必须具有管理员root的权限。可以通过su命令切换到root用户，也可以通过sudo获得root的权限。</p>
<h2 id="chown-命令更改文件拥有者"><a href="#chown-命令更改文件拥有者" class="headerlink" title="chown 命令更改文件拥有者"></a>chown 命令更改文件拥有者</h2><p>在 shell 中，可以使用chown命令来改变文件所有者。chown命令是change owner（改变拥有者）的缩写。需要要注意的是，用户必须是已经存在系统中的，也就是只能改变为在 <code>/etc/passwd</code> 这个文件中有记录的用户名称才可以。</p>
<p>chown命令的用途很多，还可以顺便直接修改用户组的名称。此外，如果要连目录下的所有子目录或文件同时更改文件拥有者的话，直接加上<code>-R</code>的参数即可。</p>
<p><strong>语法：</strong></p>
<ul>
<li><code>chown -R 账号名称 文件或目录</code></li>
<li><code>chown -R 账号名称:用户组名称 文件或目录</code></li>
<li><code>-R</code> : 进行递归( recursive )的持续更改，即连同子目录下的所有文件、目录都更新成为这个用户和用户组。常常用在更改某一目录的情况。</li>
</ul>
<blockquote>
<p><code>ls -l</code> 查看文件或目录所属用户和组</p>
</blockquote>
<h2 id="chgrp-命令更改文件所属用户组"><a href="#chgrp-命令更改文件所属用户组" class="headerlink" title="chgrp 命令更改文件所属用户组"></a>chgrp 命令更改文件所属用户组</h2><p>在shell中，可以使用chgrp命令来改变文件所属用户组，该命令就是change group（改变用户组）的缩写。需要注意的是要改变成为的用户组名称，必须在 /etc/group里存在，否则就会显示错误。<br><strong>语法：</strong></p>
<ul>
<li><code>chgrp -R 用户组名称 dirname/filename</code></li>
<li><code>-R</code> : 进行递归( recursive )的持续更改，即连同子目录下的所有文件、目录都更新成为这个用户和用户组。常常用在更改某一目录的情况。</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>chown</tag>
      </tags>
  </entry>
  <entry>
    <title>清除 Debian/Ubuntu 系统 DNS 缓存</title>
    <url>/archives/e9ef5079.html</url>
    <content><![CDATA[<p>当你访问一个网站时，需要对网站域名进行解析，也就是获得域名指向的IP。Linux系统有DNS Cache机制，缓存了域名对应的IP，这样再下次访问同一个网站时，就不再需要执行域名查询，提高访问速度。</p>
<a id="more"></a>

<p>有些网络问题可以通过清理系统DNS缓存来解决，如本地缓存的域名对应错误的IP。</p>
<h2 id="Debian-Ubuntu清理DNS缓存"><a href="#Debian-Ubuntu清理DNS缓存" class="headerlink" title="Debian/Ubuntu清理DNS缓存"></a>Debian/Ubuntu清理DNS缓存</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;dns-clean</span><br></pre></td></tr></table></figure>

<p>dns-clean其实就是bash脚本，如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PATH&#x3D;&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin</span><br><span class="line"> </span><br><span class="line">test -f &#x2F;usr&#x2F;sbin&#x2F;pppconfig || exit 0</span><br><span class="line">mkdir &#x2F;var&#x2F;run&#x2F;pppconfig &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 || true</span><br><span class="line">test -f &#x2F;etc&#x2F;ppp&#x2F;ip-down.d&#x2F;0dns-down || exit 0</span><br><span class="line"> </span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">  start)</span><br><span class="line">        &#x2F;bin&#x2F;echo -n &quot;Running 0dns-down to make sure resolv.conf is ok...&quot;</span><br><span class="line">        &#x2F;etc&#x2F;ppp&#x2F;ip-down.d&#x2F;0dns-down &quot;0dns-clean&quot; &amp;&amp; &#x2F;bin&#x2F;echo &quot;done.&quot;</span><br><span class="line">        ;;</span><br><span class="line">  stop|restart|force-reload)</span><br><span class="line">        ;;</span><br><span class="line">  *)</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br><span class="line"> </span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>dns</tag>
      </tags>
  </entry>
  <entry>
    <title>03密码正确，SSH无法登陆问题解决</title>
    <url>/archives/cc34d33e.html</url>
    <content><![CDATA[<h1 id="密码正确，SSH无法登陆"><a href="#密码正确，SSH无法登陆" class="headerlink" title="密码正确，SSH无法登陆"></a>密码正确，SSH无法登陆</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul>
<li>使用SecureCRT登陆，提示“Password authentication failed”</li>
<li>使用linux下ssh登陆，提示“Permission denied,please try again.” </li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li>编辑配置文件<code>/etc/ssh/sshd_config</code>，把#PasswordAuthentication no 修改为 PasswordAuthentication yes</li>
<li>重启服务<code>/etc/init.d/ssh restart</code></li>
<li>查看SSH状态<code>/etc/init.d/ssh status</code></li>
<li>重新登陆成功</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Kali Linux 系统下解决root权限无法运行Google Chrome</title>
    <url>/archives/b691c55.html</url>
    <content><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol>
<li><p>修改<code>/usr/bin/google-chrome-stable</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec -a &quot;$0&quot; &quot;$HERE&#x2F;chrome&quot; &quot;$@&quot; --no-sandbox --user-data-dir</span><br></pre></td></tr></table></figure>
</li>
<li><p>Chromium 也而是类似，修改<code>/usr/share/applications/chromium.desktop</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exec&#x3D;&#x2F;usr&#x2F;bin&#x2F;chromium %U --no-sandbox --user-data-dir</span><br></pre></td></tr></table></figure>
</li>
<li><p>在系统语言为英文的情况下，设置启动 chrome 时显示为中文<br>修改<code>/usr/bin/google-chrome-stable</code>文件，添加一行即可:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LANGUAGE&#x3D;zh-cn &#x2F;opt&#x2F;google&#x2F;chrome&#x2F;google-chrome %U</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>linux：解决终端命令行无法自动补全</title>
    <url>/archives/7d602a45.html</url>
    <content><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>1、安装命令补全</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install bash-completion</span><br></pre></td></tr></table></figure>

<p><strong>2、在 <code>/etc/profile</code> 添加</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ -f &#x2F;etc&#x2F;bash_completion ]; then</span><br><span class="line">. &#x2F;etc&#x2F;bash_completion</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p><strong>3、刷新 <code>/etc/profile</code> 配置文件，使其生效</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>更改SSH服务默认端口</title>
    <url>/archives/ebc5ab1c.html</url>
    <content><![CDATA[<p>SSH服务默认使用22端口，为了防止端口扫描及暴力破解，我们可以更改SSH的默认端口。</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>编辑ssh配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure>
<p>找到如下一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Port 22</span><br></pre></td></tr></table></figure>

<p>更改你要使用的端口，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Port 3399</span><br></pre></td></tr></table></figure>

<p>如果你操作的是远程主机要格外小心，确保没有其它程序使用这个端口并检查防火墙。一旦出错，可能导致SSH连接不上远程服务器。</p>
<p>更改完成之后，重启SSH服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart ssh</span><br></pre></td></tr></table></figure>

<p>查看SSH服务监听的端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo netstat -tunlp | grep ssh</span><br></pre></td></tr></table></figure>

<p>连接时需使用-p选项指定端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@server_domain_OR_IP -p 3399</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>更改 Kali Linux MAC 地址</title>
    <url>/archives/c566ca23.html</url>
    <content><![CDATA[<h2 id="更改计算机的MAC地址-使用情形如下"><a href="#更改计算机的MAC地址-使用情形如下" class="headerlink" title="更改计算机的MAC地址,使用情形如下:"></a>更改计算机的MAC地址,使用情形如下:</h2><ul>
<li>防止某些软件记录你真实的MAC地址</li>
<li>网络管理员屏蔽了你的MAC地址</li>
</ul>
<h2 id="查看原始MAC地址"><a href="#查看原始MAC地址" class="headerlink" title="查看原始MAC地址:"></a>查看原始MAC地址:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
<p>我以无线网卡(wlan0)为例,00:17:c4:bb:13:b7。有线网卡是eth0,方法一样。</p>
<h2 id="为了临时改变mac地址-我们首先关闭这个网卡"><a href="#为了临时改变mac地址-我们首先关闭这个网卡" class="headerlink" title="为了临时改变mac地址,我们首先关闭这个网卡:"></a>为了临时改变mac地址,我们首先关闭这个网卡:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig wlan0 down</span><br></pre></td></tr></table></figure>
<p>配置新的mac地址:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig wlan0 hw ether 00:00:00:00:00:11</span><br></pre></td></tr></table></figure>
<p>mac地址格式是十六进制:XX:XX:XX:XX:XX:XX</p>
<h2 id="开启网卡接口"><a href="#开启网卡接口" class="headerlink" title="开启网卡接口:"></a>开启网卡接口:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig wlan0 up</span><br></pre></td></tr></table></figure>
<p>上面的方法是临时生效,在系统重启之后会恢复为初始的mac地址。如果你想永久生效,请看下一节。</p>
<h2 id="MAC地址永久生效"><a href="#MAC地址永久生效" class="headerlink" title="MAC地址永久生效:"></a>MAC地址永久生效:</h2><p>Kail Linux基于Debian,而Debian的所有网络接口配置都位于/etc/network/interfaces文件中。<br>编辑/etc/network/interfaces:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;network&#x2F;interfaces</span><br></pre></td></tr></table></figure>
<p>添加一行脚本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pre-up ifconfig wlan0 hw ether 00:00:00:00:00:11</span><br></pre></td></tr></table></figure>
<p>如果你想恢复初始mac地址,只要注释掉这一行就可以了。</p>
<h2 id="使用macchanger更改mac地址"><a href="#使用macchanger更改mac地址" class="headerlink" title="使用macchanger更改mac地址"></a>使用macchanger更改mac地址</h2><p>例如我要更改无线网卡的mac地址,依次执行如下命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig wlan0 down</span><br><span class="line">macchanger -r wlan0</span><br><span class="line">service network-manager restart</span><br></pre></td></tr></table></figure>
<p>上面命令设置的mac地址是随机的。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>防止远程Linux主机自动断开SSH连接</title>
    <url>/archives/e41226c8.html</url>
    <content><![CDATA[<p>在使用ssh连接远程Linux主机时，如果长时间不操作，ssh会自动断开，只能重新登陆。</p>
<blockquote>
<p>由于ssh的安全机制，如果10分钟没有任何操作，本次SSH会话会自动关闭。</p>
</blockquote>
<h2 id="怎么防止远程Linux自动断开SSH连接"><a href="#怎么防止远程Linux自动断开SSH连接" class="headerlink" title="怎么防止远程Linux自动断开SSH连接"></a>怎么防止远程Linux自动断开SSH连接</h2><p>下面的操作是在本地ssh客户端上，不是远程主机。<br>编辑SSH配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.ssh&#x2F;config   #当前登录用户生效</span><br></pre></td></tr></table></figure>
<p>添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host *</span><br><span class="line">  ServerAliverInterval 30</span><br></pre></td></tr></table></figure>
<p>*号代表所有主机，你可以指定某个主机，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host server1</span><br><span class="line">  ServerAliverInterval 30</span><br></pre></td></tr></table></figure>
<p>ServerAliveInterval 30表示ssh客户端每隔30秒给远程主机发送一个no-op包，no-op是无任何操作的意思，这样远程主机就不会关闭这个SSH会话。</p>
<p>为了使所有用户生效，你可以在/etc/ssh/ssh_config全局配置文件添加如下一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ServerAliveInterval 30</span><br></pre></td></tr></table></figure>

<p>还可以在连接时使用选项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -o ServerAliveInterval&#x3D;30 user@remote-ssh-server-ip</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>定制带 Python3 的 Ubuntu 基础 Docker 镜像</title>
    <url>/archives/d5246505.html</url>
    <content><![CDATA[<h2 id="制作Dockerfile"><a href="#制作Dockerfile" class="headerlink" title="制作Dockerfile"></a>制作Dockerfile</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM daocloud.io&#x2F;ubuntu:trusty</span><br><span class="line">MAINTAINER water-law &lt;dockerwaterlaw@daocloud.io&gt;</span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">    apt-get install -y python3 \</span><br><span class="line">                        python3-dev \</span><br><span class="line">                        python3-pip \</span><br><span class="line">    &amp;&amp; apt-get clean \</span><br><span class="line">    &amp;&amp; apt-get autoclean \</span><br><span class="line">    &amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;*</span><br><span class="line">    </span><br><span class="line">RUN mkdir -p &#x2F;app</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD [&quot;bash&quot;]</span><br></pre></td></tr></table></figure>

<h2 id="生成镜像"><a href="#生成镜像" class="headerlink" title="生成镜像"></a>生成镜像</h2><p>创建空文件夹， 将 Dockerfile 文件放在此目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运行 docker build -t [tagname] .</span><br></pre></td></tr></table></figure>

<h2 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker save -o [output_name] [image]</span><br></pre></td></tr></table></figure>
<p>其中 output_name 一般是 tar, tar.xz 格式。</p>
<h2 id="利用镜像生成容器"><a href="#利用镜像生成容器" class="headerlink" title="利用镜像生成容器"></a>利用镜像生成容器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it -v E:Projectswaterlawblog:&#x2F;home&#x2F;code [image] &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<h2 id="再次启动容器"><a href="#再次启动容器" class="headerlink" title="再次启动容器"></a>再次启动容器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>
<p>说明: 对容器的修改是永久保存到文件系统的。<br>可发现<code>E:Projectswaterlawblog</code>是挂载到 docker 容器的<code>/home/code</code>目录的。</p>
<h2 id="修改容器"><a href="#修改容器" class="headerlink" title="修改容器"></a>修改容器</h2><p>比如 安装 virtualenv 且在 /home 目录使用 virtualenv -p python3 pysp<br>创建虚拟环境， 进入 /home/code, 运行 pip3 install -r requirements.txt</p>
<h2 id="提交容器修改"><a href="#提交容器修改" class="headerlink" title="提交容器修改"></a>提交容器修改</h2><p>先退出容器 exit<br>基于旧的 container 提交新的 docker 镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker commit -m &quot;commit message&quot; -a &quot;author info&quot; [container_id] image_name:tag</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker commit -m &quot;earth&quot; -a &quot;zjp&quot; 846edc550555 kuaiyun:earth</span><br></pre></td></tr></table></figure>
<p>提示： 以上命令会打了一个 REPOSITORY 为 kuaiyun、 TAG 为 earth 的镜像， 可通过<code>docker images</code>查看。</p>
<h2 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| CONTAINER I D| IMAGE | COMMAND | CREATED STATUS | PORTS | NAMES |</span><br><span class="line"></span><br><span class="line">| caa1f263a254 | myubuntu-base | &quot;&#x2F;bin&#x2F;bash&quot; | 32 minutes ago Exited (0) 54 seconds ago | | relaxed_lumiere |</span><br><span class="line"></span><br><span class="line">docker export -o [outputfile] [container_id]</span><br></pre></td></tr></table></figure>

<h2 id="导入容器-tar-文件"><a href="#导入容器-tar-文件" class="headerlink" title="导入容器 tar 文件"></a>导入容器 tar 文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker import [container_file] [command]</span><br></pre></td></tr></table></figure>
<p>我这里 command 是 /bin/bash, 所以 docker import [container_file] bash。</p>
<h2 id="导入镜像-tar-文件"><a href="#导入镜像-tar-文件" class="headerlink" title="导入镜像 tar 文件"></a>导入镜像 tar 文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker load &lt; [tar file]</span><br></pre></td></tr></table></figure>
<p>注意 save 和 load 是配对的， import 和 export 是配对的。 import 还要加上 command。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建live-build构建环境</title>
    <url>/archives/a1fd9650.html</url>
    <content><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="添加国内软件源"><a href="#添加国内软件源" class="headerlink" title="添加国内软件源"></a>添加国内软件源</h3><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;-EOF &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; buster main contrib non-free</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F; buster main contrib non-free</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; buster main contrib non-free</span><br><span class="line">EOF</span><br><span class="line">apt update &amp;&amp;　apt upgrade -y</span><br></pre></td></tr></table></figure></code></pre><h3 id="安装Live构建环境应用程序"><a href="#安装Live构建环境应用程序" class="headerlink" title="安装Live构建环境应用程序"></a>安装Live构建环境应用程序</h3><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install -y \</span><br><span class="line">    debootstrap \</span><br><span class="line">    squashfs-tools \</span><br><span class="line">    xorriso \</span><br><span class="line">    mmdebstrap \</span><br><span class="line">    live-build \</span><br><span class="line">    grub-pc-bin \</span><br><span class="line">    grub-efi-amd64-bin \</span><br><span class="line">    openssh-server \</span><br><span class="line">    mtools \</span><br><span class="line">    isolinux \</span><br><span class="line">    net-tools \</span><br><span class="line">    git \</span><br><span class="line">    curl \</span><br><span class="line">    vim</span><br></pre></td></tr></table></figure></code></pre><h3 id="设置构建首选镜像站点"><a href="#设置构建首选镜像站点" class="headerlink" title="设置构建首选镜像站点"></a>设置构建首选镜像站点</h3><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;etc&#x2F;live</span><br><span class="line">cat &lt;&lt;-EOF &gt;&gt; &#x2F;etc&#x2F;live&#x2F;build.conf</span><br><span class="line">LB_MIRROR_BOOTSTRAP&#x3D;&quot;http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F;&quot;</span><br><span class="line">LB_MIRROR_CHROOT_SECURITY&#x3D;&quot;http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian-security&#x2F;&quot;</span><br><span class="line">LB_MIRROR_CHROOT_BACKPORTS&#x3D;&quot;http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian-backports&#x2F;&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></code></pre><h3 id="添加环境变量和代理设置"><a href="#添加环境变量和代理设置" class="headerlink" title="添加环境变量和代理设置"></a>添加环境变量和代理设置</h3><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;-EOF &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;sbin:PATH</span><br><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;win_ip:1080</span><br><span class="line">export https_proxy&#x3D;http:&#x2F;&#x2F;win_ip:1080</span><br><span class="line">export ftp_proxy&#x3D;http:&#x2F;&#x2F;win_ip:1080</span><br><span class="line">EOF</span><br><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure></code></pre><h3 id="设置SSH服务允许root远程登陆"><a href="#设置SSH服务允许root远程登陆" class="headerlink" title="设置SSH服务允许root远程登陆"></a>设置SSH服务允许root远程登陆</h3><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &#x2F;etc&#x2F;ssh&#x2F;sshd_config \\</span><br><span class="line">    -e &#39;s&#x2F;^PermitRootLogin .*&#x2F;PermitRootLogin yes&#39; \\</span><br><span class="line">    -e &#39;s&#x2F;#PasswordAuthentication yes&#x2F;PasswordAuthentication yes&#39; </span><br><span class="line">systemctl enable ssh</span><br></pre></td></tr></table></figure></code></pre><h3 id="给普通用户添加sudo权限"><a href="#给普通用户添加sudo权限" class="headerlink" title="给普通用户添加sudo权限"></a>给普通用户添加sudo权限</h3><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +w &#x2F;etc&#x2F;sudoers</span><br><span class="line">cat &lt;&lt;-EOF &gt;&gt; &#x2F;etc&#x2F;sudoers</span><br><span class="line">username ALL&#x3D;(ALL:ALL) ALL</span><br><span class="line">EOF</span><br><span class="line">chmod -w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>查询Linux发行版名称与版本</title>
    <url>/archives/ab7d1113.html</url>
    <content><![CDATA[<p>在Linux系统下查询发行版名称和版本有许多种方法,而不同的Linux发行版查询的方式也不所同,以下整理了一些常见的方法。</p>
<a id="more"></a>

<h2 id="查询-Linux-发行版与版本"><a href="#查询-Linux-发行版与版本" class="headerlink" title="查询 Linux 发行版与版本"></a>查询 Linux 发行版与版本</h2><p>Linux 发行版与版本就是指大家常听到的 Ubuntu 16.04、Fedora 24、CentOS 7 这些名字,而要查询 Linux 的发行版有以下几中方式。</p>
<h2 id="查看-etc-release-文件"><a href="#查看-etc-release-文件" class="headerlink" title="查看 /etc/*-release 文件"></a>查看 /etc/*-release 文件</h2><p>通常在/etc目录中会有几个*-release文件,从这里面的内容可以看出Linux的发行版名称与版本号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;redhat-release</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;os-release</span><br><span class="line"></span><br><span class="line">NAME&#x3D;&quot;Ubuntu&quot;</span><br><span class="line">VERSION&#x3D;&quot;16.04.1 LTS (Xenial Xerus)&quot;</span><br><span class="line">ID&#x3D;ubuntu</span><br><span class="line">ID_LIKE&#x3D;debian</span><br><span class="line">PRETTY_NAME&#x3D;&quot;Ubuntu 16.04.1 LTS&quot;</span><br><span class="line">VERSION_ID&#x3D;&quot;16.04&quot;</span><br><span class="line">HOME_URL&#x3D;&quot;http:&#x2F;&#x2F;www.ubuntu.com&#x2F;&quot;</span><br><span class="line">SUPPORT_URL&#x3D;&quot;http:&#x2F;&#x2F;help.ubuntu.com&#x2F;&quot;</span><br><span class="line">BUG_REPORT_URL&#x3D;&quot;http:&#x2F;&#x2F;bugs.launchpad.net&#x2F;ubuntu&#x2F;&quot;</span><br><span class="line">UBUNTU_CODENAME&#x3D;xenial</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;lsb-release</span><br><span class="line"></span><br><span class="line">DISTRIB_ID&#x3D;Ubuntu</span><br><span class="line">DISTRIB_RELEASE&#x3D;16.04</span><br><span class="line">DISTRIB_CODENAME&#x3D;xenial</span><br><span class="line">DISTRIB_DESCRIPTION&#x3D;&quot;Ubuntu 16.04.1 LTS&quot;</span><br></pre></td></tr></table></figure>

<h2 id="使用-lsb-release-命令"><a href="#使用-lsb-release-命令" class="headerlink" title="使用 lsb_release 命令"></a>使用 lsb_release 命令</h2><p>lsb_release是一个用来查询 Linux 发行版信息的命令,但是并不是每一种 Linux 发行版都会预装这个指令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br><span class="line"></span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:Ubuntu 16.04.1 LTS</span><br><span class="line">Release:16.04</span><br><span class="line">Codename:xenial</span><br></pre></td></tr></table></figure>

<h2 id="查询-Linux-内核版本"><a href="#查询-Linux-内核版本" class="headerlink" title="查询 Linux 内核版本"></a>查询 Linux 内核版本</h2><p>uname是一个用来查询 Linux 系统内核版本的命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -a</span><br><span class="line"></span><br><span class="line">Linux snail 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC 2016 x8</span><br></pre></td></tr></table></figure>

<h2 id="查看-proc-version"><a href="#查看-proc-version" class="headerlink" title="查看 /proc/version"></a>查看 /proc/version</h2><p>在 /proc/version 中也会纪录一些 Linux 的内核版本信息:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;version</span><br><span class="line"></span><br><span class="line">Linux version 4.4.0-31-generic (buildd@lgw01-16) (gcc version 5.3.1 2016041</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>linux：把一个大tar包分割成多个小文件-Linux</title>
    <url>/archives/f4c68735.html</url>
    <content><![CDATA[<h2 id="本文内容"><a href="#本文内容" class="headerlink" title="本文内容"></a>本文内容</h2><ul>
<li>把大文件分割成多个小文件</li>
<li>把分割成的小文件合并成大文件</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>创建一个大tar包:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -cvjf home1.tar.bz2 &#x2F;home&#x2F;snail&#x2F;*</span><br></pre></td></tr></table></figure>
<p>把tar包分成多个小文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">split -b 40M home1.tar.bz2 &quot;home.tar.bz2.part&quot;</span><br></pre></td></tr></table></figure>
<p>把多个小文件合并:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat home.tar.bz2.parta* &gt; home2.tar.bz2</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>tar</tag>
      </tags>
  </entry>
  <entry>
    <title>linux：配置Vim语法高亮并显示行号</title>
    <url>/archives/2c4db044.html</url>
    <content><![CDATA[<h2 id="临时生效："><a href="#临时生效：" class="headerlink" title="临时生效："></a>临时生效：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:syntax on  #高亮开</span><br><span class="line">:syntax off  #高亮关</span><br><span class="line">:set nu  #行号</span><br></pre></td></tr></table></figure>

<h2 id="永久生效："><a href="#永久生效：" class="headerlink" title="永久生效："></a>永久生效：</h2><p>切换到当前登陆用户家目录并编辑 .vimrc 文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd ~</span><br><span class="line"># vim .vimrc</span><br></pre></td></tr></table></figure>

<p>添加以下行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">syntax on</span><br><span class="line">set nu</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04 安装中文版后的配置</title>
    <url>/archives/647419be.html</url>
    <content><![CDATA[<h2 id="更换成中国apt服务器"><a href="#更换成中国apt服务器" class="headerlink" title="更换成中国apt服务器"></a>更换成中国apt服务器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">less &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<h2 id="apt软件包更新"><a href="#apt软件包更新" class="headerlink" title="apt软件包更新"></a>apt软件包更新</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt update         #更新存储库列表</span><br><span class="line">apt upgrade        #更新软件包</span><br><span class="line">apt full-upgrade   #更新软件包</span><br><span class="line">apt autoremove     #不再需要的软件包删除</span><br></pre></td></tr></table></figure>

<h2 id="从中文目录名称更改为英文"><a href="#从中文目录名称更改为英文" class="headerlink" title="从中文目录名称更改为英文"></a>从中文目录名称更改为英文</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">env LANGUAGE&#x3D;C LC_MESSAGES&#x3D;C xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure>

<h2 id="卸载亚马逊"><a href="#卸载亚马逊" class="headerlink" title="卸载亚马逊"></a>卸载亚马逊</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt remove --purge ubuntu-web-launchers</span><br></pre></td></tr></table></figure>

<h2 id="卸载libreoffice"><a href="#卸载libreoffice" class="headerlink" title="卸载libreoffice"></a>卸载libreoffice</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt remove --purge libreoffice-common</span><br></pre></td></tr></table></figure>

<h2 id="在Ubuntu-18-04-上禁用系统错误报告消息"><a href="#在Ubuntu-18-04-上禁用系统错误报告消息" class="headerlink" title="在Ubuntu 18.04 上禁用系统错误报告消息"></a>在Ubuntu 18.04 上禁用系统错误报告消息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nano &#x2F;etc&#x2F;default&#x2F;apport</span><br><span class="line"></span><br><span class="line">enabled&#x3D;0</span><br></pre></td></tr></table></figure>

<h2 id="google-chrome"><a href="#google-chrome" class="headerlink" title="google chrome"></a>google chrome</h2><p><strong>下载google chrome:</strong><a href="https://www.google.co.jp/chrome/browser/desktop/index.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.google.co.jp/chrome/browser/desktop/index.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install .&#x2F;google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>

<h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><p><strong>下载VSCode：</strong> <a href="https://code.visualstudio.com/" target="_blank" rel="external nofollow noopener noreferrer">https://code.visualstudio.com/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install .&#x2F;code_*_amd64.deb</span><br></pre></td></tr></table></figure>

<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install vim</span><br></pre></td></tr></table></figure>

<h2 id="net-tools"><a href="#net-tools" class="headerlink" title="net-tools"></a>net-tools</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install net-tools</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 16.04 安装 PyCharm 和卸载</title>
    <url>/archives/c5acc6df.html</url>
    <content><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>1、添加 PyCharm 软件源</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:mystic-mirage&#x2F;pycharm</span><br></pre></td></tr></table></figure>

<p><strong>2、安装 PyCharm 专业版</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install pycharm</span><br></pre></td></tr></table></figure>

<p><strong>3、安装 PyCharm 社区版</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get pycharm-community</span><br></pre></td></tr></table></figure>

<p><strong>4、卸载 PyCharm</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt remove pycharm</span><br><span class="line">apt remove pycharm-community</span><br><span class="line">apt autoremove</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>tar命令使用示例</title>
    <url>/archives/28a0add8.html</url>
    <content><![CDATA[<h2 id="tar命令参数"><a href="#tar命令参数" class="headerlink" title="tar命令参数"></a>tar命令参数</h2><ul>
<li>-c 创建压缩文件</li>
<li>-x 解压文件</li>
<li>-v 显示进度</li>
<li>-f 文件名</li>
<li>-t 查看压缩文件内容</li>
<li>-j 通过bzip2归档</li>
<li>-z 通过gzip归档</li>
<li>-r 在压缩文件中追加文件或目录</li>
<li>-W 验证压缩文件</li>
</ul>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -cvf code.tar &#x2F;home&#x2F;abc&#x2F;code&#x2F;</span><br><span class="line">tar cvzf code.tar.gz &#x2F;home&#x2F;abc&#x2F;code&#x2F;</span><br><span class="line">tar cvfj code.tar.bz2 &#x2F;home&#x2F;abc&#x2F;code&#x2F;</span><br><span class="line">tar xvf code.tar -C &#x2F;home&#x2F;abc&#x2F;code</span><br><span class="line">tar xvf code.tar.gz</span><br><span class="line">tar xvf code.tar.bz2</span><br><span class="line">tar tvf code.tar</span><br><span class="line">tar --extract --file&#x3D;code.tar Readme.txt  解压tar包中的单个文件</span><br><span class="line">tar -xvf code.tar &quot;file1&quot; &quot;file2&quot;</span><br><span class="line">tar -rvf code.tar abc.txt 在tar包中加入文件</span><br><span class="line">tar -rvf code.tar &#x2F;home&#x2F;abc&#x2F;doc 在tar包中加入目录</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>tar</tag>
      </tags>
  </entry>
  <entry>
    <title>linux：Tar命令使用方法</title>
    <url>/archives/91af96f.html</url>
    <content><![CDATA[<p>tar 命令常用来把文件和目录打包成一个文件。</p>
<a id="more"></a>



<h2 id="选项参数："><a href="#选项参数：" class="headerlink" title="选项参数："></a>选项参数：</h2><ul>
<li>-c 创建压缩文件</li>
<li>-x 解压文件</li>
<li>-v 显示进度</li>
<li>-f 文件名</li>
<li>-t 查看压缩文件内容</li>
<li>-j 通过bzip归档</li>
<li>-z 通过gzip归档</li>
<li>-r 在压缩文件中追加文件或目录 </li>
<li>-W 验证压缩文件</li>
</ul>
<h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><h3 id="把目录-home-abc-code-打包为code-tar"><a href="#把目录-home-abc-code-打包为code-tar" class="headerlink" title="把目录/home/abc/code 打包为code.tar"></a>把目录/home/abc/code 打包为code.tar</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -cvf code.tar &#x2F;home&#x2F;abc&#x2F;code&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="压缩为tar-gz-格式的包"><a href="#压缩为tar-gz-格式的包" class="headerlink" title="压缩为tar.gz 格式的包"></a>压缩为tar.gz 格式的包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar cvzf code.tar.gz &#x2F;home&#x2F;abc&#x2F;code&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="压缩率更高的tar-bz2-格式的包"><a href="#压缩率更高的tar-bz2-格式的包" class="headerlink" title="压缩率更高的tar.bz2 格式的包"></a>压缩率更高的tar.bz2 格式的包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar cvfj code.tar.bz2 &#x2F;home&#x2F;abc&#x2F;code&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="解压tar包"><a href="#解压tar包" class="headerlink" title="解压tar包"></a>解压tar包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -xvf code.tar -C &#x2F;home&#x2F;abc&#x2F;code</span><br></pre></td></tr></table></figure>

<h3 id="解压tar-gz包"><a href="#解压tar-gz包" class="headerlink" title="解压tar.gz包"></a>解压tar.gz包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -xvf code.tar.gz</span><br></pre></td></tr></table></figure>



<h3 id="解压tar-bz2-包"><a href="#解压tar-bz2-包" class="headerlink" title="解压tar.bz2 包"></a>解压tar.bz2 包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -xvf code.tar.bz2</span><br></pre></td></tr></table></figure>



<h3 id="列出tar包内容"><a href="#列出tar包内容" class="headerlink" title="列出tar包内容"></a>列出tar包内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -tvf code.tar</span><br></pre></td></tr></table></figure>



<h3 id="解压tar包中的单个文件"><a href="#解压tar包中的单个文件" class="headerlink" title="解压tar包中的单个文件"></a>解压tar包中的单个文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar --extract --file&#x3D;code.tar Readme.txt</span><br></pre></td></tr></table></figure>



<h3 id="解压tar包中的多个文件"><a href="#解压tar包中的多个文件" class="headerlink" title="解压tar包中的多个文件"></a>解压tar包中的多个文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -xvf code.tar &quot;file1&quot; &quot;file2&quot;</span><br></pre></td></tr></table></figure>



<h3 id="解压同一种类型的文件（下面是解压txt文件）"><a href="#解压同一种类型的文件（下面是解压txt文件）" class="headerlink" title="解压同一种类型的文件（下面是解压txt文件）"></a>解压同一种类型的文件（下面是解压txt文件）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -xvf code.tar --wildcards *.txt&#39;</span><br></pre></td></tr></table></figure>



<h3 id="在tar包中加入文件或目录"><a href="#在tar包中加入文件或目录" class="headerlink" title="在tar包中加入文件或目录"></a>在tar包中加入文件或目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -rvf code.tar abcd.txt</span><br><span class="line"># tar -rvf code.tar Doc&#x2F;</span><br></pre></td></tr></table></figure>



<h3 id="tar帮助信息查看"><a href="#tar帮助信息查看" class="headerlink" title="tar帮助信息查看"></a>tar帮助信息查看</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># man tar</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>tar</tag>
      </tags>
  </entry>
  <entry>
    <title>linux：Sytemctl命令使用方法</title>
    <url>/archives/47790c48.html</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start service  #启动服务</span><br><span class="line">systemctl stop service  #停止服务</span><br><span class="line">systemctl restart service  #重启服务</span><br><span class="line">systemctl reload service  #重新加载配置文件</span><br><span class="line">systemctl enable service  #开机启动</span><br><span class="line">systemctl disable service  #关闭开机启动</span><br><span class="line">systemctl status service  #服务状态</span><br><span class="line">systemctl list-units  #列出系统中所有可用的服务</span><br><span class="line">systemctl is-active application.service  #服务是否运行</span><br><span class="line">systemctl is-enabled application.service  #服务是否开机启动</span><br><span class="line">systemctl is-failed application.service  #服务运行是否正常</span><br><span class="line">man systemctl  #帮助命令</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>systemctl</tag>
      </tags>
  </entry>
  <entry>
    <title>linux：ssh允许使用root用户登录</title>
    <url>/archives/a242a680.html</url>
    <content><![CDATA[<p>本文介绍如果在正确安装 ssh 服务的前提下，配置允许使用 root 远程登陆 Debian 。</p>
<a id="more"></a>

<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>1、编辑<code>/etc/ssh/sshd_config</code> ssh服务配置文件。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes  #允许root远程登陆</span><br><span class="line">PasswordAuthentication yes  #开启秘钥和密码认证</span><br></pre></td></tr></table></figure>

<p><strong>2、保存配置后，重启ssh服务。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;inin.d&#x2F;ssh restart  #重启ssh服务</span><br></pre></td></tr></table></figure>

<p><strong>3、以 root 用户登陆ssh服务示例。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@x.x.x.x</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 脚本同时执行多条命令</title>
    <url>/archives/626682b4.html</url>
    <content><![CDATA[<p>在利用frp穿透内网的过程中，由于需要启动两个frpc进程，在利用<code>Systemd Service</code>实现开机自启的过程中，由于[Service] 部分<code>Type为simple时</code>，<br><code>ExecStart</code>后面只能跟一条命令，因此需要把启动两个frpc的命令封装成一条命令，使用shell脚本完成。</p>
<a id="more"></a>

<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>在<code>/opt/frpc/</code>目录下新建一个<code>frpc.sh</code>，并赋予执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;opt&#x2F;frpc&#x2F;</span><br><span class="line">touch frpc.sh &amp;&amp; chmod +x frpc.sh</span><br><span class="line">vim frpc.sh</span><br></pre></td></tr></table></figure>

<p>其中frpc.sh的内容为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">&#x2F;opt&#x2F;frpc&#x2F;frpc_80&#x2F;.&#x2F;frpc -c &#x2F;opt&#x2F;frpc&#x2F;frpc_80&#x2F;.&#x2F;frpc.ini &amp;</span><br><span class="line"></span><br><span class="line">&#x2F;opt&#x2F;frpc&#x2F;frpc_1638&#x2F;.&#x2F;frpc -c &#x2F;opt&#x2F;frpc&#x2F;frpc_1638&#x2F;.&#x2F;frpc.ini</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><code>&amp;</code> 表示几条命令同时执行；</li>
<li><code>&amp;&amp;</code>表示命令执行具有先后顺序，前一条命令执行成功后，才执行下一条命令。</li>
<li><code>||</code>表示前一条命令执行成功后，后一条命令就不会执行。</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>scp命令的简单使用示例</title>
    <url>/archives/489403ef.html</url>
    <content><![CDATA[<h2 id="上传本地文件-夹-到服务器"><a href="#上传本地文件-夹-到服务器" class="headerlink" title="上传本地文件(夹)到服务器"></a>上传本地文件(夹)到服务器</h2><p>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp  &#x2F;local&#x2F;file&#x2F;path&#x2F;test.txt root@ip:&#x2F;remote&#x2F;path&#x2F;</span><br></pre></td></tr></table></figure>

<p>文件夹（加上<code>-r</code>参数）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp  -r &#x2F;local&#x2F;file&#x2F;path&#x2F; root@ip:&#x2F;remote&#x2F;path&#x2F;</span><br></pre></td></tr></table></figure>

<p>使用秘钥上传文件夹时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -i &quot;1.pem&quot; -r &#x2F;local&#x2F;file&#x2F;path&#x2F; root@ip:&#x2F;remote&#x2F;path&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="下载服务器文件-夹-到本地"><a href="#下载服务器文件-夹-到本地" class="headerlink" title="下载服务器文件(夹)到本地"></a>下载服务器文件(夹)到本地</h2><p>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp root@ip:&#x2F;remote&#x2F;path&#x2F; &#x2F;lcal&#x2F;file&#x2F;path</span><br></pre></td></tr></table></figure>

<p>文件夹（加上<code>-r</code>参数）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r root@ip:&#x2F;remote&#x2F;path&#x2F; &#x2F;lcal&#x2F;file&#x2F;path&#x2F;</span><br></pre></td></tr></table></figure>

<p>使用秘钥下载文件夹时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -i &quot;1.pem&quot; -r root@ip:&#x2F;remote&#x2F;path&#x2F; &#x2F;lcal&#x2F;file&#x2F;path&#x2F;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>scp</tag>
      </tags>
  </entry>
  <entry>
    <title>npm更换国内安装源</title>
    <url>/archives/d1895efe.html</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>执行下列命令更换国内源：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux：执行sudo命令不用输入密码</title>
    <url>/archives/c80a599a.html</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>在 <code>/etc/sudoers</code> 文件尾添加下面一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username ALL&#x3D;(ALL)NOPASSWD:ALL</span><br></pre></td></tr></table></figure>
<p>一般不建议进行该操作。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>linux系统环境下允许用户通过sudo仅运行特定命令</title>
    <url>/archives/18f1a1f0.html</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>执行下面命令实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username ALL&#x3D;(ALL) NOPASSWD:&#x2F;bin&#x2F;mkdir,&#x2F;bin&#x2F;rmdir</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统环境下使用curl获得公网IP地址</title>
    <url>/archives/7cfdd891.html</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>执行下面命令获得：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl icanhazip.com   #速度快点</span><br><span class="line">curl ipinfo.io&#x2F;ip    #速度稍慢</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统环境下给已存在用户添加sudo权限</title>
    <url>/archives/c779294b.html</url>
    <content><![CDATA[<p>linux系统环境下给用户添加sudo权限</p>
<a id="more"></a>

<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>1、给 <code>/etc/sudoers</code> 添加写权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure>

<p><strong>2、编辑 <code>/etc/sudoers</code> 文件，给 **username</strong> 用户添加sudo权限**</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username ALL&#x3D;(ALL) ALL</span><br></pre></td></tr></table></figure>

<p><strong>3、去除 <code>/etc/sudoers</code> 写权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod -w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure>

<p>上面操作完成后，<strong>username</strong> 用户就拥有了sudo权限了。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统环境下创建sudo用户</title>
    <url>/archives/2a8b1abe.html</url>
    <content><![CDATA[<p>sudo命令提供了临时使用root权限的机制，使普通用户可以执行超级管理员任务。</p>
<a id="more"></a>

<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>1、添加用户</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adduser newuser</span><br></pre></td></tr></table></figure>

<p><strong>2、设置用户密码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd newuser</span><br></pre></td></tr></table></figure>

<p><strong>3、把新建用户加入sudo组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod -aG sudo newuser</span><br></pre></td></tr></table></figure>

<p><strong>4、测试新用户sudo机制</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su newuser</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 可执行文件添加到PATH环境变量的方法</title>
    <url>/archives/55cef830.html</url>
    <content><![CDATA[<p>linux命令行下面执行某个命令的时候，首先保证该命令是否存在，若存在，但输入命令的时候若仍提示：command not found。</p>
<a id="more"></a>


<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>这个时候就的查看PATH环境变量的设置了，当前命令是否存在于PATH环境变量中。</p>
<p>#查看PATH：echo $PATH</p>
<p>举例说，命令 composr 在/usr/loca/bin</p>
<p>但执行的时候提示：</p>
<p>-bash: composr: command not found</p>
<p>这个时候，通过echo $PATH，，发现composer并未在PATH环境变量中有设置，这个时候就需要把composer所在路径添加到PATH中。</p>
<p>所以需要修改PATH环境变量，具体如下：</p>
<p><strong>方法一：</strong></p>
<p>export PATH=/usr/sbin:$PATH</p>
<p>#配置完后可以通过echo $PATH查看配置结果。</p>
<p>#生效方法：立即生效。</p>
<p>#有效期限：临时改变，只能在当前的终端窗口中有效，当前窗口关闭后就会恢#复原有的path配置。</p>
<p>#用户局限：仅对当前用户。</p>
<p><strong>方法二：</strong></p>
<p>#通过修改.bashrc文件:</p>
<p>vim ~/.bashrc</p>
<p>#在最后一行添上：</p>
<p>export PATH=/usr/sbin:$PATH。</p>
<p>#生效方法：（有以下两种）</p>
<p>#1、关闭当前终端窗口，重新打开一个新终端窗口就能生效。</p>
<p>#2、输入“source ~/.bashrc”命令，立即生效。</p>
<p>#有效期限：永久有效</p>
<p>#用户局限：仅对当前用户</p>
<p><strong>方法三：</strong></p>
<p>#通过修改profile文件:</p>
<p>vim /etc/profile</p>
<p>export PATH=/usr/sbin:$PATH</p>
<p>#生效方法：系统重启</p>
<p>#有效期限：永久有效</p>
<p>#用户局限：对所有用户</p>
<p>方法四：</p>
<p>#通过修改environment文件:</p>
<p>vim /etc/environment</p>
<p>在PATH=”/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin”中加入 “:/usr/local/bin”</p>
<p>#生效方法：系统重启</p>
<p>#有效期限：永久有效</p>
<p>#用户局限：对所有用户</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>PATH</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境下rpm和deb包相互转换</title>
    <url>/archives/a722ca9a.html</url>
    <content><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>1、安装alien软件包</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install alien -y</span><br></pre></td></tr></table></figure>

<p><strong>2、RPM转DEB</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alien google-chrome.rpm google-chrome.deb generated</span><br></pre></td></tr></table></figure>

<p><strong>3、DEB转RPM(添加参数-r进行转换)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alien -r google-chrome.deb google-chrome.rpm generated</span><br></pre></td></tr></table></figure>

<p><strong>4、DEB包安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -i google-chrome.deb</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>deb</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux查看硬件参数方法</title>
    <url>/archives/10b2707f.html</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><strong>CPU:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dmidecode -t processor</span><br><span class="line">cat &#x2F;proc&#x2F;cpuinfo</span><br><span class="line">lscpu</span><br></pre></td></tr></table></figure>

<p><strong>Memeroy:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;meminfo</span><br><span class="line">dmidecode -t Memory</span><br><span class="line">free -m</span><br></pre></td></tr></table></figure>

<p><strong>scsi：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;scsi&#x2F;scsi</span><br><span class="line">fdisk -l</span><br><span class="line">lsblk</span><br></pre></td></tr></table></figure>

<p><strong>raid：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lspci -v | grep RAID</span><br><span class="line">cat &#x2F;proc&#x2F;mdstat</span><br></pre></td></tr></table></figure>

<p><strong>网卡：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lspci -v |grep -i &#39;eth&#39;</span><br><span class="line">ethtool eth0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux：禁止root用户通过ssh登录</title>
    <url>/archives/1e7ce50.html</url>
    <content><![CDATA[<p>禁止root用户通过SSH登录，可以提高Linux系统的安全。你也许注意到Linux服务器的登录认证日志记录了很多尝试登录，这是有人使用暴力破解软件留下的。如果关闭了root用户登录，你的服务器就免疫了这种攻击方式。</p>
<a id="more"></a>


<p>SSH服务配置文件有两个， ssh_conf 和 sshd_conf。ssh_conf配置向外的ssh连接（例如，你已经连接到服务器，然后再通过SSH连接到其他服务器）。sshd_conf配置连接到服务器的规则。</p>
<h2 id="修改sshd-conf文件"><a href="#修改sshd-conf文件" class="headerlink" title="修改sshd_conf文件"></a>修改sshd_conf文件</h2><p>在修改前备份，绝对是一个好主意。编辑：</p>
<pre><code>vim /etc/ssh/sshd_config</code></pre><p>找到如下一行：</p>
<pre><code>PermitRootLogin yes</code></pre><p>更改为：</p>
<pre><code>PermitRootLogin no</code></pre><p>如果该行前有注释（#），要去掉。</p>
<p>到此，禁止root用户通过ssh登录，设置完成。</p>
<h2 id="创建一个新用户"><a href="#创建一个新用户" class="headerlink" title="创建一个新用户"></a>创建一个新用户</h2><p>我们禁用root用户登录，不代表我们不能执行root操作。下面我们专门创建一个新用户，在使用SSH登录之后可以切换到root。当然你以可以使用已有的用户。</p>
<p><strong>1、添加用户</strong></p>
<pre><code>adduser myssh</code></pre><p><strong>2、为用户设置密码</strong></p>
<pre><code>passwd myssh</code></pre><p><strong>3、把myssh用户添加到Wheel组里</strong></p>
<pre><code>usermod -a -G wheel myshh</code></pre><p>或，编辑/etc/group文件。</p>
<h2 id="重启SSH服务"><a href="#重启SSH服务" class="headerlink" title="重启SSH服务"></a>重启SSH服务</h2><pre><code>service sshd restart</code></pre><p>使用myssh用户登录之后，使用<code>su -</code>切换到root用户。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux:压缩和解压.bz2文件</title>
    <url>/archives/a6bd2dda.html</url>
    <content><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>1、如果没有安装，执行如下命令安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt update</span><br><span class="line"># apt install bzip2</span><br></pre></td></tr></table></figure>

<p><strong>2、使用bzip2压缩文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bzip2 filename&#x2F; </span><br><span class="line"># bzip2 -z filename</span><br></pre></td></tr></table></figure>
<p>上面命令执行后，会把原文件删除，如果要保留原文件，使用-k选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bzip2 -zk filename</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-f 选项强制覆盖已经存在的文件。</p>
</blockquote>
<p><strong>3、使用bzip2解压文件。(-d 选项解压)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bzip2 -d filename.bz2</span><br></pre></td></tr></table></figure>
<p>使用示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bzip2 -vfd filename.bz2</span><br></pre></td></tr></table></figure>

<p><strong>4、选项总结</strong></p>
<ul>
<li>-f 覆盖文件 </li>
<li>-v 可视化输出 </li>
<li>-k 保留原文件</li>
<li>-d 解压文件</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>bz2</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 查看软件安装与安装路径</title>
    <url>/archives/46bd345b.html</url>
    <content><![CDATA[<h2 id="查看软件是否安装"><a href="#查看软件是否安装" class="headerlink" title="查看软件是否安装"></a>查看软件是否安装</h2><p>以deb包安装的，可以用dpkg -l能看到。如果是查找指定软件包，用dpkg -l | grep “软件或者包的名字”：<br><code>dpkg -l | grep xyz</code></p>
<p>以yum方法安装的，可以用yum list installed查找，如果是查找指定包，命令后加 | grep “软件名或者包名：<br><code>yum list xyz</code></p>
<p>以rpm包安装的，可以用rpm -qa看到，如果要查找某软件包是否安装，用 rpm -qa | grep “软件或者包的名字”:<br><code>rpm -qa | grep xyz</code></p>
<h2 id="查看软件路径"><a href="#查看软件路径" class="headerlink" title="查看软件路径"></a>查看软件路径</h2><p><code>whereis nginx</code></p>
<ul>
<li>/usr/sbin/naginx —执行路径</li>
<li>/usr/lib64/nginx —安装路径</li>
<li>/etc/nginx/ — 配置路径</li>
<li>/usr/share/nginx —默认站点目录</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>kali 安装chrome后点击图标无反应</title>
    <url>/archives/1e2bfe60.html</url>
    <content><![CDATA[<p>是因为Google-Chrome不能以 root 运行的原因，解决方式如下：<br>用hexedit去编辑chrome文件，把<code>geteuid</code>改<code>getppid</code>。</p>
<a id="more"></a>

<ol>
<li><p>搜索并安装hexedit:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get hexedit</span><br></pre></td></tr></table></figure>
</li>
<li><p>用hexedit修改<code>/opt/google/chrome/chrome</code>文件,如果提示文件为只读，采用以下方法：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cp chrome &#x2F;root&#x2F;</span><br><span class="line"># hexedit &#x2F;root&#x2F;chrome</span><br></pre></td></tr></table></figure>
<p> 这样便可以修改/root/目录下的chrome了，打开chrome，按<a href="https://www.baidu.com/s?wd=Tab键&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="external nofollow noopener noreferrer">Tab键</a>，再按<code>Ctrl+s</code>搜索<code>geteuid</code>，找到后，直接输入<code>getppid</code>，将会覆盖掉<code>geteuid</code>，最后按<code>Ctrl+x</code>保存。</p>
<blockquote>
<p>注意：路径如果不同的话请自行使用<code>dpkg -c</code> 安装包来察看安装到哪里了。</p>
</blockquote>
</li>
<li><p>将<code>/root</code>目录下的chrome复制回<code>/opt/google/chrome/</code>，覆盖掉原来的chrome文件即可。打开chome，现在可以正常使用了。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali Linux：从 light 升级到完整版</title>
    <url>/archives/cee69b17.html</url>
    <content><![CDATA[<p>找了半天，我只找到了一个2G的U盘。<br>由于空间不足，安装不了Kali Linux的完整版（2.8G），只能安装Light（轻量）版（0.8G）。<br>Kali Linux Light版使用了轻量级的xfce桌面环境，自带的工具也不全。<br>那么，有没有办法升级到完整版呢？</p>
<a id="more"></a>


<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>1、安装<code>kali-linux-full</code>，包含各种工具</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install kali-linux-full</span><br></pre></td></tr></table></figure>

<p><strong>2、安装 GNOME3 桌面环境</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install kali-desktop-gnome</span><br></pre></td></tr></table></figure>

<p><strong>3、如果你想要卸载 Kali light 使用的 XFCE 桌面环境</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge kali-desktop-xfce</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>kali linux 2020配置</title>
    <url>/archives/d48e04a4.html</url>
    <content><![CDATA[<h2 id="更新软件源"><a href="#更新软件源" class="headerlink" title="更新软件源"></a>更新软件源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">deb http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-rolling main contrib non-free</span><br><span class="line">deb-src http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-rolling main contrib non-free</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali-rolling main contrib non-free</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali-rolling main contrib non-free</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kali kali-rolling main contrib non-free</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kali kali-rolling main contrib non-free</span><br><span class="line">EOF</span><br><span class="line">apt clean &#x2F;&#x2F;清理安装包</span><br><span class="line">apt update &#x2F;&#x2F;更新软件源</span><br><span class="line">apt upgrade &#x2F;&#x2F;更新安装</span><br></pre></td></tr></table></figure>

<h2 id="增加一个非-root-用户"><a href="#增加一个非-root-用户" class="headerlink" title="增加一个非 root 用户"></a>增加一个非 root 用户</h2><p>root 用户的权限太大，脑袋一短路容易搞挂系统，推荐平时用普通用户配合 sudo 操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd -m 52os &#x2F;&#x2F;增加用户</span><br><span class="line">passwd 52os &#x2F;&#x2F;设置用户密码</span><br><span class="line">usermod -a -G sudo 52os &#x2F;&#x2F;把新用户加入sudo组</span><br></pre></td></tr></table></figure>

<h2 id="语言设置中文"><a href="#语言设置中文" class="headerlink" title="语言设置中文"></a>语言设置中文</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">备份原配置：</span><br><span class="line">mv &#x2F;etc&#x2F;default&#x2F;locale &#x2F;etc&#x2F;default&#x2F;locale.backup&#96;date &quot;+%Y%m%d&quot;&#96;</span><br><span class="line">查看现在的系统语言环境：</span><br><span class="line">echo $LANG</span><br><span class="line">locale</span><br><span class="line">修改配置：</span><br><span class="line">vi &#x2F;etc&#x2F;default&#x2F;locale</span><br><span class="line">修改后的配置：</span><br><span class="line">    LANG&#x3D;&quot;zh_CN.UTF-8&quot;</span><br><span class="line">    LANGUAGE&#x3D;&quot;zh_CN:zh&quot;</span><br><span class="line">    LC_ALL&#x3D;&quot;zh_CN.UTF-8&quot;</span><br><span class="line">修改后立刻生效：</span><br><span class="line">source &#x2F;etc&#x2F;default&#x2F;locale</span><br><span class="line">查看是否生效：</span><br><span class="line">echo $LANG</span><br><span class="line">locale</span><br></pre></td></tr></table></figure>

<h2 id="设置中文字体"><a href="#设置中文字体" class="headerlink" title="设置中文字体"></a>设置中文字体</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg-reconfigure locales &#x2F;&#x2F;设置编码字体为：zh_CN.UTF-8,en_US.UTF-8,zh_CN.GBK </span><br><span class="line">#安装中文字体,解决中文乱码</span><br><span class="line">apt-get install xfonts-intl-chinese</span><br><span class="line">apt-get install ttf-wqy-microhei</span><br><span class="line">reboot &#x2F;&#x2F;重启</span><br></pre></td></tr></table></figure>

<h2 id="区域设置"><a href="#区域设置" class="headerlink" title="区域设置"></a>区域设置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;^# zh_CN.UTF-8 UTF-8&#x2F;zh_CN.UTF-8 UTF-8&#x2F;g&#39; &#x2F;etc&#x2F;locale.gen</span><br><span class="line">locale-gen</span><br><span class="line">localectl set-locale zh_CN.UTF-8</span><br><span class="line">echo &#39;LANG&#x3D;zh_CN.UTF-8&#39; &gt;&#x2F;etc&#x2F;locale.conf</span><br><span class="line">timedatectl set-timezone Asia&#x2F;Shanghai</span><br></pre></td></tr></table></figure>

<h2 id="配置sshd服务实现远程登录"><a href="#配置sshd服务实现远程登录" class="headerlink" title="配置sshd服务实现远程登录"></a>配置sshd服务实现远程登录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#打开配置文件</span><br><span class="line">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line"></span><br><span class="line">#修改配置文件</span><br><span class="line">将 #PermitRootLogin prohibit-password 修改为 PermitRootLogin yes</span><br><span class="line"></span><br><span class="line">#重启服务</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ssh restart</span><br><span class="line"></span><br><span class="line">#查看ssh运行状态：</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ssh status</span><br><span class="line"></span><br><span class="line">#检查是否重启成功 显示0表示重启成功</span><br><span class="line">echo $?</span><br><span class="line">0 </span><br><span class="line"></span><br><span class="line">#检查22端口是否运行</span><br><span class="line">sudo lsof -i :22</span><br><span class="line">COMMAND   PID USER   FD   TYPE DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class="line">sshd    17077 root    3u  IPv4 218681      0t0  TCP *:ssh (LISTEN)</span><br><span class="line">sshd    17077 root    4u  IPv6 218683      0t0  TCP *:ssh (LISTEN)</span><br><span class="line"></span><br><span class="line">#配置开机启动ssh</span><br><span class="line">systemctl enable ssh.service 或 update-rc.d ssh enable</span><br><span class="line"></span><br><span class="line">#远程链接</span><br><span class="line">ssh 用户名@ip</span><br></pre></td></tr></table></figure>


<h2 id="samba配置"><a href="#samba配置" class="headerlink" title="samba配置"></a>samba配置</h2><p>kali默认已经安装了samba服务程序，但是并没有设置开机启动。<br><strong>配置文件修改</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">备份配置文件：</span><br><span class="line">cp &#x2F;etc&#x2F;samba&#x2F;smb.conf &#x2F;etc&#x2F;samba&#x2F;smb.conf.backup&#96;date &quot;+%Y%m%d&quot;&#96;</span><br><span class="line"></span><br><span class="line">修改配置文件：&#x2F;etc&#x2F;samba&#x2F;smb.conf</span><br><span class="line">vi &#x2F;etc&#x2F;samba&#x2F;smb.conf</span><br><span class="line">下面是具体配置内容：</span><br><span class="line">[global]</span><br><span class="line">    map to guest &#x3D; Bad User</span><br><span class="line">[Share]</span><br><span class="line">    path &#x3D; &#x2F;root&#x2F;Public</span><br><span class="line">    public &#x3D; yes</span><br><span class="line">    writable &#x3D; yes</span><br><span class="line">    available &#x3D; yes</span><br><span class="line">    browseable &#x3D; yes</span><br><span class="line">需要修改samba的根目录的权限设置为777，否则不能匿名登录：</span><br><span class="line">chmode 777 &#x2F;root&#x2F;Public</span><br></pre></td></tr></table></figure>

<p><strong>启动samba</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;smbd start</span><br><span class="line">#或</span><br><span class="line">systemctl start smdb.service</span><br></pre></td></tr></table></figure>

<p><strong>开机自启动</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update-rc.d smbd enable</span><br><span class="line">#或</span><br><span class="line">systemctl enable smdb.service</span><br></pre></td></tr></table></figure>

<h2 id="安装open-vm-tools"><a href="#安装open-vm-tools" class="headerlink" title="安装open-vm-tools"></a>安装open-vm-tools</h2><p>kali2.0后安装VMWare自带的vmtools是不起作用的，得安装open-vm-tools-desktop</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install -y open-vm-tools-desktop open-vm-tools &#x2F;&#x2F;安装</span><br><span class="line">reboot &#x2F;&#x2F;重启</span><br></pre></td></tr></table></figure>
<p><strong>注意事项</strong></p>
<ol>
<li>如果要实现文件夹共享，需要安装 <code>open-vm-tools-dkms</code></li>
<li>桌面环境还需要安装 <code>open-vm-tools-desktop</code> 以支持双向拖放文件</li>
<li>Arch Linux 用户如果需要双向拖放文件，还需要安装 <code>gtkmm</code> 和 <code>gtkmm3</code><h2 id="用Open-VM-tools替代VMware-Tools"><a href="#用Open-VM-tools替代VMware-Tools" class="headerlink" title="用Open-VM-tools替代VMware Tools"></a>用Open-VM-tools替代VMware Tools</h2></li>
</ol>
<h2 id="安装Remmina"><a href="#安装Remmina" class="headerlink" title="安装Remmina"></a>安装Remmina</h2><p>远程桌面连接Windows桌面的应用程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install remmina</span><br></pre></td></tr></table></figure>

<h2 id="安装输入法"><a href="#安装输入法" class="headerlink" title="安装输入法"></a>安装输入法</h2><p>搜狗输入法Debian系统安装包网址：<a href="https://pinyin.sogou.com/linux/" target="_blank" rel="external nofollow noopener noreferrer">https://pinyin.sogou.com/linux/</a><br>可以下载到windows系统本地然后通过samba服务传入kali或者直接通过鼠标拖拉至kali系统的頕。<br><strong>安装搜狗拼音输入法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install fcitx -y</span><br><span class="line">apt --fix-broken install </span><br><span class="line">dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</span><br></pre></td></tr></table></figure>

<p><strong>安装五笔输入法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install -y fcitx fcitx-table-wubi</span><br></pre></td></tr></table></figure>

<p><strong>安装谷歌输入法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install fcitx</span><br><span class="line">apt --fix-broken install</span><br><span class="line">apt-get install fcitx-googlepinyin</span><br><span class="line">im-config #选择fcitx</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h2 id="配置静态IP"><a href="#配置静态IP" class="headerlink" title="配置静态IP"></a>配置静态IP</h2><p>以网卡名为eth0为例（不是eth0将以下eth0替换即可）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; &#x2F;etc&#x2F;network&#x2F;interfaces.d&#x2F;ifcfg-eth0 &lt;&lt; EOF</span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.220.129</span><br><span class="line">gateway 192.168.220.1</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="修改DNS"><a href="#修改DNS" class="headerlink" title="修改DNS"></a>修改DNS</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#编辑文件</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;resolv.conf &lt;&lt; EOF</span><br><span class="line">#添加DNS</span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="设置免密码执行sudo"><a href="#设置免密码执行sudo" class="headerlink" title="设置免密码执行sudo"></a>设置免密码执行sudo</h2><p>首先设置root密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>
<p>然后将用户添加到<code>/etc/sudoers</code>文件中。我这里用的是默认用户kali，如果你是自己安装的系统，将这里改为你设置的用户名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;kali ALL&#x3D;(ALL:ALL) NOPASSWD: ALL&#39; &gt;&gt;&#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure>
<p>接下来一些命令可能要在root下执行，用下面的命令切换到root用户，Ctrl+D退出root用户。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure>

<h2 id="配置ohmyzsh"><a href="#配置ohmyzsh" class="headerlink" title="配置ohmyzsh"></a>配置ohmyzsh</h2><p>如果你有代理的话，还可以顺便配置一下ohmyzsh。如果没有的话，就不用试了。下面的命令基本一条也执行不成功。<br>首先设置代理环境变量，假设代理是<code>localhost:10800</code>。顺便提一下，这里的配置是用户级别的配置，所以不需要root账户，直接使用当前用户运行命令即可，自然也不需要加<code>sudo</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;localhost:10800</span><br><span class="line">export https_proxy&#x3D;http:&#x2F;&#x2F;localhost:10800</span><br></pre></td></tr></table></figure>

<p>然后就可以配置antigen+ohmyzsh+powerline10k主题了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置用户Shell</span><br><span class="line">chsh -s &#x2F;bin&#x2F;zsh</span><br><span class="line"></span><br><span class="line"># 安装antigen和ohmyzsh</span><br><span class="line">curl -L git.io&#x2F;antigen &gt;.antigen.zsh</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;techstay&#x2F;dotfiles&#x2F;master&#x2F;zsh&#x2F;.zshrc</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;techstay&#x2F;dotfiles&#x2F;master&#x2F;zsh&#x2F;.p10k.zsh</span><br></pre></td></tr></table></figure>
<p>这时候如果你手动输入<code>zsh</code>进入ZShell，可能会发现出现了乱码。因为powerline10k是一个启用了powerline字体的主题，所以我们还需要下载安装powerline字体，这里推荐Meslo字体。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;ryanoasis&#x2F;nerd-fonts&#x2F;releases&#x2F;download&#x2F;v2.1.0&#x2F;Meslo.zip</span><br><span class="line">unzip Meslo.zip</span><br><span class="line">rm Meslo.zip</span><br><span class="line">mkdir -p ~&#x2F;.fonts</span><br><span class="line">mv Meslo* ~&#x2F;fonts</span><br><span class="line">fc-cache -f</span><br></pre></td></tr></table></figure>
<p>全部配置完成之后，就可以<code>sudo reboot now</code>重启系统了。系统重启之后，应该就可以看到类似下图的Shell界面了。菜单等全部汉化了，shell也改为了zsh，带有自动补全、提示等功能。这样，我们就可以用Kali开始搞事情了。</p>
<h2 id="修改家目录为英文"><a href="#修改家目录为英文" class="headerlink" title="修改家目录为英文"></a>修改家目录为英文</h2><p><strong>方法1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开终端，在终端中输入命令:</span><br><span class="line">export LANG&#x3D;en_US</span><br><span class="line">xdg-user-dirs-gtk-update</span><br><span class="line">跳出对话框询问是否将目录转化为英文路径,同意并关闭.</span><br><span class="line">在终端中输入命令:</span><br><span class="line">export LANG&#x3D;zh_CN</span><br><span class="line">关闭终端，并重启，下次进入系统，系统会提示是否把转化好的目录改回中文。选择不再提示，并取消修改。主目录的中文转英文就完成了。</span><br></pre></td></tr></table></figure>

<p><strong>方法2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.config&#x2F;user-dirs.dirs</span><br><span class="line">将如下</span><br><span class="line">XDG_DESKTOP_DIR&#x3D;&quot;$HOME&#x2F;桌面&quot;</span><br><span class="line">XDG_DOWNLOAD_DIR&#x3D;&quot;$HOME&#x2F;下载&quot;</span><br><span class="line">XDG_TEMPLATES_DIR&#x3D;&quot;$HOME&#x2F;模板&quot;</span><br><span class="line">XDG_PUBLICSHARE_DIR&#x3D;&quot;$HOME&#x2F;公共&quot;</span><br><span class="line">XDG_DOCUMENTS_DIR&#x3D;&quot;$HOME&#x2F;文档&quot;</span><br><span class="line">XDG_MUSIC_DIR&#x3D;&quot;$HOME&#x2F;音乐&quot;</span><br><span class="line">XDG_PICTURES_DIR&#x3D;&quot;$HOME&#x2F;图片&quot;</span><br><span class="line">XDG_VIDEOS_DIR&#x3D;&quot;$HOME&#x2F;视频&quot;</span><br><span class="line">修改如下，然后保存重启即可</span><br><span class="line">XDG_DESKTOP_DIR&#x3D;&quot;$HOME&#x2F;Desktop&quot;</span><br><span class="line">XDG_DOWNLOAD_DIR&#x3D;&quot;$HOME&#x2F;Downloads&quot;</span><br><span class="line">XDG_TEMPLATES_DIR&#x3D;&quot;$HOME&#x2F;Templates&quot;</span><br><span class="line">XDG_PUBLICSHARE_DIR&#x3D;&quot;$HOME&#x2F;Public&quot;</span><br><span class="line">XDG_DOCUMENTS_DIR&#x3D;&quot;$HOME&#x2F;Documents&quot;</span><br><span class="line">XDG_MUSIC_DIR&#x3D;&quot;$HOME&#x2F;Music&quot;</span><br><span class="line">XDG_PICTURES_DIR&#x3D;&quot;$HOME&#x2F;Pictures&quot;</span><br><span class="line">XDG_VIDEOS_DIR&#x3D;&quot;$HOME&#x2F;Videos&quot;</span><br></pre></td></tr></table></figure>

<h2 id="sudo-python-找不到命令问题"><a href="#sudo-python-找不到命令问题" class="headerlink" title="sudo: python 找不到命令问题"></a>sudo: python 找不到命令问题</h2><p>这个问题是链接失效导致</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">which python</span><br><span class="line">which python2</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;python2</span><br><span class="line">ln -s &#x2F;usr&#x2F;bin&#x2F;python2.7 &#x2F;usr&#x2F;bin&#x2F;python</span><br></pre></td></tr></table></figure>

<h2 id="安装谷歌浏览器"><a href="#安装谷歌浏览器" class="headerlink" title="安装谷歌浏览器"></a>安装谷歌浏览器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install chromium &#x2F;&#x2F;安装谷歌浏览器 </span><br><span class="line">apt-get install chromium-l10n &#x2F;&#x2F;安装中文包</span><br><span class="line">reboot &#x2F;&#x2F;重启</span><br></pre></td></tr></table></figure>

<h2 id="Firefox-ESR-汉化问题"><a href="#Firefox-ESR-汉化问题" class="headerlink" title="Firefox ESR 汉化问题"></a>Firefox ESR 汉化问题</h2><p>Kali Linux自带的浏览器，虽然系统语言已经是简体中文，但是这个浏览器依然是英文，强迫症可以执行一下命令手动安装汉化包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install firefox-esr-l10n-zh-cn &#x2F;&#x2F;安装火狐浏览器汉化组件</span><br></pre></td></tr></table></figure>

<h2 id="Gdebi"><a href="#Gdebi" class="headerlink" title="Gdebi"></a>Gdebi</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install gdebi -y &#x2F;&#x2F;安装.deb软件包的工具，可以自动解决安装包的依赖问题</span><br></pre></td></tr></table></figure>

<h2 id="WPScan"><a href="#WPScan" class="headerlink" title="WPScan"></a>WPScan</h2><p>WPScan是一款免费的，用于非商业用途的黑盒WordPress漏洞扫描工具。因为国内特殊原因，更新漏洞库的时候需要挂代理才可以顺利更新。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wpscan --version &#x2F;&#x2F;版本查看</span><br><span class="line">proxychains wpscan --update &#x2F;&#x2F;更新漏洞库</span><br><span class="line">wpscan --url http:&#x2F;&#x2F;xxx.com &#x2F;&#x2F;基本检测</span><br></pre></td></tr></table></figure>

<h2 id="解决安装进程占用（无法获得锁-var-lib-apt-lists-lock-open-11-资源暂时不可用-）"><a href="#解决安装进程占用（无法获得锁-var-lib-apt-lists-lock-open-11-资源暂时不可用-）" class="headerlink" title="解决安装进程占用（无法获得锁 /var/lib/apt/lists/lock - open (11: 资源暂时不可用)）"></a>解决安装进程占用（无法获得锁 /var/lib/apt/lists/lock - open (11: 资源暂时不可用)）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;删除掉lock锁文件</span><br><span class="line">rm &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;lock</span><br><span class="line">rm &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock</span><br><span class="line">apt-get update &#x2F;&#x2F;更新软件源</span><br><span class="line">apt-get list --upgradable | grep software &#x2F;&#x2F;检测某个软件是否有更新</span><br><span class="line">apt-get install software &#x2F;&#x2F;更新软件</span><br><span class="line">apt-get upgrade &#x2F;&#x2F;升级所有软件</span><br><span class="line">apt-get dist-upgrade &#x2F;&#x2F;可以自动解决依赖问题，一般不建议使用</span><br></pre></td></tr></table></figure>

<h2 id="修复-vlc-无法用-root-运行"><a href="#修复-vlc-无法用-root-运行" class="headerlink" title="修复 vlc 无法用 root 运行"></a>修复 vlc 无法用 root 运行</h2><p>vlc 和 chrome 一样默认无法用 root 运行，在 root 下，即使在命令行用 su 命令切换到普通用户仍然无法运行 vlc，当然你可以注销登陆普通用户运行，但是太麻烦，修复方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;usr&#x2F;bin&#x2F;vlc &#x2F;usr&#x2F;bin&#x2F;vlc.bak  #备份</span><br><span class="line">vim &#x2F;usr&#x2F;bin&#x2F;vlc</span><br><span class="line">搜索geteuid，将其替换为getppid，保存退出即可</span><br></pre></td></tr></table></figure>


<h2 id="ssr配置-实现科学上网"><a href="#ssr配置-实现科学上网" class="headerlink" title="ssr配置 实现科学上网"></a>ssr配置 实现科学上网</h2><p>wget <a href="https://onlyless.github.io/ssr" target="_blank" rel="external nofollow noopener noreferrer">https://onlyless.github.io/ssr</a><br>mv ssr /usr/local/bin<br>chmod 766 /usr/local/bin/ssr<br>ssr install<br>cd /usr/local/share/shadowsocksr/</p>
<h2 id="proxychains-终端命令行代理神器，科学上网，内网穿透渗透必备"><a href="#proxychains-终端命令行代理神器，科学上网，内网穿透渗透必备" class="headerlink" title="proxychains(终端命令行代理神器，科学上网，内网穿透渗透必备)"></a>proxychains(终端命令行代理神器，科学上网，内网穿透渗透必备)</h2><p>echo “127.0.0.1 1080” &gt;&gt; /etc/proxychains.conf<br>验证下代理能否访问Google： <code>proxychains curl https://www.google.com.hk</code></p>
<h2 id="Git代理的设置和取消"><a href="#Git代理的设置和取消" class="headerlink" title="Git代理的设置和取消"></a>Git代理的设置和取消</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#我这里习惯用1080端口 具体根据自己的配置来灵活设置</span><br><span class="line">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br><span class="line">git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br><span class="line">#取消git代理</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>kali linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali Linux 2019.2 U盘启动出现“ Failed to load ldlinux.c32” 解决方法</title>
    <url>/archives/bf66fd08.html</url>
    <content><![CDATA[<p>我有一台 ThinkPad T400 电脑。想安装一个 Kali Linux 2019.2 系统，用 UltraISO 制作的启动盘，U盘启动时出现 “Failed to load ldlinux.c32” 。</p>
<a id="more"></a>


<h2 id="环境需求"><a href="#环境需求" class="headerlink" title="环境需求"></a>环境需求</h2><ul>
<li>容量8G的U盘</li>
<li>Kali linux 2019.2 镜像文件</li>
<li>时间和耐心</li>
<li>UltraISO</li>
</ul>
<h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><p>利用UltraISO制作了Kali linux 2019.2的U盘启动，开机F12键USB启动时出现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Failed to load ldlinux.c32</span><br><span class="line">Boot failed: please change disks and press a key to continue</span><br></pre></td></tr></table></figure>

<h2 id="解决问题过程："><a href="#解决问题过程：" class="headerlink" title="解决问题过程："></a>解决问题过程：</h2><ol>
<li>在网上查询了很多，进行了很多次尝试。</li>
<li>换了其他软件制作U盘启动，失败。</li>
<li>换了其它发行版最新的系统镜像，失败。</li>
<li>安装 Ubuntu 12.04 LTS 系统镜像，成功。可以正常升级到最新版本(TLS)Ubuntu 18.04。</li>
<li>猜测是不是制作启动时写入方式有问题，尝试了多个写入方式（USB-HDD、USB-HDD+、USB-ZIP），失败。</li>
<li>最后尝试选择 RAW 写入方式，问题解决，U盘启动顺利启动。</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali Linux 2019.2 （中文）安装后的配置</title>
    <url>/archives/93b02f07.html</url>
    <content><![CDATA[<p>话不多说，直接上干货。<br>打开终端，接下来的操作大部分依赖终端操作。</p>
<a id="more"></a>

<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>1、添加软件源</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line"># 中科大源</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali-rolling main</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali-rolling main</span><br><span class="line"></span><br><span class="line"># 阿里源</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kali kali-rolling main</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kali kali-rolling main</span><br><span class="line"></span><br><span class="line"># 官方源</span><br><span class="line">deb http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-rolling main</span><br><span class="line">deb-src http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-rolling main</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><strong>2、更新系统</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update </span><br><span class="line">apt-get upgrade -y</span><br></pre></td></tr></table></figure>

<p><strong>3、安装网易云音乐</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget http:&#x2F;&#x2F;d1.music.126.net&#x2F;dmusic&#x2F;netease-cloud-music_1.2.1_amd64_ubuntu_20190428.deb</span><br><span class="line">dpkg -i netease-cloud-music_1.2.1_amd64_ubuntu_20190428.deb</span><br></pre></td></tr></table></figure>

<p><strong>4、安装中文输入法(五笔)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install fcitx fcitx-table-wubi</span><br><span class="line">reboot</span><br><span class="line">fcitx-configtool</span><br></pre></td></tr></table></figure>

<p><strong>5、安装 Typora ( Markdown编辑器 )</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;typora.io&#x2F;linux&#x2F;typora_0.9.70_amd64.deb</span><br><span class="line">dpkg -i typora_0.9.70_amd64.deb</span><br></pre></td></tr></table></figure>
<blockquote>
<p>不要尝试去更新 Typora ,最新的几个测试版都不支持 Kali Linux。</p>
</blockquote>
<p><strong>6、汉化 Kali Linux 自带的 FireFox 浏览器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get -y install firefox-esr-l10n-zh-cn</span><br></pre></td></tr></table></figure>

<p>打开 FireFox 浏览器，点击右上角的菜单 - Preferences - Languages - 添加Chinese/China [zh-cn] - OK - 重启浏览器</p>
<p><strong>7、安装 shadowsocks 配置 proxychains 实现科学上网</strong></p>
<ul>
<li><p>安装 shadowsocks</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure></code></pre></li>
<li><p>配置 shadowsocks</p>
<pre><code>cat &lt;&lt;EOF&gt;&gt; /root/assconfig.json
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      &quot;server&quot;: &quot;服务器ip地址&quot;,</span><br><span class="line">      &quot;server_port&quot;: 服务器端口,</span><br><span class="line">      &quot;password&quot;: &quot;密码&quot;,</span><br><span class="line">      &quot;method&quot;: &quot;加密方式&quot;,</span><br><span class="line">      &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">      &quot;local_port&quot;:1080,</span><br><span class="line">      &quot;timeout&quot;: 300</span><br><span class="line">&#125; </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></code></pre></li>
<li><p>Socks转HTTP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;proxychains.conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将其中 socks4 127.0.0.1 那一行换成 socks5 127.0.0.1 1080  （一般是最后一行）</p>
</blockquote>
</li>
</ul>
<ul>
<li>编辑 openssl.py 文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;shadowsocks&#x2F;crypto&#x2F;openssl.py</span><br></pre></td></tr></table></figure>
<blockquote>
<p>: set nu 可在 vim 显示行号</p>
</blockquote>
<p>将第52行 libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)</p>
<p>改为libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)</p>
<p>再次搜索cleanup（全文件共2处，此处位于111行),</p>
<p>将libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx)</p>
<p>改为libcrypto.EVP_CIPHER_CTX_reset(self._ctx)</p>
<p>也就是修改两个cleanup函数改为两个reset函数。</p>
<blockquote>
<p>: wq 保存并退出。 </p>
</blockquote>
<ul>
<li>测试<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;usr&#x2F;lib&#x2F;proxychains3&#x2F;proxyresolv &#x2F;usr&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxyresolv www.google.com</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果出现 timeout ,首先检查 ss 设置开了没有，如果没有请打开。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sslocal -c assconfig.json</span><br></pre></td></tr></table></figure>
<p>再次进行测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxyresolv www.google.com</span><br></pre></td></tr></table></figure>

<p>使用以下格式打开应用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains firefox</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习笔记</title>
    <url>/archives/3c3cdb74.html</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol>
<li><p>设置账户名和账户邮箱</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;name&quot;</span><br><span class="line">git config --global user.email &quot;name@gmail.com</span><br><span class="line">git config --global http.proxy http:&#x2F;&#x2F;example.com:port</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证账户名和账户邮箱</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init  #会生成 .git 文件夹，关于这个仓库的配置</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加文件及文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add name</span><br><span class="line"># 添加所有文件</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加描述(必须添加)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;hello world&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看修改的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff -- filename</span><br></pre></td></tr></table></figure>
</li>
<li><p>撤销修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout filename</span><br></pre></td></tr></table></figure>
</li>
<li><p>撤销修改(针对GIT ADD提交之后的)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD filename</span><br><span class="line">git checkout filename</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看提交记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line">git log logid -1 -p</span><br><span class="line"># -1  表示只看到上面的一条记录</span><br><span class="line"># -p 表示查看这条记录的所有信息</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin github仓库地址</span><br><span class="line"># 如遇&quot;fatal: remote origin already exists.&quot;此问题</span><br><span class="line"># 输入 git remote rm origin</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
</li>
<li><p>分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看分支</span><br><span class="line">git branch</span><br><span class="line">#当前分支前面会有一个*</span><br><span class="line">#创建分支</span><br><span class="line">git branch version1.0</span><br><span class="line">#切换分支</span><br><span class="line">git checkout version1.0</span><br><span class="line">#将version1.0同步到当前分支</span><br><span class="line">git merge version1.0</span><br><span class="line">#删除分支</span><br><span class="line">git branch -D version1.0</span><br><span class="line">#克隆远程项目</span><br><span class="line">git clone git@github.com:name&#x2F;项目名.git</span><br><span class="line">#将当前修改上传到服务器</span><br><span class="line">git push origin master</span><br><span class="line">#将远程修改同步到本地</span><br><span class="line">git fetch origin master</span><br><span class="line">#注：此方法不会将修改同步到当前分支，而是会同步到origin&#x2F;master分支上，需要使用git merge origin&#x2F;master同步到当前分支</span><br><span class="line">git pull origin master</span><br><span class="line">#此方法是fetch和merge两者的合并</span><br></pre></td></tr></table></figure>
</li>
<li><p>其他</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建密钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;name@gmail.com&quot;</span><br><span class="line">#将公钥添加到github</span><br><span class="line">cat .ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>gem使用手册</title>
    <url>/archives/82c0e10f.html</url>
    <content><![CDATA[<p>从网络上搜集来的，分享给大家。</p>
<h2 id="为什么用"><a href="#为什么用" class="headerlink" title="为什么用"></a>为什么用</h2><blockquote>
<p>gem 是Ruby 的一个包管理器</p>
</blockquote>
<h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ruby -v #查看 ruby 版本</span><br><span class="line">gem -v #查看 gem 版本</span><br></pre></td></tr></table></figure>

<h2 id="源的管理"><a href="#源的管理" class="headerlink" title="源的管理"></a>源的管理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#列出源</span><br><span class="line">gem source -l</span><br><span class="line"></span><br><span class="line">#添加源</span><br><span class="line">gem source -a https:&#x2F;&#x2F;gems.ruby-china.www&#x2F;</span><br><span class="line">gem source -a https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;rubygems&#x2F;</span><br><span class="line"></span><br><span class="line">#删除源</span><br><span class="line">gem source -r https:&#x2F;&#x2F;rubygems.org&#x2F;</span><br><span class="line"></span><br><span class="line">#删除所有源</span><br><span class="line">gem source --clear-all</span><br><span class="line"></span><br><span class="line">#更新源</span><br><span class="line">gem source -u</span><br></pre></td></tr></table></figure>

<h2 id="包的管理"><a href="#包的管理" class="headerlink" title="包的管理"></a>包的管理</h2><h3 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem build jekyll.gemspec #把jekyll.gemspec编译成jekyll.gem</span><br></pre></td></tr></table></figure>

<h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem install -l jekyll.gem #安装jekyll,从本地</span><br><span class="line">gem install jekyll #安装jekyll,从gem源</span><br><span class="line">gem install jekyll #安装jekyll,从远程服务器</span><br><span class="line">gem install jekyll -v 4.0.0 #安装jekyll指定版本</span><br></pre></td></tr></table></figure>

<h3 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem update --system #更新gem自身</span><br><span class="line">gem update #更新已经安装的所有包</span><br><span class="line">gem update jekyll #更新指定包</span><br><span class="line">gem cleanup #清除所有包旧版本，保留最新版本</span><br></pre></td></tr></table></figure>

<h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem uninstall jekyll #卸载jekyll</span><br><span class="line">gem uninstall jekyll --version&#x3D;[ver] #卸载指定版本jekyll</span><br></pre></td></tr></table></figure>

<h3 id="查看包"><a href="#查看包" class="headerlink" title="查看包"></a>查看包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem environment #查看安装环境</span><br><span class="line">gem list --local #查看本机已经安装的所有包</span><br><span class="line">gem contents jekyll #显示jekyll包中所包含的文件</span><br><span class="line">gem dependency jekyll -v 4.0.0 #列出与jekyll相互依赖的包</span><br><span class="line">gem query -n &#39;&#39;[0-9]&#39;&#39; --local #查找本地含有数字的包</span><br><span class="line">gem search log --both #从本地和远程服务器上查找含有log字符串的包</span><br><span class="line">gem search log --remoter 从远程服务器上查找含有log字符串的包</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>dpkg命令的用法</title>
    <url>/archives/a1571737.html</url>
    <content><![CDATA[<p>dpkg 是Debian Package的简写，为Debian操作系统专门开发的套件管理系统，用于软件的安装、更新和移除。</p>
<a id="more"></a>


<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol>
<li><p>安装软件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -i ~&#x2F;package.deb</span><br></pre></td></tr></table></figure>
</li>
<li><p>列出与该包关联的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -L package</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示软件包的版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -l package</span><br></pre></td></tr></table></figure>
</li>
<li><p>移除软件包（保留配置）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -r package</span><br></pre></td></tr></table></figure>
</li>
<li><p>移除软件包 （不保留配置）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -P package</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看软件包的详细信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -s package</span><br></pre></td></tr></table></figure>
</li>
<li><p>列出deb包的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -c package.deb</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>dpkg</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian系统老版本iso镜像下载</title>
    <url>/archives/b2adb537.html</url>
    <content><![CDATA[<p>debian官方默认只提供最新的版本下载，有时需要找一些旧的版本的debian，着实费用。下面这个debian iso镜像站可以下载各个版本的debian下载：<a href="http://cdimage.debian.org/cdimage/archive/" target="_blank" rel="external nofollow noopener noreferrer">debian 系统各个版本ISO下载链接</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian修改系统语言-从英语改成汉语</title>
    <url>/archives/d639a0f.html</url>
    <content><![CDATA[<p>由于安装的是英文版Debian 。我英语水平不怎么好，因此需要将默认语言改为中文。这篇文章向大家介绍如何将 Debian10Buster的语言从英文更改为中文。</p>
<a id="more"></a>


<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol>
<li>打开终端并登录 <strong>root</strong> 用户。</li>
<li>使用 <strong>nano</strong> 文本编辑器打开 <code>/etc/locale.gen</code> 文件。</li>
<li>如果你在安装的Debian10系统时将语言环境设为美国英语，在这个文件中：<code>en_US.UTF-8 UTF-8</code> 行首没有 <code>#</code> 符号。</li>
<li>要添加中文语言支持，找到 <strong>zh_CN</strong> 开头的那几行。在行首把这几行的 <code>#</code> 符号去掉。</li>
<li>保存文件后，在终端执行 <strong>locale-gen</strong> 命令。</li>
<li>打开Gnome设置面板，选择<strong>Region &amp; Language</strong>，双击<strong>Language</strong>，选择<strong>汉语</strong>。</li>
<li>重新登录 Debian10 系统。你将会看见<strong>将标准文件夹更新到当前语言吗？</strong>对话框。它是问你要不要将home目录下文件夹的语言也更改成中文。我的建议是这些文件夹要使用英文。所以点击<strong>保留旧的名称</strong>。</li>
</ol>
<p>现在Debian的界面语言是中文了，但是有些程序如iceweasal, icedove, libreoffice等需要安装专门的中文语言包。输入下面的命令为这些程序安装中文语言包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install -y \</span><br><span class="line">	chromium-l10n icedove-l10n-zh-cn \</span><br><span class="line">	iceowl-l10n-zh-cn iceweasel-l10n-zh-cn \</span><br><span class="line">	libreoffice-help-zh-cn libreoffice-l10n-zh-cn \</span><br><span class="line">	debian-faq-zh-cn kicad-doc-zh-cn \</span><br><span class="line">	openvanilla-imgeneric-data-zh-cn \</span><br><span class="line">	texlive-lang-chinese</span><br></pre></td></tr></table></figure>

<p>完成以上操作，Debian10汉化工作完成。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian安装Mate桌面环境的方法</title>
    <url>/archives/a6f4da70.html</url>
    <content><![CDATA[<p>Debian安装时是可以选择桌面环境的，选择有：gnome, xfce, lxde, kde, mate, cinnamon等。</p>
<p>本文针对的是已安装选择mate以外的桌面环境，想尝试体能mate桌面环境的linux debian 使用者。</p>
<p>mate是一个轻量级的桌面环境，占用系统资源非常少，正常使用下，大约占300MB左右，界面做得非常漂亮，本人十分喜爱，也是我最喜欢的桌面环境。安装了其他桌面(如：gnome) 后，怎么安装mate?</p>
<a id="more"></a>

<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>1、按下快捷键ctrl+alt+T，在终端输入出面命令安装mate桌面环境</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install task-mate-desktop</span><br></pre></td></tr></table></figure>

<p><strong>2、完全安装mate及其扩展部分</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install mate-desktop-environment-extras</span><br></pre></td></tr></table></figure>
<p>执行命令后，网速不慢的，几分钟完事，注销选择mate，进入后即是mate了。</p>
<p><strong>3、切换桌面环境</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update-alternatives --config x-session-manager</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>mate</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian：让VMware虚拟机科学上网</title>
    <url>/archives/42507137.html</url>
    <content><![CDATA[<h2 id="本文适用于"><a href="#本文适用于" class="headerlink" title="本文适用于"></a>本文适用于</h2><ol>
<li>Windows已经可以科学上网</li>
<li>新建Linux虚拟机，让虚拟机系统也能科学上网</li>
</ol>
<h2 id="环境版本"><a href="#环境版本" class="headerlink" title="环境版本"></a>环境版本</h2><ul>
<li>Windows10</li>
<li>Debian10 Buster</li>
<li>ShadowsocksR-4.7.0-win</li>
</ul>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol>
<li>设置本地代理（<strong>鼠标右击-选项设置-允许来自局域网的连接-本地端口1080</strong>）</li>
<li>查看<strong>Windows10</strong>系统主机IP地址（<code>ipconfig</code>）</li>
<li>确保虚拟机Linux系统可以跟主机Windwos系统正常<code>ping</code>通</li>
<li>在虚拟机Linux系统打开终端，编辑 <code>~/.bashrc</code> 文件，追加如下内容 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;win_ip:1080</span><br><span class="line">export https_proxy&#x3D;http:&#x2F;&#x2F;win_ip:1080</span><br><span class="line">export ftp_proxy&#x3D;http:&#x2F;&#x2F;win_ip:1080</span><br></pre></td></tr></table></figure></li>
<li>重新加载文件（<code>source ~/.bashrc</code>）</li>
<li>检测代理是否生效（<code>curl baidu.com &amp;&amp; curl google.com</code>）</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>linux：最有用的apt-get命令详解</title>
    <url>/archives/c4cc6c2d.html</url>
    <content><![CDATA[<p>apt-get是Debian、Ubuntu、Linux Mint、elementary OS、Kali Linux等Linux发行版的默认软件包管理器。本篇文章将介绍最一些实用的apt-get命令详解。</p>
<a id="more"></a>

<h2 id="从软件仓库中安装软件包"><a href="#从软件仓库中安装软件包" class="headerlink" title="从软件仓库中安装软件包"></a>从软件仓库中安装软件包</h2><h3 id="apt-get-update"><a href="#apt-get-update" class="headerlink" title="apt-get update"></a>apt-get update</h3><p>在安装任何软件之前，我们最好是要更新本地软件包索引（package index）。本地软件包索引列出了软件仓库中所有可安装的软件包以及版本信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<blockquote>
<p>sudo 的在英语里的意思是switch user and do something。在Linux系统上，你需要root权限来安装和卸载软件包。sudo可以临时将你的用户ID切换为root。</p>
</blockquote>
<h3 id="apt-get-install"><a href="#apt-get-install" class="headerlink" title="apt-get install"></a>apt-get install</h3><p>apt-get install 是用来安装软件包的。你需要将软件包的名字添加到 apt-get install 之后。例如，你可以在Ubuntu系统上安装 vim文本编辑器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure>
<p>有时候apt-get会询问你是否真的要安装软件包。如果你想自动回答yes，可以在安装命令中添加 -y 选项。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y vim</span><br></pre></td></tr></table></figure>

<p>在你用apt-get install命令安装软件包之前，你需要知道这个软件包在软件仓库中的名称。这看起来有点麻烦。当你熟悉之后，你会感到非常方便。尤其是当你SSH远程管理Linux服务器的时候。</p>
<p>apt-get首先会从软件仓库中下载deb安装包，这些deb安装在/var/cache/apt/archives目录下。下载后，apt-get会自动安装软件包。</p>
<h3 id="一条命令安装多个软件包"><a href="#一条命令安装多个软件包" class="headerlink" title="一条命令安装多个软件包"></a>一条命令安装多个软件包</h3><p>apt-get install 可以一次性安装多个软件包，比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install wireshark wget curl git</span><br></pre></td></tr></table></figure>

<h3 id="apt-get-upgrade"><a href="#apt-get-upgrade" class="headerlink" title="apt-get upgrade"></a>apt-get upgrade</h3><p>apt-get upgrade命令用来升级系统上可以升级的软件包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>
<p>apt-get 会告诉你哪些软件包会升级。并且询问你是否真的需要升级这些软件包。你可以在命令中添加 -y 选项来自动回答yes。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y upgrade</span><br></pre></td></tr></table></figure>

<h3 id="apt-get-remove"><a href="#apt-get-remove" class="headerlink" title="apt-get remove"></a>apt-get remove</h3><p>这条命令用来删除系统上的软件包，比如，删除Firefox</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove firefox</span><br></pre></td></tr></table></figure>
<p>但它不会删除软件包的配置文件。</p>
<h3 id="apt-get-purge"><a href="#apt-get-purge" class="headerlink" title="apt-get purge"></a>apt-get purge</h3><p>这条命令可以用来删除软件包及其配置文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge firefox</span><br></pre></td></tr></table></figure>

<h3 id="apt-get-clean"><a href="#apt-get-clean" class="headerlink" title="apt-get clean"></a>apt-get clean</h3><p>当apt-get安装或升级软件包时，它会将deb安装包下载到文件系统的<strong>/var/cache/apt/archives</strong>目录下。软件包安装完成后，这些deb安装包基本上就没有什么用处了。apt-get clean命令可以帮你删除这些deb安装包。</p>
<p>你可以使用下面的命令查看/var/cache/apt/archives目录下deb安装包的大小。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -sh &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives</span><br></pre></td></tr></table></figure>

<h3 id="apt-get-autoclean"><a href="#apt-get-autoclean" class="headerlink" title="apt-get autoclean"></a>apt-get autoclean</h3><p>apt-get autoclean也可以用来删除/var/cache/apt/archives目录下的deb安装包。但它只删除那些已经不能从软件仓库中下载的deb安装包。这就是说，Debian或Ubuntu已经不维护那些软件包了，或者那些软件包有了一个新的名字。</p>
<h3 id="apt-get-autoremove"><a href="#apt-get-autoremove" class="headerlink" title="apt-get autoremove"></a>apt-get autoremove</h3><p>这条命令用来删除不需要的依赖软件包。</p>
<h3 id="apt-get-dist-upgrade"><a href="#apt-get-dist-upgrade" class="headerlink" title="apt-get dist-upgrade"></a>apt-get dist-upgrade</h3><p>这条命令可能会让很多人感到困惑．在Debian系统上，你用这条命令升级系统版本，比如从Debian9升级到Debian10。但是在Ubuntu系统上，这条命令只会升级Linux内核以及之前没有被升级的软件包．升级Ubuntu的版本你需要用到do-release-upgrade命令。</p>
<h2 id="附：手动安装Deb软件包"><a href="#附：手动安装Deb软件包" class="headerlink" title="附：手动安装Deb软件包"></a>附：手动安装Deb软件包</h2><h3 id="dpkg-i"><a href="#dpkg-i" class="headerlink" title="dpkg -i"></a>dpkg -i</h3><p>如果你从网站上下载了一个deb软件包，那么你需要dpkg工具来安装这个deb包．例如，你可以下载WPS linux版。然后，在终端里将当前工作目录切换到下载目录，再输入下面的命令安装WPS  Linux版。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i wps-office*.deb</span><br></pre></td></tr></table></figure>

<h3 id="gdebi"><a href="#gdebi" class="headerlink" title="gdebi"></a>gdebi</h3><p>dpkg的一个缺点是它不能解决依赖关系。你必须手动安装依赖包。而gdebi可以帮助我们自动安装依赖包。输入下面的命令安装gdebi。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gdebi</span><br></pre></td></tr></table></figure>

<p>它的命令语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gdebi &lt;package.deb&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>apt</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian/Ubuntu安装Typora编辑器</title>
    <url>/archives/e3fe7203.html</url>
    <content><![CDATA[<h2 id="安装Typora"><a href="#安装Typora" class="headerlink" title="安装Typora"></a>安装Typora</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 添加typora仓库密钥</span><br><span class="line"># sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class="line">wget -qO - https:&#x2F;&#x2F;typora.io&#x2F;linux&#x2F;public-key.asc | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"># 把typora软件源添加到系统源文件 </span><br><span class="line">echo -e &quot;\ndeb https:&#x2F;&#x2F;typora.io&#x2F;linux .&#x2F;&quot; | sudo tee -a &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># 安装typora</span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure>

<h2 id="升级Typora"><a href="#升级Typora" class="headerlink" title="升级Typora"></a>升级Typora</h2><p>安装typora之后，<strong>typora软件包</strong>将受到管理<code>apt-get</code>，因此当您的系统更新已安装的软件包或执行时<code>apt-get upgrade</code>，Typora将更新为最新版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>Debain：安装Mate桌面环境的方法</title>
    <url>/archives/5eedfe66.html</url>
    <content><![CDATA[<p>Mate是一个轻量级的桌面环境，占用系统资源非常少，正常使用下，大约占300MB左右，界面做得非常漂亮，本人十分喜爱，也是我最喜欢的桌面环境。安装了其他桌面(如：gnome) 后，怎么安装mate?</p>
<a id="more"></a>


<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>安装mate桌面软件包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install task-mate-desktop  </span><br><span class="line">apt-get install mate-desktop-environment-extras  #完全安装mate及扩展部分</span><br></pre></td></tr></table></figure>

<p>执行命令后，网速不慢，几分钟就完事，注销选择Mate，进入后即是Mate了。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Mate</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian：安装Google-Chrome浏览器</title>
    <url>/archives/c945e1f0.html</url>
    <content><![CDATA[<p>相对于其它浏览器，我还是觉得<strong>Google-Chrome</strong>浏览器蛮好用的，本文介绍在Debian系统环境下安装chrome浏览器</p>
<a id="more"></a>

<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>1、首先需要下载并安装谷歌官方秘钥</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -q -O - https:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;linux_signing_key.pub | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<p><strong>2、然后是添加谷歌官方软件源</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;deb http:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;chrome&#x2F;deb&#x2F; stable main&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;google-chrome.list</span><br></pre></td></tr></table></figure>

<p><strong>3、执行安装命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get -y install google-chrome-stable</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>apt-get的用法</title>
    <url>/archives/578d7cdf.html</url>
    <content><![CDATA[<p>是Debian及其派生的Linux软件包管理器。在Debian系统中，APT建构于dpkg之上。APT的软件安装来源在Debian安装的时候即可进行初始设置，除了Debian官方的网络安装来源之外，也可以使用Debian的安装光盘，甚至可以从非官方的安装来源中下载非官方的软件。APT同时也可以从一些安装来源中下载源代码软件，并且自行编译、安装。</p>
<a id="more"></a>

<p>注意：’xyz’只是一个占位符。</p>
<h2 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h2><ul>
<li><code>apt-get update</code> 下载新的软件包列表。</li>
<li><code>apt-get upgrade</code> 安装您拥有的软件包的较新版本。</li>
<li><code>apt-get dist-upgrade</code> 在先前的命令中执行升级，并智能地处理新版本软件包的依赖关系，并在必要时尝试以不重要的软​​件包为代价来升级最重要的软件包；有时在极少数必要的情况下删除软件包。</li>
</ul>
<h2 id="软件包搜索和软件包信息"><a href="#软件包搜索和软件包信息" class="headerlink" title="软件包搜索和软件包信息"></a>软件包搜索和软件包信息</h2><ul>
<li><code>apt-cache pkgnames</code> 列出所有可用的软件包。</li>
<li><code>apt-cache xyz</code> 搜索软件包。</li>
<li><code>apt-cache search xyz</code> 搜索包含说明的结果的软件包。</li>
<li><code>apt-cache pkgnames xyz</code> 列出所有以“ xyz”开头的软件包。</li>
<li><code>apt-cache show xyz</code> 检查包装信息。</li>
<li><code>apt-cache showpkg xyz</code> 检查软件包的依赖关系。</li>
<li><code>apt-cache stats</code> 显示有关缓存的整体统计信息。</li>
</ul>
<h2 id="软件包安装和删除"><a href="#软件包安装和删除" class="headerlink" title="软件包安装和删除"></a>软件包安装和删除</h2><ul>
<li><code>apt-get download xyz</code> 仅将软件包下载到当前工作目录。</li>
<li><code>apt-get install xyz</code> 下载并安装软件包。通过在第一个软件包之后拥有所需的多个软件包来安装。</li>
<li><code>apt-get install xyz --no-upgrade</code> 将软件包标记为永不升级。</li>
<li><code>apt-get install xyz --only-upgrade</code> 仅升级指定的软件包，并禁用软件包的新安装。</li>
<li><code>apt-get install &#39;*name*&#39;</code> 使用<em>通配符将安装几个包含’</em> name *’字符串的软件包，如软件包名称中所示。</li>
<li><code>apt-get changelog xyz</code> 下载软件包更改日志并显示已安装的软件包版本。</li>
<li><code>apt-get check</code> 检查损坏的依赖关系。</li>
<li><code>apt-get remove xyz</code> 卸载软件包。</li>
<li><code>apt-get purge xyz</code> 删除软件包中剩余的配置文件。</li>
<li><code>apt-get autoremove</code> 删除孤立的软件包。</li>
<li><code>apt-get clean</code> 删除下载的deb文件。</li>
<li><code>apt-get autoclean</code> 删除已下载的无法再下载的deb文件。</li>
</ul>
<h2 id="源代码包"><a href="#源代码包" class="headerlink" title="源代码包"></a>源代码包</h2><ul>
<li><code>apt-get source xyz</code> 将包的源代码下载并解压缩到目录中。</li>
<li><code>apt-get build-dep xyz</code> 下载并安装软件包的构建依赖项。</li>
<li><code>apt-get --compile source xyz</code> 下载，解压缩和编译源代码。</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>apt</tag>
      </tags>
  </entry>
  <entry>
    <title>apt命令安装软件包过程被强制中断后</title>
    <url>/archives/b9cfb6eb.html</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>apt-get操作被强行中断后，会出现无法进行新的安装和删除的情况只是提示您使用<strong>apt-get -f install</strong>来解决问题。但实际上，你按它的提示操作却解决不了任何问题。</p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p><strong>1、这时你需要这样做</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dpkg --configure -a</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -f</span><br><span class="line">sudo apt-get autoremove </span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<p><strong>2、如果还有一些有问题的软件包可以用下面命令解决</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -r pack</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>-r</code> 选项：移除软件包（保留配置）</p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>apt</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo搭建个人博客（Hexo环境安装）</title>
    <url>/archives/752f7472.html</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol>
<li><p>安装nodejs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -sL https:&#x2F;&#x2F;deb.nodesource.com&#x2F;setup_12.x | bash -</span><br><span class="line">apt-get install nodejs -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看node和npm版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -version      #显示版本号</span><br><span class="line">npm -version       #显示版本号</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装git</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get git -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看git版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git --version        #显示版本号</span><br></pre></td></tr></table></figure>
</li>
<li><p>npm更换国内源（这里使用的是淘宝源）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化hexo项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装默认插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd myblog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>hexo博客生成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>将Hexo部署到GitLab Pages</title>
    <url>/archives/4971f44e.html</url>
    <content><![CDATA[<h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir work</span><br><span class="line">cd work</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init</span><br><span class="line">hexo install</span><br><span class="line">hexo s</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br><span class="line">rm -rf themes&#x2F;next&#x2F;.git&#x2F;</span><br><span class="line">git init</span><br><span class="line">git remote add origin https:&#x2F;&#x2F;gitlab.com&#x2F;ling218&#x2F;ling218.gitlab.io.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Update&quot;</span><br><span class="line">git push -u origin master</span><br><span class="line">echo &quot;lab.ling218.cn&quot; &gt; source&#x2F;CNAME</span><br><span class="line">cat &lt;&lt;-EOF &gt;.gitlab-ci.yml</span><br><span class="line">image: node:11.15.0</span><br><span class="line">cache:</span><br><span class="line">  paths:</span><br><span class="line">    - node_modules&#x2F;</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">  - npm install hexo-cli -g</span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line">pages:</span><br><span class="line">  script:</span><br><span class="line">    - hexo generate</span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">      - public</span><br><span class="line">  only:</span><br><span class="line">    - master</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>让Google搜索引擎知道你的网站</title>
    <url>/archives/aeb319f0.html</url>
    <content><![CDATA[<p><em>让搜索引擎知道你的网站，已经有的东西，就不再造轮子了。直接站在巨人的肩膀上。</em></p>
<a id="more"></a>

<h2 id="谷歌官方帮助："><a href="#谷歌官方帮助：" class="headerlink" title="谷歌官方帮助："></a>谷歌官方帮助：</h2><ul>
<li><a href="https://support.google.com/webmasters/topic/9427949?hl=zh-Hans&amp;ref_topic=9428048" target="_blank" rel="external nofollow noopener noreferrer">https://support.google.com/webmasters/topic/9427949?hl=zh-Hans&amp;ref_topic=9428048</a></li>
</ul>
<p><strong>觉得有点用处，链接发布分享给大家。</strong></p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的Next主题如何获取</title>
    <url>/archives/87b9d5ae.html</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="下载最新release版本"><a href="#下载最新release版本" class="headerlink" title="下载最新release版本"></a>下载最新release版本</h3><p>这种方式将<strong>仅提供最新的 release 版本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir themes&#x2F;next</span><br><span class="line">curl -s https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;theme-next&#x2F;hexo-theme-next&#x2F;releases&#x2F;latest | grep tarball_url | cut -d &#39;&quot;&#39; -f 4 | wget -i - -O- | tar -zx -C themes&#x2F;next --strip-components&#x3D;1</span><br></pre></td></tr></table></figure>

<h3 id="下载指定的release版本"><a href="#下载指定的release版本" class="headerlink" title="下载指定的release版本"></a>下载指定的release版本</h3><p>在少数情况下将有所帮助，但这并非推荐方式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone --branch v6.0.0 https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<h3 id="下载最新master分支"><a href="#下载最新master分支" class="headerlink" title="下载最新master分支"></a>下载最新master分支</h3><p>可能<strong>不稳定</strong>，但包含最新的特性。推荐进阶用户和开发者按此方式进行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown使用方法</title>
    <url>/archives/5115fa64.html</url>
    <content><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<a id="more"></a>


<h2 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文字格式</span><br><span class="line">*斜体*或_斜体_ </span><br><span class="line">**粗体**</span><br><span class="line">***加粗斜体*** </span><br><span class="line">~~删除线~~</span><br><span class="line">&#x3D;&#x3D;高亮&#x3D;&#x3D;</span><br><span class="line">上标2^2^</span><br><span class="line">下标H~2~o</span><br><span class="line"></span><br><span class="line">标题</span><br><span class="line"># 一级标题  </span><br><span class="line">## 二级标题  </span><br><span class="line">### 三级标题  </span><br><span class="line">#### 四级标题  </span><br><span class="line">##### 五级标题  </span><br><span class="line">###### 六级标题</span><br><span class="line"></span><br><span class="line">超链接</span><br><span class="line">[LinG218](https:&#x2F;&#x2F;www.ling218.cn) </span><br><span class="line">常用的搜索引擎[Google][1],[Baidu][2],[example][]  </span><br><span class="line">[1]:https:&#x2F;&#x2F;www.google.com</span><br><span class="line">[2]:https:&#x2F;&#x2F;www.baidu.com </span><br><span class="line">[example]:https:&#x2F;&#x2F;www.example.com</span><br><span class="line"></span><br><span class="line">自动链接 </span><br><span class="line">&lt;http:&#x2F;&#x2F;example.com&gt; </span><br><span class="line">&lt;address@example.com&gt;</span><br><span class="line"></span><br><span class="line">无序列表  </span><br><span class="line">* 无序列表项   </span><br><span class="line">- 无序列表项  </span><br><span class="line">+ 无序列表项    </span><br><span class="line"></span><br><span class="line">有序列表</span><br><span class="line">1. 有序列表项  </span><br><span class="line">2. 有序列表项  </span><br><span class="line">3. 有序列表项  </span><br><span class="line"></span><br><span class="line">引用</span><br><span class="line">&gt; 引用项</span><br><span class="line"></span><br><span class="line">插入图片</span><br><span class="line">	![图片alt](图片地址 &quot;图片title&quot;)   </span><br><span class="line">	图片alt就是显示在图片下面的文字，相当于对图片内容的解释。    </span><br><span class="line">	图片title是图片的标题，当鼠标移动到图片上时显示的内容。title可加可不加。    </span><br><span class="line">![我的头像](https:&#x2F;&#x2F;www.ling218.cn&#x2F;updates&#x2F;avatar.jpg&quot;网络上引用图片&quot;)	  </span><br><span class="line"></span><br><span class="line">表格</span><br><span class="line">不管是哪种方式，**第一行为表头**，**第二行分隔表头和主体部分**，**第三行开始每一行为一个表格行**。 列于列之间用管道符 &#96;|&#96; 隔开。原生方式的表格每一行的两边也要有管道符。 第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上 &#96;:&#96; 就右对齐。 </span><br><span class="line"></span><br><span class="line">分隔线</span><br><span class="line">你可以在一行中用 &#96;3&#96; 个以上的**星号、减号、底线**来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线 。</span><br><span class="line"></span><br><span class="line">代码</span><br><span class="line">对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用&quot;&#96;&quot;符号（一般在ESC键下方）包裹代码。</span><br><span class="line">	1. 插入行内代码，即插入一个单词或者一句代码的情况。</span><br><span class="line">	2. 插入多行代码，可以使用缩进或者用三个符号包裹代码，具体看示例。 </span><br><span class="line">注意： 缩进式插入前方必须有空行。</span><br><span class="line"></span><br><span class="line">选项</span><br><span class="line">- [x] 选中</span><br><span class="line">- [] 未选中</span><br><span class="line"></span><br><span class="line">文章目录</span><br><span class="line">[TOC]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Next7.x主题添加背景图片</title>
    <url>/archives/81b35757.html</url>
    <content><![CDATA[<p>打开<strong>主题配置文件</strong> <code>themes/next/_config.yml</code> ，搜索找到 custom_file_path ，将下列代码取消注释。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style: source&#x2F;_data&#x2F;styles.styl</span><br></pre></td></tr></table></figure>

<h2 id="站点根目录"><a href="#站点根目录" class="headerlink" title="站点根目录"></a>站点根目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p source&#x2F;_data</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim source&#x2F;_data&#x2F;styles.styl</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加背景图片</span><br><span class="line">body &#123;</span><br><span class="line">      background: url(https:&#x2F;&#x2F;source.unsplash.com&#x2F;random&#x2F;1600x900?wallpapers);&#x2F;&#x2F;自己喜欢的图片地址</span><br><span class="line">      background-size: cover;</span><br><span class="line">      background-repeat: no-repeat;</span><br><span class="line">      background-attachment: fixed;</span><br><span class="line">      background-position: 50% 50%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 修改主体透明度</span><br><span class="line">.main-inner &#123;</span><br><span class="line">      background: #fff;</span><br><span class="line">      opacity: 0.8;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 修改菜单栏透明度</span><br><span class="line">.header-inner &#123;</span><br><span class="line">      opacity: 0.8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客优化之SEO</title>
    <url>/archives/b5c0f932.html</url>
    <content><![CDATA[<p>SEO (Search Engine Optimization)，即搜索引擎优化。对网站做SEO优化，有利于提高搜索引擎的收录速度及网页排名。下面讲解一些简单的SEO优化方法，主要针对Hexo网站。</p>
<a id="more"></a>

<h2 id="SEO优化之title"><a href="#SEO优化之title" class="headerlink" title="SEO优化之title"></a>SEO优化之title</h2><p>编辑站点目录下的<code>themes/layout/index.swig</code>文件，<br>将下面的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endlock %&#125;</span><br></pre></td></tr></table></figure>
<p>修改成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endlock %&#125;</span><br></pre></td></tr></table></figure>

<p>这时将网站的描述及关键词加入了网站的<code>title</code>中，更有利于详细地描述网站。</p>
<h2 id="添加robots-txt"><a href="#添加robots-txt" class="headerlink" title="添加robots.txt"></a>添加robots.txt</h2><p><strong>robots.txt</strong>是一种存放于网站根目录下的ASCII编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。robots.txt应该放在站点目录下的source文件中，网站生成后在网站的根目录(<code>站点目录/public/</code>)下。</p>
<p>我的<code>robots.txt</code>文件内容如下<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: &#x2F;</span><br><span class="line">Allow: &#x2F;archives&#x2F;</span><br><span class="line">Allow: &#x2F;categories&#x2F;</span><br><span class="line">Allow: &#x2F;about&#x2F;</span><br><span class="line"></span><br><span class="line">Disallow: &#x2F;vendors&#x2F;</span><br><span class="line">Disallow: &#x2F;js&#x2F;</span><br><span class="line">Disallow: &#x2F;css&#x2F;</span><br><span class="line">Disallow: &#x2F;fonts&#x2F;</span><br><span class="line">Disallow: &#x2F;vendors&#x2F;</span><br><span class="line">Disallow: &#x2F;fancybox&#x2F;</span><br></pre></td></tr></table></figure></p>
<h2 id="添加sitemap"><a href="#添加sitemap" class="headerlink" title="添加sitemap"></a>添加sitemap</h2><p><strong>Sitemap</strong>即网站地图，它的作用在于便于搜索引擎更加智能地抓取网站。最简单和常见的sitemap形式，是XML文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新时间、更新的频率及相对其他网址重要程度等）。</p>
<ol>
<li><p>安装sitemap生成插件</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑站点目录下的_config.yml，添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hexo sitemap网站地图</span><br><span class="line">sitemap:</span><br><span class="line">path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">path: baidusitemap.xml</span><br></pre></td></tr></table></figure>
</li>
<li><p>在robots.txt文件中添加</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sitemap: http:&#x2F;&#x2F;www.ling218.cn&#x2F;sitemap.xml</span><br><span class="line">Sitemap: http:&#x2F;&#x2F;www.ling218.cn&#x2F;baidusitemap.xml</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>seo</tag>
      </tags>
  </entry>
  <entry>
    <title>01H3C查询命令</title>
    <url>/archives/c0f8a90b.html</url>
    <content><![CDATA[<h1 id="H3C查询命令"><a href="#H3C查询命令" class="headerlink" title="H3C查询命令"></a>H3C查询命令</h1><h2 id="OSPF-开放最短路径优先"><a href="#OSPF-开放最短路径优先" class="headerlink" title="OSPF 开放最短路径优先"></a>OSPF 开放最短路径优先</h2><h3 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display ospf peer &#x2F;&#x2F;显示OSPF邻居信息</span><br><span class="line">display ospf interface &#x2F;&#x2F;显示OSPF接口信息</span><br><span class="line">display ospf routing &#x2F;&#x2F;显示OSPF路由信息</span><br><span class="line">display ip routing-table &#x2F;&#x2F;显示IP路由表中的OSPF路由</span><br><span class="line">display ospf verbose &#x2F;&#x2F;显示OSPF进程详细信息</span><br><span class="line">display ospf statistics &#x2F;&#x2F;显示OSPF统计信息</span><br><span class="line">display ospf statistics error &#x2F;&#x2F;显示OSPF的错误统计信息</span><br><span class="line">display ospf lsdb &#x2F;&#x2F;显示OSPF的LSDB信息</span><br><span class="line">display ospf vlink &#x2F;&#x2F;显示OSPF虚连接信息</span><br></pre></td></tr></table></figure>

<h3 id="OSPF调试命令"><a href="#OSPF调试命令" class="headerlink" title="OSPF调试命令"></a>OSPF调试命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">debugging ospf event &#x2F;&#x2F;OSPF事件调试命令（用户视图）</span><br><span class="line">debugging ospf lsa &#x2F;&#x2F;OSPF链路状态通告调试信息</span><br><span class="line">debugging ospf packet &#x2F;&#x2F;OSPF报文调试信息</span><br><span class="line">debugging ospf spf &#x2F;&#x2F;OSPF路由计算调试信息</span><br><span class="line">debugging ospf INTEGER&lt;1-65535&gt; &#x2F;&#x2F;OSPF进程调试信息</span><br></pre></td></tr></table></figure>

<h3 id="配置命令-接口视图"><a href="#配置命令-接口视图" class="headerlink" title="配置命令(接口视图)"></a>配置命令(接口视图)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ospf network-type｛broadcast | nbma | p2mp | p2p｝&#x2F;&#x2F;配置接口的网络类型</span><br><span class="line">ospf dr-priority priority &#x2F;&#x2F;配置接口的优先级</span><br><span class="line">ospf cost value &#x2F;&#x2F;配置接口的开销值</span><br><span class="line">ospf timer hello seconds &#x2F;&#x2F;配置Hello定时器</span><br><span class="line">ospf timer dead seconds &#x2F;&#x2F;邻居失效时间</span><br><span class="line">bandwidth-reference value &#x2F;&#x2F;配置接口的参考带宽（ospf视图）</span><br><span class="line">default-route-advertise &#x2F;&#x2F;将默认的路由引入到OSPF路由区域(ospf视图)  always如果本机没有配置默认路由，该参数可产生一个描述默认路由的LSA发布出去 cost该默认路由的度量值 type该LSA的类型</span><br><span class="line">vlink-peer router-id｛dead|hello|cipher|simple｝&#x2F;&#x2F;配置虚拟连接（ospf区域视图）</span><br><span class="line">router id router-id &#x2F;&#x2F;所有协议的Router ID都被指定</span><br><span class="line">ospf process-id router-id router-id &#x2F;&#x2F;配置OSPF协议的Router ID</span><br><span class="line">ospf process-id &#x2F;&#x2F;启动OSPF进程</span><br><span class="line">area area-id &#x2F;&#x2F;配置OSPF区域</span><br><span class="line">network network-address wildcard-mask &#x2F;&#x2F;配置区域所包含的网段并在指定网段的接口上使能OSPF</span><br></pre></td></tr></table></figure>










]]></content>
  </entry>
  <entry>
    <title>01RIP 路由信息协议</title>
    <url>/archives/d99d600f.html</url>
    <content><![CDATA[<h1 id="RIP-路由信息协议"><a href="#RIP-路由信息协议" class="headerlink" title="RIP 路由信息协议"></a>RIP 路由信息协议</h1>]]></content>
  </entry>
  <entry>
    <title>01OSPF 开放最短优先</title>
    <url>/archives/5ea6f674.html</url>
    <content><![CDATA[<h1 id="OSPF-开放最短优先"><a href="#OSPF-开放最短优先" class="headerlink" title="OSPF 开放最短优先"></a>OSPF 开放最短优先</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>是IETF组织开发的一个基于链路状态的内部网关协议</li>
</ul>
<h2 id="OSPF协议特点"><a href="#OSPF协议特点" class="headerlink" title="OSPF协议特点"></a>OSPF协议特点</h2><ul>
<li>没有路由跳数的限制（15）</li>
<li>使用组播更新变化的路由和网络信息（224.0.0.5、224.0.0.6）</li>
<li>路由收敛速度较快（触发更新）</li>
<li>以开销（cost）作为度量值 </li>
<li>采用的SPF算法可以有效的避免环路</li>
<li>在互联网上大量使用，是运用最广泛的路由协议</li>
</ul>
<h2 id="OSPF表项"><a href="#OSPF表项" class="headerlink" title="OSPF表项"></a>OSPF表项</h2><ul>
<li>邻居表记录了建立邻居关系的路由器</li>
<li>LSDB中包含了所有的链路状态信息，并需要实时同步</li>
<li>经过SPF算法计算出的路由存放在OSPF路由表中</li>
</ul>
<h2 id="生成OSPF路由"><a href="#生成OSPF路由" class="headerlink" title="生成OSPF路由"></a>生成OSPF路由</h2><ul>
<li>网络的拓扑结构</li>
<li>每台路由器的LSDB</li>
<li>由LSDB得到的带权有向图</li>
<li>每台路由器分别以自己为根节点计算最小生成树</li>
</ul>
<h2 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h2><ul>
<li>骨干区域</li>
<li>非骨干区域</li>
<li>骨干区域负责转发非骨干区域之间的路由</li>
</ul>
<h3 id="划分区域的优势"><a href="#划分区域的优势" class="headerlink" title="划分区域的优势"></a>划分区域的优势</h3><ul>
<li>减少了区域内的LSDB中链路状态信息的数量，降低了运行OSPF协议对路由器性能的要求</li>
<li>可以将相同功能性或者地理位置的路由器划分在一个区域内，以便于管理</li>
<li>隔离拓扑变化，减少路由震荡对整个自治系统的影响</li>
</ul>
<h2 id="OSPF路由器类型"><a href="#OSPF路由器类型" class="headerlink" title="OSPF路由器类型"></a>OSPF路由器类型</h2><ul>
<li>区域内路由器 （Internal Router）</li>
<li>区域边界路由器 (ABR，Area Border Router)</li>
<li>骨干路由器（Backbone Router）</li>
<li>自治系统边界路由器（ASBR，Autonomous System Border Router）</li>
</ul>
<h2 id="Router-ID"><a href="#Router-ID" class="headerlink" title="Router ID"></a>Router ID</h2><ul>
<li>一台路由器如果要运行OSPF协议，则必须存在Router ID。RID是一个32比特无符号整数，可以在一个自治系统中唯一标识一台路由器</li>
<li>RID可以手工配置，也可以自动生成 </li>
<li>如果没有通过命令指定RID，将按照如下顺序自动生成一个RID</li>
<li>如果存在配置IP地址的Loopback接口，则选择Loopback接口地址中最大的作为Router ID</li>
<li>如果没有配置IP地址的Loopback接口，则从其他接口的IP地址中选择最大的作为Router ID（不考虑接口的UP/DOWN状态）</li>
</ul>
<h2 id="OSPF网络类型"><a href="#OSPF网络类型" class="headerlink" title="OSPF网络类型"></a>OSPF网络类型</h2><ul>
<li>Broadcast（广播）默认以太网协议，生成时间，死亡时间10s、40s</li>
<li>P2P (点到点)默认PPP协议，生成时间，死亡时间10s、40s</li>
<li>NBMA (非广播多点可达网络) 默认FR协议，生成时间，死亡时间30s、120s </li>
<li>P2MP（点到多点）只能由其他类型更改而来，生成时间，死亡时间30s、120s</li>
</ul>
<h3 id="NBMA与P2MP"><a href="#NBMA与P2MP" class="headerlink" title="NBMA与P2MP"></a>NBMA与P2MP</h3><ul>
<li>NBMA网络是指那些全连通的、非广播、多点可达网络。</li>
<li>而P2MP网络，则并不需要一定是全连通的</li>
<li>NBMA是一种缺省的网络类型</li>
<li>P2MP网络必须是由其它的网络强制更改的</li>
<li>NBMA网络采用单播发送报文，需要手工配置邻居。</li>
<li>P2MP网络采用组播方式发送报文。</li>
</ul>
<h2 id="OSPF报文类型与封装"><a href="#OSPF报文类型与封装" class="headerlink" title="OSPF报文类型与封装"></a>OSPF报文类型与封装</h2><table>
<thead>
<tr>
<th align="center">OSPF报文类型</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Hello</td>
<td align="center">建立邻居关系、周期性维护邻居关系</td>
</tr>
<tr>
<td align="center">Database Description(DD)</td>
<td align="center">协商主从、发送摘要</td>
</tr>
<tr>
<td align="center">Link State Request(LSR)</td>
<td align="center">请求不具备的LSA</td>
</tr>
<tr>
<td align="center">Link State Update(LSU)</td>
<td align="center">发送详细的LSA信息</td>
</tr>
<tr>
<td align="center">Link State Acknowledge(LSAck)</td>
<td align="center">确认收到LSA</td>
</tr>
</tbody></table>
<h2 id="OSPF报文格式"><a href="#OSPF报文格式" class="headerlink" title="OSPF报文格式"></a>OSPF报文格式</h2><p>| 链路层帧头 | IP Header | OSPF Packet | 链路层帧尾 |</p>
<ul>
<li>OSPF报文直接封装在IP报文中，协议号为89</li>
</ul>
<h2 id="邻居关系"><a href="#邻居关系" class="headerlink" title="邻居关系"></a>邻居关系</h2><ul>
<li>建立邻居关系</li>
<li>维持邻居关系<ul>
<li>邻居之间通过交换Hello报文，确认邻居是否工作正常</li>
<li>如果在一定的时间间隔内，收不到邻居发来的Hello报文，就认为邻居已经失效，从邻居表中删除</li>
</ul>
</li>
<li>DR/BDR的选举 <ul>
<li>采用DR/BDR建立邻接关系，可以降低需要维护的邻接关系数量</li>
</ul>
</li>
<li>邻接关系建立</li>
<li>在广播和NBMA网络中，链路状态发生变化时，主要是通过DR路由器发送更新报文</li>
</ul>
<h2 id="DR-BDR的选举原则"><a href="#DR-BDR的选举原则" class="headerlink" title="DR/BDR的选举原则"></a>DR/BDR的选举原则</h2><ul>
<li>首先比较Hello报文中携带的优先级（优先级最高的选举为DR，优先级次高的被选举为BDR，优先级为0的不参与选举）</li>
<li>优先级一致的情况下，比较Router ID（越大越优先）</li>
<li>保持稳定原则（选举完毕，一台具有更高优先级的路由器变为有效，也不会替换该网段中已经选举的DR/BDR）</li>
</ul>
<h2 id="OSPF的状态机"><a href="#OSPF的状态机" class="headerlink" title="OSPF的状态机"></a>OSPF的状态机</h2><ul>
<li>down 接口没有启用ospf</li>
<li>init hello报文中的参数没有协商成功</li>
<li>att NBMA，只发了Hello还没接受</li>
<li>2-way Hello报文中的参数协商成功（route-id、接口地址和掩码、生成时间死亡时间、区域、特殊区域、验证）</li>
<li>exstart 发送第一个DD报文，协商主从关系</li>
<li>exchange 发送第二个DD报文，携带摘要信息</li>
<li>loading 互相学习LSA，发送LSR、LSU、LSAck报文</li>
<li>full 区域内LSA同步</li>
</ul>
<h2 id="LSDB更新"><a href="#LSDB更新" class="headerlink" title="LSDB更新"></a>LSDB更新</h2><ul>
<li>收到一条LSA更新报文，在LSDB中查找，没找到就加入LSDB</li>
<li>查找到比谁的LSA序列号大，序列号大的加入LSDB</li>
<li>在广播和NBMA网络中，链路状态发生变化时，主要是通过DR路由器发送更新报文</li>
</ul>
<h2 id="区域划分时存在的问题"><a href="#区域划分时存在的问题" class="headerlink" title="区域划分时存在的问题"></a>区域划分时存在的问题</h2><ul>
<li>骨干区域被分割</li>
<li>非骨干区域无法和骨干区域保持连通</li>
</ul>
<h2 id="虚连接"><a href="#虚连接" class="headerlink" title="虚连接"></a>虚连接</h2><ul>
<li>解决骨干区域被分割的问题</li>
<li>解决非骨干区域无法和骨干区域保持连通的问题</li>
</ul>
]]></content>
  </entry>
</search>
